<?xml version="1.0" encoding="utf-8" ?>
<description
    xmlns=           "http://www.w3.org/ns/wsdl"
    targetNamespace= "http://jenkov.com/MyService"
	xmlns:wsdl=		 "http://www.w3.org/ns/wsdl"
    xmlns:tns=       "http://jenkov.com/MyService"
    xmlns:stns =     "http://jenkov.com/MyService/schema"
    xmlns:wsoap=     "http://www.w3.org/ns/wsdl/soap"
    xmlns:soap=      "http://www.w3.org/2003/05/soap-envelope"
    xmlns:wsdlx=     "http://www.w3.org/ns/wsdl-extensions"
	xmlns:sawsdl=    "http://www.w3.org/ns/sawsdl" >
	<!-- The WSDL description element is the root element of a WSDL 2.0 file. 
	The description element begin tag usually contains a set of name space 
	declarations which are used throughout the WSDL file. -->
	<!-- xmlns sem ":" define o default namespace, que dispensa utilização do prefixo, para os elementos.
	Caso contrário, seria necessário wsdl:types -->
  <documentation>
    This is the web service documentation.
  </documentation>

  <types>
	<!-- The WSDL types element describes the data types used by your web service. 
	Most often a web service will have an input type, an output type, and perhaps a 
	fault type. If the web service has more than one operation, then each operation may 
	have its own input type, output type and fault type. -->
    <xs:schema
        xmlns:xs=        "http://www.w3.org/2001/XMLSchema"
        targetNamespace= "http://jenkov.com/MyService/schema"
        xmlns:d=           "http://jenkov.com/MyService/schema">
		
		<!-- The latestTutorialRequest element is the input type. As you can see, 
		this element is of type typeLatestTutorialRequest, and it can contain a 
		date, telling which date to get the latest tutorial after. -->
		<xs:element name="latestTutorialRequest" 
						type="typeLatestTutorialRequest"/>
		
		
		<xs:complexType name="typeLatestTutorialRequest">
			<xs:sequence>
				<xs:element  name="date"   type="xs:date"/>
			</xs:sequence>
		</xs:complexType>
		
		<!-- The latestTutorialResponse element is the output type. The content 
		of this element is just a string. This will contain the URL for the latest 
		tutorial published after the given date, or an empty string if no tutorial 
		was published after the given date. -->
		<xs:element name="latestTutorialResponse" type="xs:string"/>
		
		<!-- The invalidDateError element is the fault type. The content of this 
		element is just a string. This string can contain a textual explanation 
		of why the date given in the input request was faulty. -->
		<xs:element name="invalidDateError" type="xs:string"/>

    </xs:schema>
  </types>
  
  <!-- The WSDL interface element describes the operations supported by your 
  web service. Each operation represents an interaction between the client and 
  the service. In other words, the client can only call one operation per request. 
  Operations are thus very similar to methods / procedures in a programming language. -->
  <!-- Since you can have more than one interface element in a WSDL 2.0 file, 
  each interface must be given an unique name.  -->
  <interface  name = "latestTutorialInterface" sawsdl:modelReference="http://www.example.org/model#capability" sawsdl:liftingSchemaMapping="http://blabla.com http://bleble.org">
	<!-- The fault element defines a fault which can be sent back to the client. 
	The same fault can be used by multiple operations. That is why it is defined 
	outside the following operation element. -->
	<fault name = "invalidDateFault"  element = "stns:invalidDateError"/>
	
	<!-- The operation element describes an operation. A method or procedure, in other words.
	
	The name attribute of the operation element defines the name for the operation. 
	This name must be unique within the interface element. The operation name is used later, 
	when describing bindings for the operation.
	
	The pattern attribute of the operation element describes what message exchange pattern 
	this operation uses. These can be either in, out or in-out, meaning data in, data out, 
	data in-out. Or, request-only, response-only, request-response. In-out is the most common 
	pattern to use.
	
	The style attribute is left out here.
	
	The wsdlx:safe attribute indicates that this operation is safe to call, 
	meaning the customer does not agree to buy anything, or order anything. -->
    <operation 
			name="latestTutorialOperation"
            pattern="http://www.w3.org/ns/wsdl/in-out"
            style="http://www.w3.org/ns/wsdl/style/iri"
            wsdlx:safe = "true">

		<input    messageLabel="In"  element="stns:latestTutorialRequest" />
		<output   messageLabel="Out" element="stns:latestTutorialResponse" />
		<outfault messageLabel="Out" ref    ="tns:invalidDateFault" />
    
    </operation>

  </interface>

  <!-- The WSDL binding element describes how your web service is bound to a 
  protocol. In other words, how your web service is accessible. To be accessible, 
  the web service must be reachable using some network protocol. This is called 
  "binding" the web service to the protocol. And this is what the binding element does. -->
  
  <!--
  The binding name is referenced by the service element. Thus it should be unique within the WSDL file.
  
  The interface attribute should refer to the name of an interface element 
  defined in this WSDL file. Hence the tns: prefix (in this WSDL's Target Name Space).
  
  The type attribute tells what kind of message format the interface is bound to. 
  The value in the example states that the message format is SOAP.
  
  The wsoap:protocol attribute specifies a SOAP binding - in other words, how the 
  SOAP messages are transported. The value in the example specifies HTTP.
  
  The operation element references an operation defined in the interface that this 
  binding refers to. This references is made by the ref attribute. Notice the 
  tns: prefix again, pointing to a name defined inside this WSDL.
  
  The wsoap:mep attribute of the operation element, specifies a Message Exchange 
  Pattern (MEP), which is a SOAP thing. See the the WSDL spec for more detail on this attribute.
  
  The fault element defines a fault which may be sent back by the web service, 
  via this binding. The fault element references a fault defined in the interface 
  element this binding refers to. See the WSDL spec for more detail on this attribute.
  -->
  <binding 
		name="latestTutorialSOAPBinding"
        interface="tns:latestTutorialInterface"
        type="http://www.w3.org/ns/wsdl/soap"
        wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP/">

    <fault ref="tns:invalidDateFault" wsoap:code="soap:Sender"/>

    <operation ref="tns:latestTutorialOperation"
      wsoap:mep="http://www.w3.org/2003/05/soap/mep/soap-response"/>

  </binding>

  <!-- The WSDL service element describes the endpoint of your web service. 
  In other words, the address where the web service can be reached. -->
  <!-- The name attribute describes the name of the service you are defining with 
  the service element.
  
  The interface attribute specifies which interface element this service element is related to.
  
  The endpoint element describes the address of the web service. The endpoint binding 
  attribute describes what binding element this endpoint uses. In other words, the 
  protocol via which you can access the service. The address attribute describes the URI 
  at which you can access the service. -->
  <service
       name     ="latestTutorialService"
       interface="tns:latestTutorialInterface">

     <endpoint name ="latestTutorialEndpoint"
            binding ="tns:latestTutorialSOAPBinding"
            address ="http://jenkov.com/latestTutorial"/>

  </service>

</description>
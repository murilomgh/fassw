/*
 wsmo4j - a WSMO API and Reference Implementation

 Copyright (c) 2004-2005, OntoText Lab. / SIRMA

 This library is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation; either version 2.1 of the License, or (at your option)
 any later version.
 This library is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 details.
 You should have received a copy of the GNU Lesser General Public License along
 with this library; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

/**
 * <p>Title: WSMO4J</p>
 * <p>Description: WSMO API and a Reference Implementation</p>
 * <p>Copyright:  Copyright (c) 2004-2005</p>
 * <p>Company: OntoText Lab. / SIRMA </p>
 */

package com.ontotext.wsmo4j.parser.wsml;

import java.util.*;

import org.wsmo.wsml.compiler.analysis.*;
import org.wsmo.wsml.compiler.node.*; // the import will be used after code generation

/**
 * ASTAnalysisContainer is code generated class by ASTAnalysisContainerGenerator
 * all changes bellow "DO NOT MODIFY THIS LINE OR THE GENERATED CODE BELLOW" will
 * NOT be persisted after the next code generation!
 * 
 * You have to code generate this class after any update in wsml.scc file -
 * @see ASTContainerGenerator.
 * 
 * @author not attributable
 */
public class ASTAnalysisContainer extends DepthFirstAdapter {

    /**
     * Get the stack storing specific type of objects.
     * @param typeOfStack type of objects to hold
     * @return stack
     */
    public Stack getStack(Class typeOfStack) {
        Object stack = objectStacks.get(typeOfStack);
        if (stack == null) {
            stack = new Stack();
            objectStacks.put(typeOfStack, stack);
        }
        if (!(stack instanceof Stack)) {
            stack = new Stack();
        }

        return (Stack) stack;
    }

    /**
     * Peek in the specified type of stack.
     * @param typeOfStack type of stack to peek in
     * @param type expected type
     * @return handle to the object in the stack
     */
    public Object peekFromStack(Class typeOfStack, Class type) {
        Stack stack = getStack(typeOfStack);
        if (stack.isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        Object handle = stack.peek();
        if (!type.isInstance(handle)) {
            throw new RuntimeException("Invalid requested type!");
        }
        return handle;
    }

    /**
     * Pop object from the specified stack.
     * @param typeOfStack type of stack to peek in
     * @param type expected type
     * @return removed object from the stack
     */
    public Object popFromStack(Class typeOfStack, Class type) {
        Stack stack = getStack(typeOfStack);
        if (stack.isEmpty()) {
            throw new RuntimeException("Requested stack was empty!");
        }
        Object handle = stack.pop();
        if (!type.isInstance(handle)) {
            throw new RuntimeException("Invalid requested type!");
        }
        return handle;
    }

    /**
     * Register/subscribe an object for specified event in the AST travers. 
     * @param nodeType AST node (e.g AOntology, AGoal...)
     * @param analysisAdapter object to handle the event
     */
    public void registerNodeHandler(Class nodeType, ASTAnalysis analysisAdapter) {
        if (nodeType == null || analysisAdapter == null) {
            throw new IllegalArgumentException();
        }
        adaptersToHandleNodes.put(nodeType, analysisAdapter);
    }

    /**
     * Gets the object to handle specific event in the AST travers.
     * @param nodeType
     * @return
     */
    public ASTAnalysis getNodeHandler(Class nodeType) {
        Object adapter = adaptersToHandleNodes.get(nodeType);
        if (!(adapter instanceof ASTAnalysis || adapter == null)) {
            throw new RuntimeException("No registered object for the requested type!");
        }

        return (ASTAnalysis) adapter;
    }

    private Map adaptersToHandleNodes = new HashMap();

    private Map objectStacks = new HashMap();

    // Source code is generated by ASTAdapterContainerGenerator.java
    // DO NOT MODIFY THIS LINE OR THE GENERATED CODE BELLOW

    public void inStart(Start node) {
        Object adapter = adaptersToHandleNodes.get(Start.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inStart(node);
        }
        super.inStart(node); // to continue the tree traversal
    }

    public void outStart(Start node) {
        Object adapter = adaptersToHandleNodes.get(Start.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outStart(node);
        }
        super.outStart(node); // to continue the tree traversal
    }

    public void caseStart(Start node) {
        Object adapter = adaptersToHandleNodes.get(Start.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseStart(node);
        }
        super.caseStart(node); // to continue the tree traversal
    }

    public void inAVariableVariables(AVariableVariables node) {
        Object adapter = adaptersToHandleNodes.get(AVariableVariables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAVariableVariables(node);
        }
        super.inAVariableVariables(node); // to continue the tree traversal
    }

    public void outAVariableVariables(AVariableVariables node) {
        Object adapter = adaptersToHandleNodes.get(AVariableVariables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAVariableVariables(node);
        }
        super.outAVariableVariables(node); // to continue the tree traversal
    }

    public void caseAVariableVariables(AVariableVariables node) {
        Object adapter = adaptersToHandleNodes.get(AVariableVariables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAVariableVariables(node);
        }
        super.caseAVariableVariables(node); // to continue the tree traversal
    }

    public void inACarriesconcept(ACarriesconcept node) {
        Object adapter = adaptersToHandleNodes.get(ACarriesconcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACarriesconcept(node);
        }
        super.inACarriesconcept(node); // to continue the tree traversal
    }

    public void outACarriesconcept(ACarriesconcept node) {
        Object adapter = adaptersToHandleNodes.get(ACarriesconcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACarriesconcept(node);
        }
        super.outACarriesconcept(node); // to continue the tree traversal
    }

    public void caseACarriesconcept(ACarriesconcept node) {
        Object adapter = adaptersToHandleNodes.get(ACarriesconcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACarriesconcept(node);
        }
        super.caseACarriesconcept(node); // to continue the tree traversal
    }

    public void inAMultVal(AMultVal node) {
        Object adapter = adaptersToHandleNodes.get(AMultVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMultVal(node);
        }
        super.inAMultVal(node); // to continue the tree traversal
    }

    public void outAMultVal(AMultVal node) {
        Object adapter = adaptersToHandleNodes.get(AMultVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMultVal(node);
        }
        super.outAMultVal(node); // to continue the tree traversal
    }

    public void caseAMultVal(AMultVal node) {
        Object adapter = adaptersToHandleNodes.get(AMultVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMultVal(node);
        }
        super.caseAMultVal(node); // to continue the tree traversal
    }

    public void inAActivitygroupGroup(AActivitygroupGroup node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupGroup.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAActivitygroupGroup(node);
        }
        super.inAActivitygroupGroup(node); // to continue the tree traversal
    }

    public void outAActivitygroupGroup(AActivitygroupGroup node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupGroup.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAActivitygroupGroup(node);
        }
        super.outAActivitygroupGroup(node); // to continue the tree traversal
    }

    public void caseAActivitygroupGroup(AActivitygroupGroup node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupGroup.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAActivitygroupGroup(node);
        }
        super.caseAActivitygroupGroup(node); // to continue the tree traversal
    }

    public void inADataTerm(ADataTerm node) {
        Object adapter = adaptersToHandleNodes.get(ADataTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADataTerm(node);
        }
        super.inADataTerm(node); // to continue the tree traversal
    }

    public void outADataTerm(ADataTerm node) {
        Object adapter = adaptersToHandleNodes.get(ADataTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADataTerm(node);
        }
        super.outADataTerm(node); // to continue the tree traversal
    }

    public void caseADataTerm(ADataTerm node) {
        Object adapter = adaptersToHandleNodes.get(ADataTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADataTerm(node);
        }
        super.caseADataTerm(node); // to continue the tree traversal
    }

    public void inAMemberof(AMemberof node) {
        Object adapter = adaptersToHandleNodes.get(AMemberof.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMemberof(node);
        }
        super.inAMemberof(node); // to continue the tree traversal
    }

    public void outAMemberof(AMemberof node) {
        Object adapter = adaptersToHandleNodes.get(AMemberof.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMemberof(node);
        }
        super.outAMemberof(node); // to continue the tree traversal
    }

    public void caseAMemberof(AMemberof node) {
        Object adapter = adaptersToHandleNodes.get(AMemberof.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMemberof(node);
        }
        super.caseAMemberof(node); // to continue the tree traversal
    }

    public void inAAggregationNode(AAggregationNode node) {
        Object adapter = adaptersToHandleNodes.get(AAggregationNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAggregationNode(node);
        }
        super.inAAggregationNode(node); // to continue the tree traversal
    }

    public void outAAggregationNode(AAggregationNode node) {
        Object adapter = adaptersToHandleNodes.get(AAggregationNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAggregationNode(node);
        }
        super.outAAggregationNode(node); // to continue the tree traversal
    }

    public void caseAAggregationNode(AAggregationNode node) {
        Object adapter = adaptersToHandleNodes.get(AAggregationNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAggregationNode(node);
        }
        super.caseAAggregationNode(node); // to continue the tree traversal
    }

    public void inAInterleavedAnykeyword(AInterleavedAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterleavedAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInterleavedAnykeyword(node);
        }
        super.inAInterleavedAnykeyword(node); // to continue the tree traversal
    }

    public void outAInterleavedAnykeyword(AInterleavedAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterleavedAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInterleavedAnykeyword(node);
        }
        super.outAInterleavedAnykeyword(node); // to continue the tree traversal
    }

    public void caseAInterleavedAnykeyword(AInterleavedAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterleavedAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInterleavedAnykeyword(node);
        }
        super.caseAInterleavedAnykeyword(node); // to continue the tree traversal
    }

    public void inAGtCompOp(AGtCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AGtCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGtCompOp(node);
        }
        super.inAGtCompOp(node); // to continue the tree traversal
    }

    public void outAGtCompOp(AGtCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AGtCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGtCompOp(node);
        }
        super.outAGtCompOp(node); // to continue the tree traversal
    }

    public void caseAGtCompOp(AGtCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AGtCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGtCompOp(node);
        }
        super.caseAGtCompOp(node); // to continue the tree traversal
    }

    public void inAMoreperfs(AMoreperfs node) {
        Object adapter = adaptersToHandleNodes.get(AMoreperfs.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMoreperfs(node);
        }
        super.inAMoreperfs(node); // to continue the tree traversal
    }

    public void outAMoreperfs(AMoreperfs node) {
        Object adapter = adaptersToHandleNodes.get(AMoreperfs.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMoreperfs(node);
        }
        super.outAMoreperfs(node); // to continue the tree traversal
    }

    public void caseAMoreperfs(AMoreperfs node) {
        Object adapter = adaptersToHandleNodes.get(AMoreperfs.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMoreperfs(node);
        }
        super.caseAMoreperfs(node); // to continue the tree traversal
    }

    public void inAMoreparamtype(AMoreparamtype node) {
        Object adapter = adaptersToHandleNodes.get(AMoreparamtype.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMoreparamtype(node);
        }
        super.inAMoreparamtype(node); // to continue the tree traversal
    }

    public void outAMoreparamtype(AMoreparamtype node) {
        Object adapter = adaptersToHandleNodes.get(AMoreparamtype.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMoreparamtype(node);
        }
        super.outAMoreparamtype(node); // to continue the tree traversal
    }

    public void caseAMoreparamtype(AMoreparamtype node) {
        Object adapter = adaptersToHandleNodes.get(AMoreparamtype.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMoreparamtype(node);
        }
        super.caseAMoreparamtype(node); // to continue the tree traversal
    }

    public void inAOneParamTermUpdates(AOneParamTermUpdates node) {
        Object adapter = adaptersToHandleNodes.get(AOneParamTermUpdates.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOneParamTermUpdates(node);
        }
        super.inAOneParamTermUpdates(node); // to continue the tree traversal
    }

    public void outAOneParamTermUpdates(AOneParamTermUpdates node) {
        Object adapter = adaptersToHandleNodes.get(AOneParamTermUpdates.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOneParamTermUpdates(node);
        }
        super.outAOneParamTermUpdates(node); // to continue the tree traversal
    }

    public void caseAOneParamTermUpdates(AOneParamTermUpdates node) {
        Object adapter = adaptersToHandleNodes.get(AOneParamTermUpdates.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOneParamTermUpdates(node);
        }
        super.caseAOneParamTermUpdates(node); // to continue the tree traversal
    }

    public void inANamespaceAnykeyword(ANamespaceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANamespaceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANamespaceAnykeyword(node);
        }
        super.inANamespaceAnykeyword(node); // to continue the tree traversal
    }

    public void outANamespaceAnykeyword(ANamespaceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANamespaceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANamespaceAnykeyword(node);
        }
        super.outANamespaceAnykeyword(node); // to continue the tree traversal
    }

    public void caseANamespaceAnykeyword(ANamespaceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANamespaceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANamespaceAnykeyword(node);
        }
        super.caseANamespaceAnykeyword(node); // to continue the tree traversal
    }

    public void inAIfRule(AIfRule node) {
        Object adapter = adaptersToHandleNodes.get(AIfRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIfRule(node);
        }
        super.inAIfRule(node); // to continue the tree traversal
    }

    public void outAIfRule(AIfRule node) {
        Object adapter = adaptersToHandleNodes.get(AIfRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIfRule(node);
        }
        super.outAIfRule(node); // to continue the tree traversal
    }

    public void caseAIfRule(AIfRule node) {
        Object adapter = adaptersToHandleNodes.get(AIfRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIfRule(node);
        }
        super.caseAIfRule(node); // to continue the tree traversal
    }

    public void inASymmetricAnykeyword(ASymmetricAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASymmetricAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASymmetricAnykeyword(node);
        }
        super.inASymmetricAnykeyword(node); // to continue the tree traversal
    }

    public void outASymmetricAnykeyword(ASymmetricAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASymmetricAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASymmetricAnykeyword(node);
        }
        super.outASymmetricAnykeyword(node); // to continue the tree traversal
    }

    public void caseASymmetricAnykeyword(ASymmetricAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASymmetricAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASymmetricAnykeyword(node);
        }
        super.caseASymmetricAnykeyword(node); // to continue the tree traversal
    }

    public void inAMin2perflist(AMin2perflist node) {
        Object adapter = adaptersToHandleNodes.get(AMin2perflist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMin2perflist(node);
        }
        super.inAMin2perflist(node); // to continue the tree traversal
    }

    public void outAMin2perflist(AMin2perflist node) {
        Object adapter = adaptersToHandleNodes.get(AMin2perflist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMin2perflist(node);
        }
        super.outAMin2perflist(node); // to continue the tree traversal
    }

    public void caseAMin2perflist(AMin2perflist node) {
        Object adapter = adaptersToHandleNodes.get(AMin2perflist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMin2perflist(node);
        }
        super.caseAMin2perflist(node); // to continue the tree traversal
    }

    public void inAAttribute(AAttribute node) {
        Object adapter = adaptersToHandleNodes.get(AAttribute.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttribute(node);
        }
        super.inAAttribute(node); // to continue the tree traversal
    }

    public void outAAttribute(AAttribute node) {
        Object adapter = adaptersToHandleNodes.get(AAttribute.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttribute(node);
        }
        super.outAAttribute(node); // to continue the tree traversal
    }

    public void caseAAttribute(AAttribute node) {
        Object adapter = adaptersToHandleNodes.get(AAttribute.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttribute(node);
        }
        super.caseAAttribute(node); // to continue the tree traversal
    }

    public void inASharedModeId(ASharedModeId node) {
        Object adapter = adaptersToHandleNodes.get(ASharedModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASharedModeId(node);
        }
        super.inASharedModeId(node); // to continue the tree traversal
    }

    public void outASharedModeId(ASharedModeId node) {
        Object adapter = adaptersToHandleNodes.get(ASharedModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASharedModeId(node);
        }
        super.outASharedModeId(node); // to continue the tree traversal
    }

    public void caseASharedModeId(ASharedModeId node) {
        Object adapter = adaptersToHandleNodes.get(ASharedModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASharedModeId(node);
        }
        super.caseASharedModeId(node); // to continue the tree traversal
    }

    public void inAAttrFactList(AAttrFactList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrFactList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrFactList(node);
        }
        super.inAAttrFactList(node); // to continue the tree traversal
    }

    public void outAAttrFactList(AAttrFactList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrFactList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrFactList(node);
        }
        super.outAAttrFactList(node); // to continue the tree traversal
    }

    public void caseAAttrFactList(AAttrFactList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrFactList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrFactList(node);
        }
        super.caseAAttrFactList(node); // to continue the tree traversal
    }

    public void inASymmetricAttributefeature(ASymmetricAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(ASymmetricAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASymmetricAttributefeature(node);
        }
        super.inASymmetricAttributefeature(node); // to continue the tree traversal
    }

    public void outASymmetricAttributefeature(ASymmetricAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(ASymmetricAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASymmetricAttributefeature(node);
        }
        super.outASymmetricAttributefeature(node); // to continue the tree traversal
    }

    public void caseASymmetricAttributefeature(ASymmetricAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(ASymmetricAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASymmetricAttributefeature(node);
        }
        super.caseASymmetricAttributefeature(node); // to continue the tree traversal
    }

    public void inAPipedRulePipedRule(APipedRulePipedRule node) {
        Object adapter = adaptersToHandleNodes.get(APipedRulePipedRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPipedRulePipedRule(node);
        }
        super.inAPipedRulePipedRule(node); // to continue the tree traversal
    }

    public void outAPipedRulePipedRule(APipedRulePipedRule node) {
        Object adapter = adaptersToHandleNodes.get(APipedRulePipedRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPipedRulePipedRule(node);
        }
        super.outAPipedRulePipedRule(node); // to continue the tree traversal
    }

    public void caseAPipedRulePipedRule(APipedRulePipedRule node) {
        Object adapter = adaptersToHandleNodes.get(APipedRulePipedRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPipedRulePipedRule(node);
        }
        super.caseAPipedRulePipedRule(node); // to continue the tree traversal
    }

    public void inAExistsAnykeyword(AExistsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AExistsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAExistsAnykeyword(node);
        }
        super.inAExistsAnykeyword(node); // to continue the tree traversal
    }

    public void outAExistsAnykeyword(AExistsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AExistsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAExistsAnykeyword(node);
        }
        super.outAExistsAnykeyword(node); // to continue the tree traversal
    }

    public void caseAExistsAnykeyword(AExistsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AExistsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAExistsAnykeyword(node);
        }
        super.caseAExistsAnykeyword(node); // to continue the tree traversal
    }

    public void inAImportontologyAnykeyword(AImportontologyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImportontologyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImportontologyAnykeyword(node);
        }
        super.inAImportontologyAnykeyword(node); // to continue the tree traversal
    }

    public void outAImportontologyAnykeyword(AImportontologyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImportontologyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImportontologyAnykeyword(node);
        }
        super.outAImportontologyAnykeyword(node); // to continue the tree traversal
    }

    public void caseAImportontologyAnykeyword(AImportontologyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImportontologyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImportontologyAnykeyword(node);
        }
        super.caseAImportontologyAnykeyword(node); // to continue the tree traversal
    }

    public void inARelationOntologyElement(ARelationOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(ARelationOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARelationOntologyElement(node);
        }
        super.inARelationOntologyElement(node); // to continue the tree traversal
    }

    public void outARelationOntologyElement(ARelationOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(ARelationOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARelationOntologyElement(node);
        }
        super.outARelationOntologyElement(node); // to continue the tree traversal
    }

    public void caseARelationOntologyElement(ARelationOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(ARelationOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARelationOntologyElement(node);
        }
        super.caseARelationOntologyElement(node); // to continue the tree traversal
    }

    public void inAActivityDiagram(AActivityDiagram node) {
        Object adapter = adaptersToHandleNodes.get(AActivityDiagram.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAActivityDiagram(node);
        }
        super.inAActivityDiagram(node); // to continue the tree traversal
    }

    public void outAActivityDiagram(AActivityDiagram node) {
        Object adapter = adaptersToHandleNodes.get(AActivityDiagram.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAActivityDiagram(node);
        }
        super.outAActivityDiagram(node); // to continue the tree traversal
    }

    public void caseAActivityDiagram(AActivityDiagram node) {
        Object adapter = adaptersToHandleNodes.get(AActivityDiagram.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAActivityDiagram(node);
        }
        super.caseAActivityDiagram(node); // to continue the tree traversal
    }

    public void inAValuelistValuelist(AValuelistValuelist node) {
        Object adapter = adaptersToHandleNodes.get(AValuelistValuelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAValuelistValuelist(node);
        }
        super.inAValuelistValuelist(node); // to continue the tree traversal
    }

    public void outAValuelistValuelist(AValuelistValuelist node) {
        Object adapter = adaptersToHandleNodes.get(AValuelistValuelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAValuelistValuelist(node);
        }
        super.outAValuelistValuelist(node); // to continue the tree traversal
    }

    public void caseAValuelistValuelist(AValuelistValuelist node) {
        Object adapter = adaptersToHandleNodes.get(AValuelistValuelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAValuelistValuelist(node);
        }
        super.caseAValuelistValuelist(node); // to continue the tree traversal
    }

    public void inAEffectPrePostAssOrEff(AEffectPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(AEffectPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEffectPrePostAssOrEff(node);
        }
        super.inAEffectPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void outAEffectPrePostAssOrEff(AEffectPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(AEffectPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEffectPrePostAssOrEff(node);
        }
        super.outAEffectPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void caseAEffectPrePostAssOrEff(AEffectPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(AEffectPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEffectPrePostAssOrEff(node);
        }
        super.caseAEffectPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void inADisjunction(ADisjunction node) {
        Object adapter = adaptersToHandleNodes.get(ADisjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADisjunction(node);
        }
        super.inADisjunction(node); // to continue the tree traversal
    }

    public void outADisjunction(ADisjunction node) {
        Object adapter = adaptersToHandleNodes.get(ADisjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADisjunction(node);
        }
        super.outADisjunction(node); // to continue the tree traversal
    }

    public void caseADisjunction(ADisjunction node) {
        Object adapter = adaptersToHandleNodes.get(ADisjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADisjunction(node);
        }
        super.caseADisjunction(node); // to continue the tree traversal
    }

    public void inAWebserviceDefinition(AWebserviceDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AWebserviceDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWebserviceDefinition(node);
        }
        super.inAWebserviceDefinition(node); // to continue the tree traversal
    }

    public void outAWebserviceDefinition(AWebserviceDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AWebserviceDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWebserviceDefinition(node);
        }
        super.outAWebserviceDefinition(node); // to continue the tree traversal
    }

    public void caseAWebserviceDefinition(AWebserviceDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AWebserviceDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWebserviceDefinition(node);
        }
        super.caseAWebserviceDefinition(node); // to continue the tree traversal
    }

    public void inAOrchApplyMediationOrchPerformAlt(AOrchApplyMediationOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchApplyMediationOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchApplyMediationOrchPerformAlt(node);
        }
        super.inAOrchApplyMediationOrchPerformAlt(node); // to continue the tree traversal
    }

    public void outAOrchApplyMediationOrchPerformAlt(AOrchApplyMediationOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchApplyMediationOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchApplyMediationOrchPerformAlt(node);
        }
        super.outAOrchApplyMediationOrchPerformAlt(node); // to continue the tree traversal
    }

    public void caseAOrchApplyMediationOrchPerformAlt(AOrchApplyMediationOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchApplyMediationOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchApplyMediationOrchPerformAlt(node);
        }
        super.caseAOrchApplyMediationOrchPerformAlt(node); // to continue the tree traversal
    }

    public void inADecimalNumber(ADecimalNumber node) {
        Object adapter = adaptersToHandleNodes.get(ADecimalNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADecimalNumber(node);
        }
        super.inADecimalNumber(node); // to continue the tree traversal
    }

    public void outADecimalNumber(ADecimalNumber node) {
        Object adapter = adaptersToHandleNodes.get(ADecimalNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADecimalNumber(node);
        }
        super.outADecimalNumber(node); // to continue the tree traversal
    }

    public void caseADecimalNumber(ADecimalNumber node) {
        Object adapter = adaptersToHandleNodes.get(ADecimalNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADecimalNumber(node);
        }
        super.caseADecimalNumber(node); // to continue the tree traversal
    }

    public void inAOrchPerformAchievegoalOrchPerformAlt(AOrchPerformAchievegoalOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformAchievegoalOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchPerformAchievegoalOrchPerformAlt(node);
        }
        super.inAOrchPerformAchievegoalOrchPerformAlt(node); // to continue the tree traversal
    }

    public void outAOrchPerformAchievegoalOrchPerformAlt(AOrchPerformAchievegoalOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformAchievegoalOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchPerformAchievegoalOrchPerformAlt(node);
        }
        super.outAOrchPerformAchievegoalOrchPerformAlt(node); // to continue the tree traversal
    }

    public void caseAOrchPerformAchievegoalOrchPerformAlt(AOrchPerformAchievegoalOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformAchievegoalOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchPerformAchievegoalOrchPerformAlt(node);
        }
        super.caseAOrchPerformAchievegoalOrchPerformAlt(node); // to continue the tree traversal
    }

    public void inAVariableVariablelist(AVariableVariablelist node) {
        Object adapter = adaptersToHandleNodes.get(AVariableVariablelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAVariableVariablelist(node);
        }
        super.inAVariableVariablelist(node); // to continue the tree traversal
    }

    public void outAVariableVariablelist(AVariableVariablelist node) {
        Object adapter = adaptersToHandleNodes.get(AVariableVariablelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAVariableVariablelist(node);
        }
        super.outAVariableVariablelist(node); // to continue the tree traversal
    }

    public void caseAVariableVariablelist(AVariableVariablelist node) {
        Object adapter = adaptersToHandleNodes.get(AVariableVariablelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAVariableVariablelist(node);
        }
        super.caseAVariableVariablelist(node); // to continue the tree traversal
    }

    public void inACashewPerform(ACashewPerform node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerform.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewPerform(node);
        }
        super.inACashewPerform(node); // to continue the tree traversal
    }

    public void outACashewPerform(ACashewPerform node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerform.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewPerform(node);
        }
        super.outACashewPerform(node); // to continue the tree traversal
    }

    public void caseACashewPerform(ACashewPerform node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerform.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewPerform(node);
        }
        super.caseACashewPerform(node); // to continue the tree traversal
    }

    public void inASemisimple1AdditionArithVal(ASemisimple1AdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASemisimple1AdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASemisimple1AdditionArithVal(node);
        }
        super.inASemisimple1AdditionArithVal(node); // to continue the tree traversal
    }

    public void outASemisimple1AdditionArithVal(ASemisimple1AdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASemisimple1AdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASemisimple1AdditionArithVal(node);
        }
        super.outASemisimple1AdditionArithVal(node); // to continue the tree traversal
    }

    public void caseASemisimple1AdditionArithVal(ASemisimple1AdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASemisimple1AdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASemisimple1AdditionArithVal(node);
        }
        super.caseASemisimple1AdditionArithVal(node); // to continue the tree traversal
    }

    public void inAGgmediatorMediator(AGgmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGgmediatorMediator(node);
        }
        super.inAGgmediatorMediator(node); // to continue the tree traversal
    }

    public void outAGgmediatorMediator(AGgmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGgmediatorMediator(node);
        }
        super.outAGgmediatorMediator(node); // to continue the tree traversal
    }

    public void caseAGgmediatorMediator(AGgmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGgmediatorMediator(node);
        }
        super.caseAGgmediatorMediator(node); // to continue the tree traversal
    }

    public void inARelationModeModeEntry(ARelationModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(ARelationModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARelationModeModeEntry(node);
        }
        super.inARelationModeModeEntry(node); // to continue the tree traversal
    }

    public void outARelationModeModeEntry(ARelationModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(ARelationModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARelationModeModeEntry(node);
        }
        super.outARelationModeModeEntry(node); // to continue the tree traversal
    }

    public void caseARelationModeModeEntry(ARelationModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(ARelationModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARelationModeModeEntry(node);
        }
        super.caseARelationModeModeEntry(node); // to continue the tree traversal
    }

    public void inAUsesmediatorHeader(AUsesmediatorHeader node) {
        Object adapter = adaptersToHandleNodes.get(AUsesmediatorHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUsesmediatorHeader(node);
        }
        super.inAUsesmediatorHeader(node); // to continue the tree traversal
    }

    public void outAUsesmediatorHeader(AUsesmediatorHeader node) {
        Object adapter = adaptersToHandleNodes.get(AUsesmediatorHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUsesmediatorHeader(node);
        }
        super.outAUsesmediatorHeader(node); // to continue the tree traversal
    }

    public void caseAUsesmediatorHeader(AUsesmediatorHeader node) {
        Object adapter = adaptersToHandleNodes.get(AUsesmediatorHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUsesmediatorHeader(node);
        }
        super.caseAUsesmediatorHeader(node); // to continue the tree traversal
    }

    public void inAInvokeserviceAnykeyword(AInvokeserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInvokeserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInvokeserviceAnykeyword(node);
        }
        super.inAInvokeserviceAnykeyword(node); // to continue the tree traversal
    }

    public void outAInvokeserviceAnykeyword(AInvokeserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInvokeserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInvokeserviceAnykeyword(node);
        }
        super.outAInvokeserviceAnykeyword(node); // to continue the tree traversal
    }

    public void caseAInvokeserviceAnykeyword(AInvokeserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInvokeserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInvokeserviceAnykeyword(node);
        }
        super.caseAInvokeserviceAnykeyword(node); // to continue the tree traversal
    }

    public void inAPfmediator(APfmediator node) {
        Object adapter = adaptersToHandleNodes.get(APfmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPfmediator(node);
        }
        super.inAPfmediator(node); // to continue the tree traversal
    }

    public void outAPfmediator(APfmediator node) {
        Object adapter = adaptersToHandleNodes.get(APfmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPfmediator(node);
        }
        super.outAPfmediator(node); // to continue the tree traversal
    }

    public void caseAPfmediator(APfmediator node) {
        Object adapter = adaptersToHandleNodes.get(APfmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPfmediator(node);
        }
        super.caseAPfmediator(node); // to continue the tree traversal
    }

    public void inAUsesmediator(AUsesmediator node) {
        Object adapter = adaptersToHandleNodes.get(AUsesmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUsesmediator(node);
        }
        super.inAUsesmediator(node); // to continue the tree traversal
    }

    public void outAUsesmediator(AUsesmediator node) {
        Object adapter = adaptersToHandleNodes.get(AUsesmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUsesmediator(node);
        }
        super.outAUsesmediator(node); // to continue the tree traversal
    }

    public void caseAUsesmediator(AUsesmediator node) {
        Object adapter = adaptersToHandleNodes.get(AUsesmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUsesmediator(node);
        }
        super.caseAUsesmediator(node); // to continue the tree traversal
    }

    public void inARelationinstance(ARelationinstance node) {
        Object adapter = adaptersToHandleNodes.get(ARelationinstance.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARelationinstance(node);
        }
        super.inARelationinstance(node); // to continue the tree traversal
    }

    public void outARelationinstance(ARelationinstance node) {
        Object adapter = adaptersToHandleNodes.get(ARelationinstance.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARelationinstance(node);
        }
        super.outARelationinstance(node); // to continue the tree traversal
    }

    public void caseARelationinstance(ARelationinstance node) {
        Object adapter = adaptersToHandleNodes.get(ARelationinstance.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARelationinstance(node);
        }
        super.caseARelationinstance(node); // to continue the tree traversal
    }

    public void inACapabilityAnykeyword(ACapabilityAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ACapabilityAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACapabilityAnykeyword(node);
        }
        super.inACapabilityAnykeyword(node); // to continue the tree traversal
    }

    public void outACapabilityAnykeyword(ACapabilityAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ACapabilityAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACapabilityAnykeyword(node);
        }
        super.outACapabilityAnykeyword(node); // to continue the tree traversal
    }

    public void caseACapabilityAnykeyword(ACapabilityAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ACapabilityAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACapabilityAnykeyword(node);
        }
        super.caseACapabilityAnykeyword(node); // to continue the tree traversal
    }

    public void inAUnequalCompOp(AUnequalCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AUnequalCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUnequalCompOp(node);
        }
        super.inAUnequalCompOp(node); // to continue the tree traversal
    }

    public void outAUnequalCompOp(AUnequalCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AUnequalCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUnequalCompOp(node);
        }
        super.outAUnequalCompOp(node); // to continue the tree traversal
    }

    public void caseAUnequalCompOp(AUnequalCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AUnequalCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUnequalCompOp(node);
        }
        super.caseAUnequalCompOp(node); // to continue the tree traversal
    }

    public void inAImportsontologyHeader(AImportsontologyHeader node) {
        Object adapter = adaptersToHandleNodes.get(AImportsontologyHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImportsontologyHeader(node);
        }
        super.inAImportsontologyHeader(node); // to continue the tree traversal
    }

    public void outAImportsontologyHeader(AImportsontologyHeader node) {
        Object adapter = adaptersToHandleNodes.get(AImportsontologyHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImportsontologyHeader(node);
        }
        super.outAImportsontologyHeader(node); // to continue the tree traversal
    }

    public void caseAImportsontologyHeader(AImportsontologyHeader node) {
        Object adapter = adaptersToHandleNodes.get(AImportsontologyHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImportsontologyHeader(node);
        }
        super.caseAImportsontologyHeader(node); // to continue the tree traversal
    }

    public void inAChoreography(AChoreography node) {
        Object adapter = adaptersToHandleNodes.get(AChoreography.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAChoreography(node);
        }
        super.inAChoreography(node); // to continue the tree traversal
    }

    public void outAChoreography(AChoreography node) {
        Object adapter = adaptersToHandleNodes.get(AChoreography.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAChoreography(node);
        }
        super.outAChoreography(node); // to continue the tree traversal
    }

    public void caseAChoreography(AChoreography node) {
        Object adapter = adaptersToHandleNodes.get(AChoreography.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAChoreography(node);
        }
        super.caseAChoreography(node); // to continue the tree traversal
    }

    public void inAUniversalTruthId(AUniversalTruthId node) {
        Object adapter = adaptersToHandleNodes.get(AUniversalTruthId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUniversalTruthId(node);
        }
        super.inAUniversalTruthId(node); // to continue the tree traversal
    }

    public void outAUniversalTruthId(AUniversalTruthId node) {
        Object adapter = adaptersToHandleNodes.get(AUniversalTruthId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUniversalTruthId(node);
        }
        super.outAUniversalTruthId(node); // to continue the tree traversal
    }

    public void caseAUniversalTruthId(AUniversalTruthId node) {
        Object adapter = adaptersToHandleNodes.get(AUniversalTruthId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUniversalTruthId(node);
        }
        super.caseAUniversalTruthId(node); // to continue the tree traversal
    }

    public void inAUnlessAnykeyword(AUnlessAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnlessAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUnlessAnykeyword(node);
        }
        super.inAUnlessAnykeyword(node); // to continue the tree traversal
    }

    public void outAUnlessAnykeyword(AUnlessAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnlessAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUnlessAnykeyword(node);
        }
        super.outAUnlessAnykeyword(node); // to continue the tree traversal
    }

    public void caseAUnlessAnykeyword(AUnlessAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnlessAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUnlessAnykeyword(node);
        }
        super.caseAUnlessAnykeyword(node); // to continue the tree traversal
    }

    public void inATransitions(ATransitions node) {
        Object adapter = adaptersToHandleNodes.get(ATransitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATransitions(node);
        }
        super.inATransitions(node); // to continue the tree traversal
    }

    public void outATransitions(ATransitions node) {
        Object adapter = adaptersToHandleNodes.get(ATransitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATransitions(node);
        }
        super.outATransitions(node); // to continue the tree traversal
    }

    public void caseATransitions(ATransitions node) {
        Object adapter = adaptersToHandleNodes.get(ATransitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATransitions(node);
        }
        super.caseATransitions(node); // to continue the tree traversal
    }

    public void inAObjectnodeNode(AObjectnodeNode node) {
        Object adapter = adaptersToHandleNodes.get(AObjectnodeNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAObjectnodeNode(node);
        }
        super.inAObjectnodeNode(node); // to continue the tree traversal
    }

    public void outAObjectnodeNode(AObjectnodeNode node) {
        Object adapter = adaptersToHandleNodes.get(AObjectnodeNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAObjectnodeNode(node);
        }
        super.outAObjectnodeNode(node); // to continue the tree traversal
    }

    public void caseAObjectnodeNode(AObjectnodeNode node) {
        Object adapter = adaptersToHandleNodes.get(AObjectnodeNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAObjectnodeNode(node);
        }
        super.caseAObjectnodeNode(node); // to continue the tree traversal
    }

    public void inAForallRule(AForallRule node) {
        Object adapter = adaptersToHandleNodes.get(AForallRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAForallRule(node);
        }
        super.inAForallRule(node); // to continue the tree traversal
    }

    public void outAForallRule(AForallRule node) {
        Object adapter = adaptersToHandleNodes.get(AForallRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAForallRule(node);
        }
        super.outAForallRule(node); // to continue the tree traversal
    }

    public void caseAForallRule(AForallRule node) {
        Object adapter = adaptersToHandleNodes.get(AForallRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAForallRule(node);
        }
        super.caseAForallRule(node); // to continue the tree traversal
    }

    public void inADeferreduntilAnykeyword(ADeferreduntilAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferreduntilAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADeferreduntilAnykeyword(node);
        }
        super.inADeferreduntilAnykeyword(node); // to continue the tree traversal
    }

    public void outADeferreduntilAnykeyword(ADeferreduntilAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferreduntilAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADeferreduntilAnykeyword(node);
        }
        super.outADeferreduntilAnykeyword(node); // to continue the tree traversal
    }

    public void caseADeferreduntilAnykeyword(ADeferreduntilAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferreduntilAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADeferreduntilAnykeyword(node);
        }
        super.caseADeferreduntilAnykeyword(node); // to continue the tree traversal
    }

    public void inAEquivalentImplyOp(AEquivalentImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AEquivalentImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEquivalentImplyOp(node);
        }
        super.inAEquivalentImplyOp(node); // to continue the tree traversal
    }

    public void outAEquivalentImplyOp(AEquivalentImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AEquivalentImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEquivalentImplyOp(node);
        }
        super.outAEquivalentImplyOp(node); // to continue the tree traversal
    }

    public void caseAEquivalentImplyOp(AEquivalentImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AEquivalentImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEquivalentImplyOp(node);
        }
        super.caseAEquivalentImplyOp(node); // to continue the tree traversal
    }

    public void inAOftypeAnykeyword(AOftypeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOftypeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOftypeAnykeyword(node);
        }
        super.inAOftypeAnykeyword(node); // to continue the tree traversal
    }

    public void outAOftypeAnykeyword(AOftypeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOftypeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOftypeAnykeyword(node);
        }
        super.outAOftypeAnykeyword(node); // to continue the tree traversal
    }

    public void caseAOftypeAnykeyword(AOftypeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOftypeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOftypeAnykeyword(node);
        }
        super.caseAOftypeAnykeyword(node); // to continue the tree traversal
    }

    public void inASubexprConjunction(ASubexprConjunction node) {
        Object adapter = adaptersToHandleNodes.get(ASubexprConjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASubexprConjunction(node);
        }
        super.inASubexprConjunction(node); // to continue the tree traversal
    }

    public void outASubexprConjunction(ASubexprConjunction node) {
        Object adapter = adaptersToHandleNodes.get(ASubexprConjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASubexprConjunction(node);
        }
        super.outASubexprConjunction(node); // to continue the tree traversal
    }

    public void caseASubexprConjunction(ASubexprConjunction node) {
        Object adapter = adaptersToHandleNodes.get(ASubexprConjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASubexprConjunction(node);
        }
        super.caseASubexprConjunction(node); // to continue the tree traversal
    }

    public void inAMulMulOp(AMulMulOp node) {
        Object adapter = adaptersToHandleNodes.get(AMulMulOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMulMulOp(node);
        }
        super.inAMulMulOp(node); // to continue the tree traversal
    }

    public void outAMulMulOp(AMulMulOp node) {
        Object adapter = adaptersToHandleNodes.get(AMulMulOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMulMulOp(node);
        }
        super.outAMulMulOp(node); // to continue the tree traversal
    }

    public void caseAMulMulOp(AMulMulOp node) {
        Object adapter = adaptersToHandleNodes.get(AMulMulOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMulMulOp(node);
        }
        super.caseAMulMulOp(node); // to continue the tree traversal
    }

    public void inAFiniteCardinalityCardinalityNumber(AFiniteCardinalityCardinalityNumber node) {
        Object adapter = adaptersToHandleNodes.get(AFiniteCardinalityCardinalityNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFiniteCardinalityCardinalityNumber(node);
        }
        super.inAFiniteCardinalityCardinalityNumber(node); // to continue the tree traversal
    }

    public void outAFiniteCardinalityCardinalityNumber(AFiniteCardinalityCardinalityNumber node) {
        Object adapter = adaptersToHandleNodes.get(AFiniteCardinalityCardinalityNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFiniteCardinalityCardinalityNumber(node);
        }
        super.outAFiniteCardinalityCardinalityNumber(node); // to continue the tree traversal
    }

    public void caseAFiniteCardinalityCardinalityNumber(AFiniteCardinalityCardinalityNumber node) {
        Object adapter = adaptersToHandleNodes.get(AFiniteCardinalityCardinalityNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFiniteCardinalityCardinalityNumber(node);
        }
        super.caseAFiniteCardinalityCardinalityNumber(node); // to continue the tree traversal
    }

    public void inAControlflowEdge(AControlflowEdge node) {
        Object adapter = adaptersToHandleNodes.get(AControlflowEdge.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAControlflowEdge(node);
        }
        super.inAControlflowEdge(node); // to continue the tree traversal
    }

    public void outAControlflowEdge(AControlflowEdge node) {
        Object adapter = adaptersToHandleNodes.get(AControlflowEdge.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAControlflowEdge(node);
        }
        super.outAControlflowEdge(node); // to continue the tree traversal
    }

    public void caseAControlflowEdge(AControlflowEdge node) {
        Object adapter = adaptersToHandleNodes.get(AControlflowEdge.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAControlflowEdge(node);
        }
        super.caseAControlflowEdge(node); // to continue the tree traversal
    }

    public void inAIntegerNumber(AIntegerNumber node) {
        Object adapter = adaptersToHandleNodes.get(AIntegerNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIntegerNumber(node);
        }
        super.inAIntegerNumber(node); // to continue the tree traversal
    }

    public void outAIntegerNumber(AIntegerNumber node) {
        Object adapter = adaptersToHandleNodes.get(AIntegerNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIntegerNumber(node);
        }
        super.outAIntegerNumber(node); // to continue the tree traversal
    }

    public void caseAIntegerNumber(AIntegerNumber node) {
        Object adapter = adaptersToHandleNodes.get(AIntegerNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIntegerNumber(node);
        }
        super.caseAIntegerNumber(node); // to continue the tree traversal
    }

    public void inAWsml(AWsml node) {
        Object adapter = adaptersToHandleNodes.get(AWsml.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWsml(node);
        }
        super.inAWsml(node); // to continue the tree traversal
    }

    public void outAWsml(AWsml node) {
        Object adapter = adaptersToHandleNodes.get(AWsml.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWsml(node);
        }
        super.outAWsml(node); // to continue the tree traversal
    }

    public void caseAWsml(AWsml node) {
        Object adapter = adaptersToHandleNodes.get(AWsml.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWsml(node);
        }
        super.caseAWsml(node); // to continue the tree traversal
    }

    public void inAUpdateModifier(AUpdateModifier node) {
        Object adapter = adaptersToHandleNodes.get(AUpdateModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUpdateModifier(node);
        }
        super.inAUpdateModifier(node); // to continue the tree traversal
    }

    public void outAUpdateModifier(AUpdateModifier node) {
        Object adapter = adaptersToHandleNodes.get(AUpdateModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUpdateModifier(node);
        }
        super.outAUpdateModifier(node); // to continue the tree traversal
    }

    public void caseAUpdateModifier(AUpdateModifier node) {
        Object adapter = adaptersToHandleNodes.get(AUpdateModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUpdateModifier(node);
        }
        super.caseAUpdateModifier(node); // to continue the tree traversal
    }

    public void inAMultipleSources(AMultipleSources node) {
        Object adapter = adaptersToHandleNodes.get(AMultipleSources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMultipleSources(node);
        }
        super.inAMultipleSources(node); // to continue the tree traversal
    }

    public void outAMultipleSources(AMultipleSources node) {
        Object adapter = adaptersToHandleNodes.get(AMultipleSources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMultipleSources(node);
        }
        super.outAMultipleSources(node); // to continue the tree traversal
    }

    public void caseAMultipleSources(AMultipleSources node) {
        Object adapter = adaptersToHandleNodes.get(AMultipleSources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMultipleSources(node);
        }
        super.caseAMultipleSources(node); // to continue the tree traversal
    }

    public void inARelationAnykeyword(ARelationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARelationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARelationAnykeyword(node);
        }
        super.inARelationAnykeyword(node); // to continue the tree traversal
    }

    public void outARelationAnykeyword(ARelationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARelationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARelationAnykeyword(node);
        }
        super.outARelationAnykeyword(node); // to continue the tree traversal
    }

    public void caseARelationAnykeyword(ARelationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARelationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARelationAnykeyword(node);
        }
        super.caseARelationAnykeyword(node); // to continue the tree traversal
    }

    public void inARelationinstanceOntologyElement(ARelationinstanceOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(ARelationinstanceOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARelationinstanceOntologyElement(node);
        }
        super.inARelationinstanceOntologyElement(node); // to continue the tree traversal
    }

    public void outARelationinstanceOntologyElement(ARelationinstanceOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(ARelationinstanceOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARelationinstanceOntologyElement(node);
        }
        super.outARelationinstanceOntologyElement(node); // to continue the tree traversal
    }

    public void caseARelationinstanceOntologyElement(ARelationinstanceOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(ARelationinstanceOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARelationinstanceOntologyElement(node);
        }
        super.caseARelationinstanceOntologyElement(node); // to continue the tree traversal
    }

    public void inAStartnodeAnykeyword(AStartnodeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AStartnodeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAStartnodeAnykeyword(node);
        }
        super.inAStartnodeAnykeyword(node); // to continue the tree traversal
    }

    public void outAStartnodeAnykeyword(AStartnodeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AStartnodeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAStartnodeAnykeyword(node);
        }
        super.outAStartnodeAnykeyword(node); // to continue the tree traversal
    }

    public void caseAStartnodeAnykeyword(AStartnodeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AStartnodeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAStartnodeAnykeyword(node);
        }
        super.caseAStartnodeAnykeyword(node); // to continue the tree traversal
    }

    public void inAWebserviceAnykeyword(AWebserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWebserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWebserviceAnykeyword(node);
        }
        super.inAWebserviceAnykeyword(node); // to continue the tree traversal
    }

    public void outAWebserviceAnykeyword(AWebserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWebserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWebserviceAnykeyword(node);
        }
        super.outAWebserviceAnykeyword(node); // to continue the tree traversal
    }

    public void caseAWebserviceAnykeyword(AWebserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWebserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWebserviceAnykeyword(node);
        }
        super.caseAWebserviceAnykeyword(node); // to continue the tree traversal
    }

    public void inADeferredchoiceWorkflowPattern(ADeferredchoiceWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredchoiceWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADeferredchoiceWorkflowPattern(node);
        }
        super.inADeferredchoiceWorkflowPattern(node); // to continue the tree traversal
    }

    public void outADeferredchoiceWorkflowPattern(ADeferredchoiceWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredchoiceWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADeferredchoiceWorkflowPattern(node);
        }
        super.outADeferredchoiceWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseADeferredchoiceWorkflowPattern(ADeferredchoiceWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredchoiceWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADeferredchoiceWorkflowPattern(node);
        }
        super.caseADeferredchoiceWorkflowPattern(node); // to continue the tree traversal
    }

    public void inANfpAnykeyword(ANfpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANfpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANfpAnykeyword(node);
        }
        super.inANfpAnykeyword(node); // to continue the tree traversal
    }

    public void outANfpAnykeyword(ANfpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANfpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANfpAnykeyword(node);
        }
        super.outANfpAnykeyword(node); // to continue the tree traversal
    }

    public void caseANfpAnykeyword(ANfpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANfpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANfpAnykeyword(node);
        }
        super.caseANfpAnykeyword(node); // to continue the tree traversal
    }

    public void inAAtomPerformAchievegoalAtomPerformAlt(AAtomPerformAchievegoalAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformAchievegoalAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAtomPerformAchievegoalAtomPerformAlt(node);
        }
        super.inAAtomPerformAchievegoalAtomPerformAlt(node); // to continue the tree traversal
    }

    public void outAAtomPerformAchievegoalAtomPerformAlt(AAtomPerformAchievegoalAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformAchievegoalAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAtomPerformAchievegoalAtomPerformAlt(node);
        }
        super.outAAtomPerformAchievegoalAtomPerformAlt(node); // to continue the tree traversal
    }

    public void caseAAtomPerformAchievegoalAtomPerformAlt(AAtomPerformAchievegoalAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformAchievegoalAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAtomPerformAchievegoalAtomPerformAlt(node);
        }
        super.caseAAtomPerformAchievegoalAtomPerformAlt(node); // to continue the tree traversal
    }

    public void inAOrchPerformOrchestrationRule(AOrchPerformOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchPerformOrchestrationRule(node);
        }
        super.inAOrchPerformOrchestrationRule(node); // to continue the tree traversal
    }

    public void outAOrchPerformOrchestrationRule(AOrchPerformOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchPerformOrchestrationRule(node);
        }
        super.outAOrchPerformOrchestrationRule(node); // to continue the tree traversal
    }

    public void caseAOrchPerformOrchestrationRule(AOrchPerformOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchPerformOrchestrationRule(node);
        }
        super.caseAOrchPerformOrchestrationRule(node); // to continue the tree traversal
    }

    public void inAAdditionArithVal(AAdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(AAdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAdditionArithVal(node);
        }
        super.inAAdditionArithVal(node); // to continue the tree traversal
    }

    public void outAAdditionArithVal(AAdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(AAdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAdditionArithVal(node);
        }
        super.outAAdditionArithVal(node); // to continue the tree traversal
    }

    public void caseAAdditionArithVal(AAdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(AAdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAdditionArithVal(node);
        }
        super.caseAAdditionArithVal(node); // to continue the tree traversal
    }

    public void inASimpleSubexpr(ASimpleSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(ASimpleSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASimpleSubexpr(node);
        }
        super.inASimpleSubexpr(node); // to continue the tree traversal
    }

    public void outASimpleSubexpr(ASimpleSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(ASimpleSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASimpleSubexpr(node);
        }
        super.outASimpleSubexpr(node); // to continue the tree traversal
    }

    public void caseASimpleSubexpr(ASimpleSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(ASimpleSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASimpleSubexpr(node);
        }
        super.caseASimpleSubexpr(node); // to continue the tree traversal
    }

    public void inAArity(AArity node) {
        Object adapter = adaptersToHandleNodes.get(AArity.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAArity(node);
        }
        super.inAArity(node); // to continue the tree traversal
    }

    public void outAArity(AArity node) {
        Object adapter = adaptersToHandleNodes.get(AArity.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAArity(node);
        }
        super.outAArity(node); // to continue the tree traversal
    }

    public void caseAArity(AArity node) {
        Object adapter = adaptersToHandleNodes.get(AArity.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAArity(node);
        }
        super.caseAArity(node); // to continue the tree traversal
    }

    public void inAOrchPerformReceiveOrchPerformAlt(AOrchPerformReceiveOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformReceiveOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchPerformReceiveOrchPerformAlt(node);
        }
        super.inAOrchPerformReceiveOrchPerformAlt(node); // to continue the tree traversal
    }

    public void outAOrchPerformReceiveOrchPerformAlt(AOrchPerformReceiveOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformReceiveOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchPerformReceiveOrchPerformAlt(node);
        }
        super.outAOrchPerformReceiveOrchPerformAlt(node); // to continue the tree traversal
    }

    public void caseAOrchPerformReceiveOrchPerformAlt(AOrchPerformReceiveOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformReceiveOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchPerformReceiveOrchPerformAlt(node);
        }
        super.caseAOrchPerformReceiveOrchPerformAlt(node); // to continue the tree traversal
    }

    public void inAConstraintLogExpr(AConstraintLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(AConstraintLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConstraintLogExpr(node);
        }
        super.inAConstraintLogExpr(node); // to continue the tree traversal
    }

    public void outAConstraintLogExpr(AConstraintLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(AConstraintLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConstraintLogExpr(node);
        }
        super.outAConstraintLogExpr(node); // to continue the tree traversal
    }

    public void caseAConstraintLogExpr(AConstraintLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(AConstraintLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConstraintLogExpr(node);
        }
        super.caseAConstraintLogExpr(node); // to continue the tree traversal
    }

    public void inAMinterfaces(AMinterfaces node) {
        Object adapter = adaptersToHandleNodes.get(AMinterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMinterfaces(node);
        }
        super.inAMinterfaces(node); // to continue the tree traversal
    }

    public void outAMinterfaces(AMinterfaces node) {
        Object adapter = adaptersToHandleNodes.get(AMinterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMinterfaces(node);
        }
        super.outAMinterfaces(node); // to continue the tree traversal
    }

    public void caseAMinterfaces(AMinterfaces node) {
        Object adapter = adaptersToHandleNodes.get(AMinterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMinterfaces(node);
        }
        super.caseAMinterfaces(node); // to continue the tree traversal
    }

    public void inASequentialAnykeyword(ASequentialAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASequentialAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASequentialAnykeyword(node);
        }
        super.inASequentialAnykeyword(node); // to continue the tree traversal
    }

    public void outASequentialAnykeyword(ASequentialAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASequentialAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASequentialAnykeyword(node);
        }
        super.outASequentialAnykeyword(node); // to continue the tree traversal
    }

    public void caseASequentialAnykeyword(ASequentialAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASequentialAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASequentialAnykeyword(node);
        }
        super.caseASequentialAnykeyword(node); // to continue the tree traversal
    }

    public void inAUntilWorkflowPattern(AUntilWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AUntilWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUntilWorkflowPattern(node);
        }
        super.inAUntilWorkflowPattern(node); // to continue the tree traversal
    }

    public void outAUntilWorkflowPattern(AUntilWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AUntilWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUntilWorkflowPattern(node);
        }
        super.outAUntilWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseAUntilWorkflowPattern(AUntilWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AUntilWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUntilWorkflowPattern(node);
        }
        super.caseAUntilWorkflowPattern(node); // to continue the tree traversal
    }

    public void inASendeventactionAnykeyword(ASendeventactionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASendeventactionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASendeventactionAnykeyword(node);
        }
        super.inASendeventactionAnykeyword(node); // to continue the tree traversal
    }

    public void outASendeventactionAnykeyword(ASendeventactionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASendeventactionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASendeventactionAnykeyword(node);
        }
        super.outASendeventactionAnykeyword(node); // to continue the tree traversal
    }

    public void caseASendeventactionAnykeyword(ASendeventactionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASendeventactionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASendeventactionAnykeyword(node);
        }
        super.caseASendeventactionAnykeyword(node); // to continue the tree traversal
    }

    public void inAFlowfinalNode(AFlowfinalNode node) {
        Object adapter = adaptersToHandleNodes.get(AFlowfinalNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFlowfinalNode(node);
        }
        super.inAFlowfinalNode(node); // to continue the tree traversal
    }

    public void outAFlowfinalNode(AFlowfinalNode node) {
        Object adapter = adaptersToHandleNodes.get(AFlowfinalNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFlowfinalNode(node);
        }
        super.outAFlowfinalNode(node); // to continue the tree traversal
    }

    public void caseAFlowfinalNode(AFlowfinalNode node) {
        Object adapter = adaptersToHandleNodes.get(AFlowfinalNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFlowfinalNode(node);
        }
        super.caseAFlowfinalNode(node); // to continue the tree traversal
    }

    public void inAMultipleInterfaces(AMultipleInterfaces node) {
        Object adapter = adaptersToHandleNodes.get(AMultipleInterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMultipleInterfaces(node);
        }
        super.inAMultipleInterfaces(node); // to continue the tree traversal
    }

    public void outAMultipleInterfaces(AMultipleInterfaces node) {
        Object adapter = adaptersToHandleNodes.get(AMultipleInterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMultipleInterfaces(node);
        }
        super.outAMultipleInterfaces(node); // to continue the tree traversal
    }

    public void caseAMultipleInterfaces(AMultipleInterfaces node) {
        Object adapter = adaptersToHandleNodes.get(AMultipleInterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMultipleInterfaces(node);
        }
        super.caseAMultipleInterfaces(node); // to continue the tree traversal
    }

    public void inATermlist(ATermlist node) {
        Object adapter = adaptersToHandleNodes.get(ATermlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATermlist(node);
        }
        super.inATermlist(node); // to continue the tree traversal
    }

    public void outATermlist(ATermlist node) {
        Object adapter = adaptersToHandleNodes.get(ATermlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATermlist(node);
        }
        super.outATermlist(node); // to continue the tree traversal
    }

    public void caseATermlist(ATermlist node) {
        Object adapter = adaptersToHandleNodes.get(ATermlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATermlist(node);
        }
        super.caseATermlist(node); // to continue the tree traversal
    }

    public void inAModeEntryModeEntryList(AModeEntryModeEntryList node) {
        Object adapter = adaptersToHandleNodes.get(AModeEntryModeEntryList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAModeEntryModeEntryList(node);
        }
        super.inAModeEntryModeEntryList(node); // to continue the tree traversal
    }

    public void outAModeEntryModeEntryList(AModeEntryModeEntryList node) {
        Object adapter = adaptersToHandleNodes.get(AModeEntryModeEntryList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAModeEntryModeEntryList(node);
        }
        super.outAModeEntryModeEntryList(node); // to continue the tree traversal
    }

    public void caseAModeEntryModeEntryList(AModeEntryModeEntryList node) {
        Object adapter = adaptersToHandleNodes.get(AModeEntryModeEntryList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAModeEntryModeEntryList(node);
        }
        super.caseAModeEntryModeEntryList(node); // to continue the tree traversal
    }

    public void inAParamtyping(AParamtyping node) {
        Object adapter = adaptersToHandleNodes.get(AParamtyping.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAParamtyping(node);
        }
        super.inAParamtyping(node); // to continue the tree traversal
    }

    public void outAParamtyping(AParamtyping node) {
        Object adapter = adaptersToHandleNodes.get(AParamtyping.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAParamtyping(node);
        }
        super.outAParamtyping(node); // to continue the tree traversal
    }

    public void caseAParamtyping(AParamtyping node) {
        Object adapter = adaptersToHandleNodes.get(AParamtyping.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAParamtyping(node);
        }
        super.caseAParamtyping(node); // to continue the tree traversal
    }

    public void inASourceAnykeyword(ASourceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASourceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASourceAnykeyword(node);
        }
        super.inASourceAnykeyword(node); // to continue the tree traversal
    }

    public void outASourceAnykeyword(ASourceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASourceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASourceAnykeyword(node);
        }
        super.outASourceAnykeyword(node); // to continue the tree traversal
    }

    public void caseASourceAnykeyword(ASourceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASourceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASourceAnykeyword(node);
        }
        super.caseASourceAnykeyword(node); // to continue the tree traversal
    }

    public void inAPpmediatorMediator(APpmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(APpmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPpmediatorMediator(node);
        }
        super.inAPpmediatorMediator(node); // to continue the tree traversal
    }

    public void outAPpmediatorMediator(APpmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(APpmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPpmediatorMediator(node);
        }
        super.outAPpmediatorMediator(node); // to continue the tree traversal
    }

    public void caseAPpmediatorMediator(APpmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(APpmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPpmediatorMediator(node);
        }
        super.caseAPpmediatorMediator(node); // to continue the tree traversal
    }

    public void inAModeEntryListModeEntryList(AModeEntryListModeEntryList node) {
        Object adapter = adaptersToHandleNodes.get(AModeEntryListModeEntryList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAModeEntryListModeEntryList(node);
        }
        super.inAModeEntryListModeEntryList(node); // to continue the tree traversal
    }

    public void outAModeEntryListModeEntryList(AModeEntryListModeEntryList node) {
        Object adapter = adaptersToHandleNodes.get(AModeEntryListModeEntryList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAModeEntryListModeEntryList(node);
        }
        super.outAModeEntryListModeEntryList(node); // to continue the tree traversal
    }

    public void caseAModeEntryListModeEntryList(AModeEntryListModeEntryList node) {
        Object adapter = adaptersToHandleNodes.get(AModeEntryListModeEntryList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAModeEntryListModeEntryList(node);
        }
        super.caseAModeEntryListModeEntryList(node); // to continue the tree traversal
    }

    public void inAMorevalues(AMorevalues node) {
        Object adapter = adaptersToHandleNodes.get(AMorevalues.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMorevalues(node);
        }
        super.inAMorevalues(node); // to continue the tree traversal
    }

    public void outAMorevalues(AMorevalues node) {
        Object adapter = adaptersToHandleNodes.get(AMorevalues.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMorevalues(node);
        }
        super.outAMorevalues(node); // to continue the tree traversal
    }

    public void caseAMorevalues(AMorevalues node) {
        Object adapter = adaptersToHandleNodes.get(AMorevalues.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMorevalues(node);
        }
        super.caseAMorevalues(node); // to continue the tree traversal
    }

    public void inAStartnode(AStartnode node) {
        Object adapter = adaptersToHandleNodes.get(AStartnode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAStartnode(node);
        }
        super.inAStartnode(node); // to continue the tree traversal
    }

    public void outAStartnode(AStartnode node) {
        Object adapter = adaptersToHandleNodes.get(AStartnode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAStartnode(node);
        }
        super.outAStartnode(node); // to continue the tree traversal
    }

    public void caseAStartnode(AStartnode node) {
        Object adapter = adaptersToHandleNodes.get(AStartnode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAStartnode(node);
        }
        super.caseAStartnode(node); // to continue the tree traversal
    }

    public void inAImpliedbyImplyOp(AImpliedbyImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedbyImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImpliedbyImplyOp(node);
        }
        super.inAImpliedbyImplyOp(node); // to continue the tree traversal
    }

    public void outAImpliedbyImplyOp(AImpliedbyImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedbyImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImpliedbyImplyOp(node);
        }
        super.outAImpliedbyImplyOp(node); // to continue the tree traversal
    }

    public void caseAImpliedbyImplyOp(AImpliedbyImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedbyImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImpliedbyImplyOp(node);
        }
        super.caseAImpliedbyImplyOp(node); // to continue the tree traversal
    }

    public void inAOutputpinPin(AOutputpinPin node) {
        Object adapter = adaptersToHandleNodes.get(AOutputpinPin.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOutputpinPin(node);
        }
        super.inAOutputpinPin(node); // to continue the tree traversal
    }

    public void outAOutputpinPin(AOutputpinPin node) {
        Object adapter = adaptersToHandleNodes.get(AOutputpinPin.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOutputpinPin(node);
        }
        super.outAOutputpinPin(node); // to continue the tree traversal
    }

    public void caseAOutputpinPin(AOutputpinPin node) {
        Object adapter = adaptersToHandleNodes.get(AOutputpinPin.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOutputpinPin(node);
        }
        super.caseAOutputpinPin(node); // to continue the tree traversal
    }

    public void inAInterface(AInterface node) {
        Object adapter = adaptersToHandleNodes.get(AInterface.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInterface(node);
        }
        super.inAInterface(node); // to continue the tree traversal
    }

    public void outAInterface(AInterface node) {
        Object adapter = adaptersToHandleNodes.get(AInterface.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInterface(node);
        }
        super.outAInterface(node); // to continue the tree traversal
    }

    public void caseAInterface(AInterface node) {
        Object adapter = adaptersToHandleNodes.get(AInterface.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInterface(node);
        }
        super.caseAInterface(node); // to continue the tree traversal
    }

    public void inAStringValue(AStringValue node) {
        Object adapter = adaptersToHandleNodes.get(AStringValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAStringValue(node);
        }
        super.inAStringValue(node); // to continue the tree traversal
    }

    public void outAStringValue(AStringValue node) {
        Object adapter = adaptersToHandleNodes.get(AStringValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAStringValue(node);
        }
        super.outAStringValue(node); // to continue the tree traversal
    }

    public void caseAStringValue(AStringValue node) {
        Object adapter = adaptersToHandleNodes.get(AStringValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAStringValue(node);
        }
        super.caseAStringValue(node); // to continue the tree traversal
    }

    public void inAIriIrilist(AIriIrilist node) {
        Object adapter = adaptersToHandleNodes.get(AIriIrilist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIriIrilist(node);
        }
        super.inAIriIrilist(node); // to continue the tree traversal
    }

    public void outAIriIrilist(AIriIrilist node) {
        Object adapter = adaptersToHandleNodes.get(AIriIrilist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIriIrilist(node);
        }
        super.outAIriIrilist(node); // to continue the tree traversal
    }

    public void caseAIriIrilist(AIriIrilist node) {
        Object adapter = adaptersToHandleNodes.get(AIriIrilist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIriIrilist(node);
        }
        super.caseAIriIrilist(node); // to continue the tree traversal
    }

    public void inASendeventactionNode(ASendeventactionNode node) {
        Object adapter = adaptersToHandleNodes.get(ASendeventactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASendeventactionNode(node);
        }
        super.inASendeventactionNode(node); // to continue the tree traversal
    }

    public void outASendeventactionNode(ASendeventactionNode node) {
        Object adapter = adaptersToHandleNodes.get(ASendeventactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASendeventactionNode(node);
        }
        super.outASendeventactionNode(node); // to continue the tree traversal
    }

    public void caseASendeventactionNode(ASendeventactionNode node) {
        Object adapter = adaptersToHandleNodes.get(ASendeventactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASendeventactionNode(node);
        }
        super.caseASendeventactionNode(node); // to continue the tree traversal
    }

    public void inADeferredwhileAnykeyword(ADeferredwhileAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredwhileAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADeferredwhileAnykeyword(node);
        }
        super.inADeferredwhileAnykeyword(node); // to continue the tree traversal
    }

    public void outADeferredwhileAnykeyword(ADeferredwhileAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredwhileAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADeferredwhileAnykeyword(node);
        }
        super.outADeferredwhileAnykeyword(node); // to continue the tree traversal
    }

    public void caseADeferredwhileAnykeyword(ADeferredwhileAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredwhileAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADeferredwhileAnykeyword(node);
        }
        super.caseADeferredwhileAnykeyword(node); // to continue the tree traversal
    }

    public void inAStrongEqualCompOp(AStrongEqualCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AStrongEqualCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAStrongEqualCompOp(node);
        }
        super.inAStrongEqualCompOp(node); // to continue the tree traversal
    }

    public void outAStrongEqualCompOp(AStrongEqualCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AStrongEqualCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAStrongEqualCompOp(node);
        }
        super.outAStrongEqualCompOp(node); // to continue the tree traversal
    }

    public void caseAStrongEqualCompOp(AStrongEqualCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AStrongEqualCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAStrongEqualCompOp(node);
        }
        super.caseAStrongEqualCompOp(node); // to continue the tree traversal
    }

    public void inANfpAxiomAxiomdefinition(ANfpAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ANfpAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANfpAxiomAxiomdefinition(node);
        }
        super.inANfpAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void outANfpAxiomAxiomdefinition(ANfpAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ANfpAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANfpAxiomAxiomdefinition(node);
        }
        super.outANfpAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void caseANfpAxiomAxiomdefinition(ANfpAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ANfpAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANfpAxiomAxiomdefinition(node);
        }
        super.caseANfpAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void inADecisionAnykeyword(ADecisionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADecisionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADecisionAnykeyword(node);
        }
        super.inADecisionAnykeyword(node); // to continue the tree traversal
    }

    public void outADecisionAnykeyword(ADecisionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADecisionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADecisionAnykeyword(node);
        }
        super.outADecisionAnykeyword(node); // to continue the tree traversal
    }

    public void caseADecisionAnykeyword(ADecisionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADecisionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADecisionAnykeyword(node);
        }
        super.caseADecisionAnykeyword(node); // to continue the tree traversal
    }

    public void inAPerformAnykeyword(APerformAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APerformAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPerformAnykeyword(node);
        }
        super.inAPerformAnykeyword(node); // to continue the tree traversal
    }

    public void outAPerformAnykeyword(APerformAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APerformAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPerformAnykeyword(node);
        }
        super.outAPerformAnykeyword(node); // to continue the tree traversal
    }

    public void caseAPerformAnykeyword(APerformAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APerformAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPerformAnykeyword(node);
        }
        super.caseAPerformAnykeyword(node); // to continue the tree traversal
    }

    public void inAIf(AIf node) {
        Object adapter = adaptersToHandleNodes.get(AIf.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIf(node);
        }
        super.inAIf(node); // to continue the tree traversal
    }

    public void outAIf(AIf node) {
        Object adapter = adaptersToHandleNodes.get(AIf.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIf(node);
        }
        super.outAIf(node); // to continue the tree traversal
    }

    public void caseAIf(AIf node) {
        Object adapter = adaptersToHandleNodes.get(AIf.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIf(node);
        }
        super.caseAIf(node); // to continue the tree traversal
    }

    public void inAConcurrentWorkflowPattern(AConcurrentWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AConcurrentWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConcurrentWorkflowPattern(node);
        }
        super.inAConcurrentWorkflowPattern(node); // to continue the tree traversal
    }

    public void outAConcurrentWorkflowPattern(AConcurrentWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AConcurrentWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConcurrentWorkflowPattern(node);
        }
        super.outAConcurrentWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseAConcurrentWorkflowPattern(AConcurrentWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AConcurrentWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConcurrentWorkflowPattern(node);
        }
        super.caseAConcurrentWorkflowPattern(node); // to continue the tree traversal
    }

    public void inAFlowstartNode(AFlowstartNode node) {
        Object adapter = adaptersToHandleNodes.get(AFlowstartNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFlowstartNode(node);
        }
        super.inAFlowstartNode(node); // to continue the tree traversal
    }

    public void outAFlowstartNode(AFlowstartNode node) {
        Object adapter = adaptersToHandleNodes.get(AFlowstartNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFlowstartNode(node);
        }
        super.outAFlowstartNode(node); // to continue the tree traversal
    }

    public void caseAFlowstartNode(AFlowstartNode node) {
        Object adapter = adaptersToHandleNodes.get(AFlowstartNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFlowstartNode(node);
        }
        super.caseAFlowstartNode(node); // to continue the tree traversal
    }

    public void inASharedvariableAnykeyword(ASharedvariableAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASharedvariableAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASharedvariableAnykeyword(node);
        }
        super.inASharedvariableAnykeyword(node); // to continue the tree traversal
    }

    public void outASharedvariableAnykeyword(ASharedvariableAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASharedvariableAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASharedvariableAnykeyword(node);
        }
        super.outASharedvariableAnykeyword(node); // to continue the tree traversal
    }

    public void caseASharedvariableAnykeyword(ASharedvariableAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASharedvariableAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASharedvariableAnykeyword(node);
        }
        super.caseASharedvariableAnykeyword(node); // to continue the tree traversal
    }

    public void inAUsemediatorAnykeyword(AUsemediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUsemediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUsemediatorAnykeyword(node);
        }
        super.inAUsemediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAUsemediatorAnykeyword(AUsemediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUsemediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUsemediatorAnykeyword(node);
        }
        super.outAUsemediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAUsemediatorAnykeyword(AUsemediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUsemediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUsemediatorAnykeyword(node);
        }
        super.caseAUsemediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inALtCompOp(ALtCompOp node) {
        Object adapter = adaptersToHandleNodes.get(ALtCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inALtCompOp(node);
        }
        super.inALtCompOp(node); // to continue the tree traversal
    }

    public void outALtCompOp(ALtCompOp node) {
        Object adapter = adaptersToHandleNodes.get(ALtCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outALtCompOp(node);
        }
        super.outALtCompOp(node); // to continue the tree traversal
    }

    public void caseALtCompOp(ALtCompOp node) {
        Object adapter = adaptersToHandleNodes.get(ALtCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseALtCompOp(node);
        }
        super.caseALtCompOp(node); // to continue the tree traversal
    }

    public void inAWebservice(AWebservice node) {
        Object adapter = adaptersToHandleNodes.get(AWebservice.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWebservice(node);
        }
        super.inAWebservice(node); // to continue the tree traversal
    }

    public void outAWebservice(AWebservice node) {
        Object adapter = adaptersToHandleNodes.get(AWebservice.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWebservice(node);
        }
        super.outAWebservice(node); // to continue the tree traversal
    }

    public void caseAWebservice(AWebservice node) {
        Object adapter = adaptersToHandleNodes.get(AWebservice.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWebservice(node);
        }
        super.caseAWebservice(node); // to continue the tree traversal
    }

    public void inAOtherExpressionLogExpr(AOtherExpressionLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(AOtherExpressionLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOtherExpressionLogExpr(node);
        }
        super.inAOtherExpressionLogExpr(node); // to continue the tree traversal
    }

    public void outAOtherExpressionLogExpr(AOtherExpressionLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(AOtherExpressionLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOtherExpressionLogExpr(node);
        }
        super.outAOtherExpressionLogExpr(node); // to continue the tree traversal
    }

    public void caseAOtherExpressionLogExpr(AOtherExpressionLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(AOtherExpressionLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOtherExpressionLogExpr(node);
        }
        super.caseAOtherExpressionLogExpr(node); // to continue the tree traversal
    }

    public void inAOrchAsmOrchestrationFormalism(AOrchAsmOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchAsmOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchAsmOrchestrationFormalism(node);
        }
        super.inAOrchAsmOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void outAOrchAsmOrchestrationFormalism(AOrchAsmOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchAsmOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchAsmOrchestrationFormalism(node);
        }
        super.outAOrchAsmOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void caseAOrchAsmOrchestrationFormalism(AOrchAsmOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchAsmOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchAsmOrchestrationFormalism(node);
        }
        super.caseAOrchAsmOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void inAMoveTermUpdate(AMoveTermUpdate node) {
        Object adapter = adaptersToHandleNodes.get(AMoveTermUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMoveTermUpdate(node);
        }
        super.inAMoveTermUpdate(node); // to continue the tree traversal
    }

    public void outAMoveTermUpdate(AMoveTermUpdate node) {
        Object adapter = adaptersToHandleNodes.get(AMoveTermUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMoveTermUpdate(node);
        }
        super.outAMoveTermUpdate(node); // to continue the tree traversal
    }

    public void caseAMoveTermUpdate(AMoveTermUpdate node) {
        Object adapter = adaptersToHandleNodes.get(AMoveTermUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMoveTermUpdate(node);
        }
        super.caseAMoveTermUpdate(node); // to continue the tree traversal
    }

    public void inADataflowMediators(ADataflowMediators node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowMediators.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADataflowMediators(node);
        }
        super.inADataflowMediators(node); // to continue the tree traversal
    }

    public void outADataflowMediators(ADataflowMediators node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowMediators.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADataflowMediators(node);
        }
        super.outADataflowMediators(node); // to continue the tree traversal
    }

    public void caseADataflowMediators(ADataflowMediators node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowMediators.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADataflowMediators(node);
        }
        super.caseADataflowMediators(node); // to continue the tree traversal
    }

    public void inAConceptOntologyElement(AConceptOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AConceptOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConceptOntologyElement(node);
        }
        super.inAConceptOntologyElement(node); // to continue the tree traversal
    }

    public void outAConceptOntologyElement(AConceptOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AConceptOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConceptOntologyElement(node);
        }
        super.outAConceptOntologyElement(node); // to continue the tree traversal
    }

    public void caseAConceptOntologyElement(AConceptOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AConceptOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConceptOntologyElement(node);
        }
        super.caseAConceptOntologyElement(node); // to continue the tree traversal
    }

    public void inAAxiomAnykeyword(AAxiomAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAxiomAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAxiomAnykeyword(node);
        }
        super.inAAxiomAnykeyword(node); // to continue the tree traversal
    }

    public void outAAxiomAnykeyword(AAxiomAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAxiomAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAxiomAnykeyword(node);
        }
        super.outAAxiomAnykeyword(node); // to continue the tree traversal
    }

    public void caseAAxiomAnykeyword(AAxiomAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAxiomAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAxiomAnykeyword(node);
        }
        super.caseAAxiomAnykeyword(node); // to continue the tree traversal
    }

    public void inAOrchUpdatesOrchestrationRule(AOrchUpdatesOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchUpdatesOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchUpdatesOrchestrationRule(node);
        }
        super.inAOrchUpdatesOrchestrationRule(node); // to continue the tree traversal
    }

    public void outAOrchUpdatesOrchestrationRule(AOrchUpdatesOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchUpdatesOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchUpdatesOrchestrationRule(node);
        }
        super.outAOrchUpdatesOrchestrationRule(node); // to continue the tree traversal
    }

    public void caseAOrchUpdatesOrchestrationRule(AOrchUpdatesOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchUpdatesOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchUpdatesOrchestrationRule(node);
        }
        super.caseAOrchUpdatesOrchestrationRule(node); // to continue the tree traversal
    }

    public void inAAttrRelationAttrRelList(AAttrRelationAttrRelList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelationAttrRelList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrRelationAttrRelList(node);
        }
        super.inAAttrRelationAttrRelList(node); // to continue the tree traversal
    }

    public void outAAttrRelationAttrRelList(AAttrRelationAttrRelList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelationAttrRelList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrRelationAttrRelList(node);
        }
        super.outAAttrRelationAttrRelList(node); // to continue the tree traversal
    }

    public void caseAAttrRelationAttrRelList(AAttrRelationAttrRelList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelationAttrRelList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrRelationAttrRelList(node);
        }
        super.caseAAttrRelationAttrRelList(node); // to continue the tree traversal
    }

    public void inAUniversalFalsehoodId(AUniversalFalsehoodId node) {
        Object adapter = adaptersToHandleNodes.get(AUniversalFalsehoodId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUniversalFalsehoodId(node);
        }
        super.inAUniversalFalsehoodId(node); // to continue the tree traversal
    }

    public void outAUniversalFalsehoodId(AUniversalFalsehoodId node) {
        Object adapter = adaptersToHandleNodes.get(AUniversalFalsehoodId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUniversalFalsehoodId(node);
        }
        super.outAUniversalFalsehoodId(node); // to continue the tree traversal
    }

    public void caseAUniversalFalsehoodId(AUniversalFalsehoodId node) {
        Object adapter = adaptersToHandleNodes.get(AUniversalFalsehoodId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUniversalFalsehoodId(node);
        }
        super.caseAUniversalFalsehoodId(node); // to continue the tree traversal
    }

    public void inAAttrValAttrRelation(AAttrValAttrRelation node) {
        Object adapter = adaptersToHandleNodes.get(AAttrValAttrRelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrValAttrRelation(node);
        }
        super.inAAttrValAttrRelation(node); // to continue the tree traversal
    }

    public void outAAttrValAttrRelation(AAttrValAttrRelation node) {
        Object adapter = adaptersToHandleNodes.get(AAttrValAttrRelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrValAttrRelation(node);
        }
        super.outAAttrValAttrRelation(node); // to continue the tree traversal
    }

    public void caseAAttrValAttrRelation(AAttrValAttrRelation node) {
        Object adapter = adaptersToHandleNodes.get(AAttrValAttrRelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrValAttrRelation(node);
        }
        super.caseAAttrValAttrRelation(node); // to continue the tree traversal
    }

    public void inARepeatAnykeyword(ARepeatAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARepeatAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARepeatAnykeyword(node);
        }
        super.inARepeatAnykeyword(node); // to continue the tree traversal
    }

    public void outARepeatAnykeyword(ARepeatAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARepeatAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARepeatAnykeyword(node);
        }
        super.outARepeatAnykeyword(node); // to continue the tree traversal
    }

    public void caseARepeatAnykeyword(ARepeatAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARepeatAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARepeatAnykeyword(node);
        }
        super.caseARepeatAnykeyword(node); // to continue the tree traversal
    }

    public void inATransitiveAnykeyword(ATransitiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ATransitiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATransitiveAnykeyword(node);
        }
        super.inATransitiveAnykeyword(node); // to continue the tree traversal
    }

    public void outATransitiveAnykeyword(ATransitiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ATransitiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATransitiveAnykeyword(node);
        }
        super.outATransitiveAnykeyword(node); // to continue the tree traversal
    }

    public void caseATransitiveAnykeyword(ATransitiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ATransitiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATransitiveAnykeyword(node);
        }
        super.caseATransitiveAnykeyword(node); // to continue the tree traversal
    }

    public void inADivMulOp(ADivMulOp node) {
        Object adapter = adaptersToHandleNodes.get(ADivMulOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADivMulOp(node);
        }
        super.inADivMulOp(node); // to continue the tree traversal
    }

    public void outADivMulOp(ADivMulOp node) {
        Object adapter = adaptersToHandleNodes.get(ADivMulOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADivMulOp(node);
        }
        super.outADivMulOp(node); // to continue the tree traversal
    }

    public void caseADivMulOp(ADivMulOp node) {
        Object adapter = adaptersToHandleNodes.get(ADivMulOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADivMulOp(node);
        }
        super.caseADivMulOp(node); // to continue the tree traversal
    }

    public void inALpRuleLogExpr(ALpRuleLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(ALpRuleLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inALpRuleLogExpr(node);
        }
        super.inALpRuleLogExpr(node); // to continue the tree traversal
    }

    public void outALpRuleLogExpr(ALpRuleLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(ALpRuleLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outALpRuleLogExpr(node);
        }
        super.outALpRuleLogExpr(node); // to continue the tree traversal
    }

    public void caseALpRuleLogExpr(ALpRuleLogExpr node) {
        Object adapter = adaptersToHandleNodes.get(ALpRuleLogExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseALpRuleLogExpr(node);
        }
        super.caseALpRuleLogExpr(node); // to continue the tree traversal
    }

    public void inAPpmediator(APpmediator node) {
        Object adapter = adaptersToHandleNodes.get(APpmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPpmediator(node);
        }
        super.inAPpmediator(node); // to continue the tree traversal
    }

    public void outAPpmediator(APpmediator node) {
        Object adapter = adaptersToHandleNodes.get(APpmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPpmediator(node);
        }
        super.outAPpmediator(node); // to continue the tree traversal
    }

    public void caseAPpmediator(APpmediator node) {
        Object adapter = adaptersToHandleNodes.get(APpmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPpmediator(node);
        }
        super.caseAPpmediator(node); // to continue the tree traversal
    }

    public void inADeferredwhileWorkflowPattern(ADeferredwhileWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredwhileWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADeferredwhileWorkflowPattern(node);
        }
        super.inADeferredwhileWorkflowPattern(node); // to continue the tree traversal
    }

    public void outADeferredwhileWorkflowPattern(ADeferredwhileWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredwhileWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADeferredwhileWorkflowPattern(node);
        }
        super.outADeferredwhileWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseADeferredwhileWorkflowPattern(ADeferredwhileWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredwhileWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADeferredwhileWorkflowPattern(node);
        }
        super.caseADeferredwhileWorkflowPattern(node); // to continue the tree traversal
    }

    public void inAUnivfalseAnykeyword(AUnivfalseAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnivfalseAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUnivfalseAnykeyword(node);
        }
        super.inAUnivfalseAnykeyword(node); // to continue the tree traversal
    }

    public void outAUnivfalseAnykeyword(AUnivfalseAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnivfalseAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUnivfalseAnykeyword(node);
        }
        super.outAUnivfalseAnykeyword(node); // to continue the tree traversal
    }

    public void caseAUnivfalseAnykeyword(AUnivfalseAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnivfalseAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUnivfalseAnykeyword(node);
        }
        super.caseAUnivfalseAnykeyword(node); // to continue the tree traversal
    }

    public void inASimpleAdditionArithVal(ASimpleAdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASimpleAdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASimpleAdditionArithVal(node);
        }
        super.inASimpleAdditionArithVal(node); // to continue the tree traversal
    }

    public void outASimpleAdditionArithVal(ASimpleAdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASimpleAdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASimpleAdditionArithVal(node);
        }
        super.outASimpleAdditionArithVal(node); // to continue the tree traversal
    }

    public void caseASimpleAdditionArithVal(ASimpleAdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASimpleAdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASimpleAdditionArithVal(node);
        }
        super.caseASimpleAdditionArithVal(node); // to continue the tree traversal
    }

    public void inADeferredchoiceAnykeyword(ADeferredchoiceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredchoiceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADeferredchoiceAnykeyword(node);
        }
        super.inADeferredchoiceAnykeyword(node); // to continue the tree traversal
    }

    public void outADeferredchoiceAnykeyword(ADeferredchoiceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredchoiceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADeferredchoiceAnykeyword(node);
        }
        super.outADeferredchoiceAnykeyword(node); // to continue the tree traversal
    }

    public void caseADeferredchoiceAnykeyword(ADeferredchoiceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADeferredchoiceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADeferredchoiceAnykeyword(node);
        }
        super.caseADeferredchoiceAnykeyword(node); // to continue the tree traversal
    }

    public void inATermTerms(ATermTerms node) {
        Object adapter = adaptersToHandleNodes.get(ATermTerms.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATermTerms(node);
        }
        super.inATermTerms(node); // to continue the tree traversal
    }

    public void outATermTerms(ATermTerms node) {
        Object adapter = adaptersToHandleNodes.get(ATermTerms.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATermTerms(node);
        }
        super.outATermTerms(node); // to continue the tree traversal
    }

    public void caseATermTerms(ATermTerms node) {
        Object adapter = adaptersToHandleNodes.get(ATermTerms.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATermTerms(node);
        }
        super.caseATermTerms(node); // to continue the tree traversal
    }

    public void inAInverseofAnykeyword(AInverseofAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInverseofAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInverseofAnykeyword(node);
        }
        super.inAInverseofAnykeyword(node); // to continue the tree traversal
    }

    public void outAInverseofAnykeyword(AInverseofAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInverseofAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInverseofAnykeyword(node);
        }
        super.outAInverseofAnykeyword(node); // to continue the tree traversal
    }

    public void caseAInverseofAnykeyword(AInverseofAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInverseofAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInverseofAnykeyword(node);
        }
        super.caseAInverseofAnykeyword(node); // to continue the tree traversal
    }

    public void inAOutputpinAnykeyword(AOutputpinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOutputpinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOutputpinAnykeyword(node);
        }
        super.inAOutputpinAnykeyword(node); // to continue the tree traversal
    }

    public void outAOutputpinAnykeyword(AOutputpinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOutputpinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOutputpinAnykeyword(node);
        }
        super.outAOutputpinAnykeyword(node); // to continue the tree traversal
    }

    public void caseAOutputpinAnykeyword(AOutputpinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOutputpinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOutputpinAnykeyword(node);
        }
        super.caseAOutputpinAnykeyword(node); // to continue the tree traversal
    }

    public void inALteCompOp(ALteCompOp node) {
        Object adapter = adaptersToHandleNodes.get(ALteCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inALteCompOp(node);
        }
        super.inALteCompOp(node); // to continue the tree traversal
    }

    public void outALteCompOp(ALteCompOp node) {
        Object adapter = adaptersToHandleNodes.get(ALteCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outALteCompOp(node);
        }
        super.outALteCompOp(node); // to continue the tree traversal
    }

    public void caseALteCompOp(ALteCompOp node) {
        Object adapter = adaptersToHandleNodes.get(ALteCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseALteCompOp(node);
        }
        super.caseALteCompOp(node); // to continue the tree traversal
    }

    public void inAConceptMoleculePreferredMolecule(AConceptMoleculePreferredMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AConceptMoleculePreferredMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConceptMoleculePreferredMolecule(node);
        }
        super.inAConceptMoleculePreferredMolecule(node); // to continue the tree traversal
    }

    public void outAConceptMoleculePreferredMolecule(AConceptMoleculePreferredMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AConceptMoleculePreferredMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConceptMoleculePreferredMolecule(node);
        }
        super.outAConceptMoleculePreferredMolecule(node); // to continue the tree traversal
    }

    public void caseAConceptMoleculePreferredMolecule(AConceptMoleculePreferredMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AConceptMoleculePreferredMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConceptMoleculePreferredMolecule(node);
        }
        super.caseAConceptMoleculePreferredMolecule(node); // to continue the tree traversal
    }

    public void inASubrelationAnykeyword(ASubrelationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASubrelationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASubrelationAnykeyword(node);
        }
        super.inASubrelationAnykeyword(node); // to continue the tree traversal
    }

    public void outASubrelationAnykeyword(ASubrelationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASubrelationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASubrelationAnykeyword(node);
        }
        super.outASubrelationAnykeyword(node); // to continue the tree traversal
    }

    public void caseASubrelationAnykeyword(ASubrelationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASubrelationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASubrelationAnykeyword(node);
        }
        super.caseASubrelationAnykeyword(node); // to continue the tree traversal
    }

    public void inAAttrRelList(AAttrRelList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrRelList(node);
        }
        super.inAAttrRelList(node); // to continue the tree traversal
    }

    public void outAAttrRelList(AAttrRelList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrRelList(node);
        }
        super.outAAttrRelList(node); // to continue the tree traversal
    }

    public void caseAAttrRelList(AAttrRelList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrRelList(node);
        }
        super.caseAAttrRelList(node); // to continue the tree traversal
    }

    public void inAConcurrentAnykeyword(AConcurrentAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConcurrentAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConcurrentAnykeyword(node);
        }
        super.inAConcurrentAnykeyword(node); // to continue the tree traversal
    }

    public void outAConcurrentAnykeyword(AConcurrentAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConcurrentAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConcurrentAnykeyword(node);
        }
        super.outAConcurrentAnykeyword(node); // to continue the tree traversal
    }

    public void caseAConcurrentAnykeyword(AConcurrentAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConcurrentAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConcurrentAnykeyword(node);
        }
        super.caseAConcurrentAnykeyword(node); // to continue the tree traversal
    }

    public void inAPreconditionAnykeyword(APreconditionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APreconditionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPreconditionAnykeyword(node);
        }
        super.inAPreconditionAnykeyword(node); // to continue the tree traversal
    }

    public void outAPreconditionAnykeyword(APreconditionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APreconditionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPreconditionAnykeyword(node);
        }
        super.outAPreconditionAnykeyword(node); // to continue the tree traversal
    }

    public void caseAPreconditionAnykeyword(APreconditionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APreconditionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPreconditionAnykeyword(node);
        }
        super.caseAPreconditionAnykeyword(node); // to continue the tree traversal
    }

    public void inAAtomPerform(AAtomPerform node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerform.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAtomPerform(node);
        }
        super.inAAtomPerform(node); // to continue the tree traversal
    }

    public void outAAtomPerform(AAtomPerform node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerform.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAtomPerform(node);
        }
        super.outAAtomPerform(node); // to continue the tree traversal
    }

    public void caseAAtomPerform(AAtomPerform node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerform.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAtomPerform(node);
        }
        super.caseAAtomPerform(node); // to continue the tree traversal
    }

    public void inAUseService(AUseService node) {
        Object adapter = adaptersToHandleNodes.get(AUseService.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUseService(node);
        }
        super.inAUseService(node); // to continue the tree traversal
    }

    public void outAUseService(AUseService node) {
        Object adapter = adaptersToHandleNodes.get(AUseService.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUseService(node);
        }
        super.outAUseService(node); // to continue the tree traversal
    }

    public void caseAUseService(AUseService node) {
        Object adapter = adaptersToHandleNodes.get(AUseService.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUseService(node);
        }
        super.caseAUseService(node); // to continue the tree traversal
    }

    public void inAInstance(AInstance node) {
        Object adapter = adaptersToHandleNodes.get(AInstance.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInstance(node);
        }
        super.inAInstance(node); // to continue the tree traversal
    }

    public void outAInstance(AInstance node) {
        Object adapter = adaptersToHandleNodes.get(AInstance.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInstance(node);
        }
        super.outAInstance(node); // to continue the tree traversal
    }

    public void caseAInstance(AInstance node) {
        Object adapter = adaptersToHandleNodes.get(AInstance.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInstance(node);
        }
        super.caseAInstance(node); // to continue the tree traversal
    }

    public void inAAddArithOp(AAddArithOp node) {
        Object adapter = adaptersToHandleNodes.get(AAddArithOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAddArithOp(node);
        }
        super.inAAddArithOp(node); // to continue the tree traversal
    }

    public void outAAddArithOp(AAddArithOp node) {
        Object adapter = adaptersToHandleNodes.get(AAddArithOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAddArithOp(node);
        }
        super.outAAddArithOp(node); // to continue the tree traversal
    }

    public void caseAAddArithOp(AAddArithOp node) {
        Object adapter = adaptersToHandleNodes.get(AAddArithOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAddArithOp(node);
        }
        super.caseAAddArithOp(node); // to continue the tree traversal
    }

    public void inAMathFunctionsymbol(AMathFunctionsymbol node) {
        Object adapter = adaptersToHandleNodes.get(AMathFunctionsymbol.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMathFunctionsymbol(node);
        }
        super.inAMathFunctionsymbol(node); // to continue the tree traversal
    }

    public void outAMathFunctionsymbol(AMathFunctionsymbol node) {
        Object adapter = adaptersToHandleNodes.get(AMathFunctionsymbol.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMathFunctionsymbol(node);
        }
        super.outAMathFunctionsymbol(node); // to continue the tree traversal
    }

    public void caseAMathFunctionsymbol(AMathFunctionsymbol node) {
        Object adapter = adaptersToHandleNodes.get(AMathFunctionsymbol.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMathFunctionsymbol(node);
        }
        super.caseAMathFunctionsymbol(node); // to continue the tree traversal
    }

    public void inAInputpinPin(AInputpinPin node) {
        Object adapter = adaptersToHandleNodes.get(AInputpinPin.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInputpinPin(node);
        }
        super.inAInputpinPin(node); // to continue the tree traversal
    }

    public void outAInputpinPin(AInputpinPin node) {
        Object adapter = adaptersToHandleNodes.get(AInputpinPin.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInputpinPin(node);
        }
        super.outAInputpinPin(node); // to continue the tree traversal
    }

    public void caseAInputpinPin(AInputpinPin node) {
        Object adapter = adaptersToHandleNodes.get(AInputpinPin.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInputpinPin(node);
        }
        super.caseAInputpinPin(node); // to continue the tree traversal
    }

    public void inANbAnonymousTerm(ANbAnonymousTerm node) {
        Object adapter = adaptersToHandleNodes.get(ANbAnonymousTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANbAnonymousTerm(node);
        }
        super.inANbAnonymousTerm(node); // to continue the tree traversal
    }

    public void outANbAnonymousTerm(ANbAnonymousTerm node) {
        Object adapter = adaptersToHandleNodes.get(ANbAnonymousTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANbAnonymousTerm(node);
        }
        super.outANbAnonymousTerm(node); // to continue the tree traversal
    }

    public void caseANbAnonymousTerm(ANbAnonymousTerm node) {
        Object adapter = adaptersToHandleNodes.get(ANbAnonymousTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANbAnonymousTerm(node);
        }
        super.caseANbAnonymousTerm(node); // to continue the tree traversal
    }

    public void inASequentialWorkflowPattern(ASequentialWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ASequentialWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASequentialWorkflowPattern(node);
        }
        super.inASequentialWorkflowPattern(node); // to continue the tree traversal
    }

    public void outASequentialWorkflowPattern(ASequentialWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ASequentialWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASequentialWorkflowPattern(node);
        }
        super.outASequentialWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseASequentialWorkflowPattern(ASequentialWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ASequentialWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASequentialWorkflowPattern(node);
        }
        super.caseASequentialWorkflowPattern(node); // to continue the tree traversal
    }

    public void inAAssumptionPrePostAssOrEff(AAssumptionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(AAssumptionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAssumptionPrePostAssOrEff(node);
        }
        super.inAAssumptionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void outAAssumptionPrePostAssOrEff(AAssumptionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(AAssumptionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAssumptionPrePostAssOrEff(node);
        }
        super.outAAssumptionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void caseAAssumptionPrePostAssOrEff(AAssumptionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(AAssumptionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAssumptionPrePostAssOrEff(node);
        }
        super.caseAAssumptionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void inAWgmediatorMediator(AWgmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWgmediatorMediator(node);
        }
        super.inAWgmediatorMediator(node); // to continue the tree traversal
    }

    public void outAWgmediatorMediator(AWgmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWgmediatorMediator(node);
        }
        super.outAWgmediatorMediator(node); // to continue the tree traversal
    }

    public void caseAWgmediatorMediator(AWgmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWgmediatorMediator(node);
        }
        super.caseAWgmediatorMediator(node); // to continue the tree traversal
    }

    public void inAArithVal(AArithVal node) {
        Object adapter = adaptersToHandleNodes.get(AArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAArithVal(node);
        }
        super.inAArithVal(node); // to continue the tree traversal
    }

    public void outAArithVal(AArithVal node) {
        Object adapter = adaptersToHandleNodes.get(AArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAArithVal(node);
        }
        super.outAArithVal(node); // to continue the tree traversal
    }

    public void caseAArithVal(AArithVal node) {
        Object adapter = adaptersToHandleNodes.get(AArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAArithVal(node);
        }
        super.caseAArithVal(node); // to continue the tree traversal
    }

    public void inAInterruptsAnykeyword(AInterruptsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterruptsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInterruptsAnykeyword(node);
        }
        super.inAInterruptsAnykeyword(node); // to continue the tree traversal
    }

    public void outAInterruptsAnykeyword(AInterruptsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterruptsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInterruptsAnykeyword(node);
        }
        super.outAInterruptsAnykeyword(node); // to continue the tree traversal
    }

    public void caseAInterruptsAnykeyword(AInterruptsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterruptsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInterruptsAnykeyword(node);
        }
        super.caseAInterruptsAnykeyword(node); // to continue the tree traversal
    }

    public void inAImpliestypeAnykeyword(AImpliestypeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliestypeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImpliestypeAnykeyword(node);
        }
        super.inAImpliestypeAnykeyword(node); // to continue the tree traversal
    }

    public void outAImpliestypeAnykeyword(AImpliestypeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliestypeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImpliestypeAnykeyword(node);
        }
        super.outAImpliestypeAnykeyword(node); // to continue the tree traversal
    }

    public void caseAImpliestypeAnykeyword(AImpliestypeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliestypeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImpliestypeAnykeyword(node);
        }
        super.caseAImpliestypeAnykeyword(node); // to continue the tree traversal
    }

    public void inAOpenWorldAttType(AOpenWorldAttType node) {
        Object adapter = adaptersToHandleNodes.get(AOpenWorldAttType.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOpenWorldAttType(node);
        }
        super.inAOpenWorldAttType(node); // to continue the tree traversal
    }

    public void outAOpenWorldAttType(AOpenWorldAttType node) {
        Object adapter = adaptersToHandleNodes.get(AOpenWorldAttType.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOpenWorldAttType(node);
        }
        super.outAOpenWorldAttType(node); // to continue the tree traversal
    }

    public void caseAOpenWorldAttType(AOpenWorldAttType node) {
        Object adapter = adaptersToHandleNodes.get(AOpenWorldAttType.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOpenWorldAttType(node);
        }
        super.caseAOpenWorldAttType(node); // to continue the tree traversal
    }

    public void inAPpmediatorAnykeyword(APpmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APpmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPpmediatorAnykeyword(node);
        }
        super.inAPpmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAPpmediatorAnykeyword(APpmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APpmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPpmediatorAnykeyword(node);
        }
        super.outAPpmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAPpmediatorAnykeyword(APpmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APpmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPpmediatorAnykeyword(node);
        }
        super.caseAPpmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inAWwmediatorMediator(AWwmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWwmediatorMediator(node);
        }
        super.inAWwmediatorMediator(node); // to continue the tree traversal
    }

    public void outAWwmediatorMediator(AWwmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWwmediatorMediator(node);
        }
        super.outAWwmediatorMediator(node); // to continue the tree traversal
    }

    public void caseAWwmediatorMediator(AWwmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWwmediatorMediator(node);
        }
        super.caseAWwmediatorMediator(node); // to continue the tree traversal
    }

    public void inAUseserviceAnykeyword(AUseserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUseserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUseserviceAnykeyword(node);
        }
        super.inAUseserviceAnykeyword(node); // to continue the tree traversal
    }

    public void outAUseserviceAnykeyword(AUseserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUseserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUseserviceAnykeyword(node);
        }
        super.outAUseserviceAnykeyword(node); // to continue the tree traversal
    }

    public void caseAUseserviceAnykeyword(AUseserviceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUseserviceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUseserviceAnykeyword(node);
        }
        super.caseAUseserviceAnykeyword(node); // to continue the tree traversal
    }

    public void inAForallQuantifierKey(AForallQuantifierKey node) {
        Object adapter = adaptersToHandleNodes.get(AForallQuantifierKey.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAForallQuantifierKey(node);
        }
        super.inAForallQuantifierKey(node); // to continue the tree traversal
    }

    public void outAForallQuantifierKey(AForallQuantifierKey node) {
        Object adapter = adaptersToHandleNodes.get(AForallQuantifierKey.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAForallQuantifierKey(node);
        }
        super.outAForallQuantifierKey(node); // to continue the tree traversal
    }

    public void caseAForallQuantifierKey(AForallQuantifierKey node) {
        Object adapter = adaptersToHandleNodes.get(AForallQuantifierKey.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAForallQuantifierKey(node);
        }
        super.caseAForallQuantifierKey(node); // to continue the tree traversal
    }

    public void inAIdIdlist(AIdIdlist node) {
        Object adapter = adaptersToHandleNodes.get(AIdIdlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIdIdlist(node);
        }
        super.inAIdIdlist(node); // to continue the tree traversal
    }

    public void outAIdIdlist(AIdIdlist node) {
        Object adapter = adaptersToHandleNodes.get(AIdIdlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIdIdlist(node);
        }
        super.outAIdIdlist(node); // to continue the tree traversal
    }

    public void caseAIdIdlist(AIdIdlist node) {
        Object adapter = adaptersToHandleNodes.get(AIdIdlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIdIdlist(node);
        }
        super.caseAIdIdlist(node); // to continue the tree traversal
    }

    public void inACashewPerformWorkflowCashewPerformAlt(ACashewPerformWorkflowCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformWorkflowCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewPerformWorkflowCashewPerformAlt(node);
        }
        super.inACashewPerformWorkflowCashewPerformAlt(node); // to continue the tree traversal
    }

    public void outACashewPerformWorkflowCashewPerformAlt(ACashewPerformWorkflowCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformWorkflowCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewPerformWorkflowCashewPerformAlt(node);
        }
        super.outACashewPerformWorkflowCashewPerformAlt(node); // to continue the tree traversal
    }

    public void caseACashewPerformWorkflowCashewPerformAlt(ACashewPerformWorkflowCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformWorkflowCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewPerformWorkflowCashewPerformAlt(node);
        }
        super.caseACashewPerformWorkflowCashewPerformAlt(node); // to continue the tree traversal
    }

    public void inAQuantified(AQuantified node) {
        Object adapter = adaptersToHandleNodes.get(AQuantified.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAQuantified(node);
        }
        super.inAQuantified(node); // to continue the tree traversal
    }

    public void outAQuantified(AQuantified node) {
        Object adapter = adaptersToHandleNodes.get(AQuantified.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAQuantified(node);
        }
        super.outAQuantified(node); // to continue the tree traversal
    }

    public void caseAQuantified(AQuantified node) {
        Object adapter = adaptersToHandleNodes.get(AQuantified.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAQuantified(node);
        }
        super.caseAQuantified(node); // to continue the tree traversal
    }

    public void inAOntologyDefinition(AOntologyDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AOntologyDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOntologyDefinition(node);
        }
        super.inAOntologyDefinition(node); // to continue the tree traversal
    }

    public void outAOntologyDefinition(AOntologyDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AOntologyDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOntologyDefinition(node);
        }
        super.outAOntologyDefinition(node); // to continue the tree traversal
    }

    public void caseAOntologyDefinition(AOntologyDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AOntologyDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOntologyDefinition(node);
        }
        super.caseAOntologyDefinition(node); // to continue the tree traversal
    }

    public void inAFactUpdate(AFactUpdate node) {
        Object adapter = adaptersToHandleNodes.get(AFactUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFactUpdate(node);
        }
        super.inAFactUpdate(node); // to continue the tree traversal
    }

    public void outAFactUpdate(AFactUpdate node) {
        Object adapter = adaptersToHandleNodes.get(AFactUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFactUpdate(node);
        }
        super.outAFactUpdate(node); // to continue the tree traversal
    }

    public void caseAFactUpdate(AFactUpdate node) {
        Object adapter = adaptersToHandleNodes.get(AFactUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFactUpdate(node);
        }
        super.caseAFactUpdate(node); // to continue the tree traversal
    }

    public void inARelation(ARelation node) {
        Object adapter = adaptersToHandleNodes.get(ARelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARelation(node);
        }
        super.inARelation(node); // to continue the tree traversal
    }

    public void outARelation(ARelation node) {
        Object adapter = adaptersToHandleNodes.get(ARelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARelation(node);
        }
        super.outARelation(node); // to continue the tree traversal
    }

    public void caseARelation(ARelation node) {
        Object adapter = adaptersToHandleNodes.get(ARelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARelation(node);
        }
        super.caseARelation(node); // to continue the tree traversal
    }

    public void inAPfmediatorMediator(APfmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(APfmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPfmediatorMediator(node);
        }
        super.inAPfmediatorMediator(node); // to continue the tree traversal
    }

    public void outAPfmediatorMediator(APfmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(APfmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPfmediatorMediator(node);
        }
        super.outAPfmediatorMediator(node); // to continue the tree traversal
    }

    public void caseAPfmediatorMediator(APfmediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(APfmediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPfmediatorMediator(node);
        }
        super.caseAPfmediatorMediator(node); // to continue the tree traversal
    }

    public void inAOrchForallOrchestrationRule(AOrchForallOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchForallOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchForallOrchestrationRule(node);
        }
        super.inAOrchForallOrchestrationRule(node); // to continue the tree traversal
    }

    public void outAOrchForallOrchestrationRule(AOrchForallOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchForallOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchForallOrchestrationRule(node);
        }
        super.outAOrchForallOrchestrationRule(node); // to continue the tree traversal
    }

    public void caseAOrchForallOrchestrationRule(AOrchForallOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchForallOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchForallOrchestrationRule(node);
        }
        super.caseAOrchForallOrchestrationRule(node); // to continue the tree traversal
    }

    public void inAForkNode(AForkNode node) {
        Object adapter = adaptersToHandleNodes.get(AForkNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAForkNode(node);
        }
        super.inAForkNode(node); // to continue the tree traversal
    }

    public void outAForkNode(AForkNode node) {
        Object adapter = adaptersToHandleNodes.get(AForkNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAForkNode(node);
        }
        super.outAForkNode(node); // to continue the tree traversal
    }

    public void caseAForkNode(AForkNode node) {
        Object adapter = adaptersToHandleNodes.get(AForkNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAForkNode(node);
        }
        super.caseAForkNode(node); // to continue the tree traversal
    }

    public void inANodecontents(ANodecontents node) {
        Object adapter = adaptersToHandleNodes.get(ANodecontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANodecontents(node);
        }
        super.inANodecontents(node); // to continue the tree traversal
    }

    public void outANodecontents(ANodecontents node) {
        Object adapter = adaptersToHandleNodes.get(ANodecontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANodecontents(node);
        }
        super.outANodecontents(node); // to continue the tree traversal
    }

    public void caseANodecontents(ANodecontents node) {
        Object adapter = adaptersToHandleNodes.get(ANodecontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANodecontents(node);
        }
        super.caseANodecontents(node); // to continue the tree traversal
    }

    public void inAActivityfinalNode(AActivityfinalNode node) {
        Object adapter = adaptersToHandleNodes.get(AActivityfinalNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAActivityfinalNode(node);
        }
        super.inAActivityfinalNode(node); // to continue the tree traversal
    }

    public void outAActivityfinalNode(AActivityfinalNode node) {
        Object adapter = adaptersToHandleNodes.get(AActivityfinalNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAActivityfinalNode(node);
        }
        super.outAActivityfinalNode(node); // to continue the tree traversal
    }

    public void caseAActivityfinalNode(AActivityfinalNode node) {
        Object adapter = adaptersToHandleNodes.get(AActivityfinalNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAActivityfinalNode(node);
        }
        super.caseAActivityfinalNode(node); // to continue the tree traversal
    }

    public void inASuperrelation(ASuperrelation node) {
        Object adapter = adaptersToHandleNodes.get(ASuperrelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASuperrelation(node);
        }
        super.inASuperrelation(node); // to continue the tree traversal
    }

    public void outASuperrelation(ASuperrelation node) {
        Object adapter = adaptersToHandleNodes.get(ASuperrelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASuperrelation(node);
        }
        super.outASuperrelation(node); // to continue the tree traversal
    }

    public void caseASuperrelation(ASuperrelation node) {
        Object adapter = adaptersToHandleNodes.get(ASuperrelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASuperrelation(node);
        }
        super.caseASuperrelation(node); // to continue the tree traversal
    }

    public void inAInfiniteCardinalityCardinalityNumber(AInfiniteCardinalityCardinalityNumber node) {
        Object adapter = adaptersToHandleNodes.get(AInfiniteCardinalityCardinalityNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInfiniteCardinalityCardinalityNumber(node);
        }
        super.inAInfiniteCardinalityCardinalityNumber(node); // to continue the tree traversal
    }

    public void outAInfiniteCardinalityCardinalityNumber(AInfiniteCardinalityCardinalityNumber node) {
        Object adapter = adaptersToHandleNodes.get(AInfiniteCardinalityCardinalityNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInfiniteCardinalityCardinalityNumber(node);
        }
        super.outAInfiniteCardinalityCardinalityNumber(node); // to continue the tree traversal
    }

    public void caseAInfiniteCardinalityCardinalityNumber(AInfiniteCardinalityCardinalityNumber node) {
        Object adapter = adaptersToHandleNodes.get(AInfiniteCardinalityCardinalityNumber.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInfiniteCardinalityCardinalityNumber(node);
        }
        super.caseAInfiniteCardinalityCardinalityNumber(node); // to continue the tree traversal
    }

    public void inAAchievegoalAnykeyword(AAchievegoalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAchievegoalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAchievegoalAnykeyword(node);
        }
        super.inAAchievegoalAnykeyword(node); // to continue the tree traversal
    }

    public void outAAchievegoalAnykeyword(AAchievegoalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAchievegoalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAchievegoalAnykeyword(node);
        }
        super.outAAchievegoalAnykeyword(node); // to continue the tree traversal
    }

    public void caseAAchievegoalAnykeyword(AAchievegoalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAchievegoalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAchievegoalAnykeyword(node);
        }
        super.caseAAchievegoalAnykeyword(node); // to continue the tree traversal
    }

    public void inACashewPerformReceiveCashewPerformAlt(ACashewPerformReceiveCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformReceiveCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewPerformReceiveCashewPerformAlt(node);
        }
        super.inACashewPerformReceiveCashewPerformAlt(node); // to continue the tree traversal
    }

    public void outACashewPerformReceiveCashewPerformAlt(ACashewPerformReceiveCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformReceiveCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewPerformReceiveCashewPerformAlt(node);
        }
        super.outACashewPerformReceiveCashewPerformAlt(node); // to continue the tree traversal
    }

    public void caseACashewPerformReceiveCashewPerformAlt(ACashewPerformReceiveCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformReceiveCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewPerformReceiveCashewPerformAlt(node);
        }
        super.caseACashewPerformReceiveCashewPerformAlt(node); // to continue the tree traversal
    }

    public void inAControlledModeId(AControlledModeId node) {
        Object adapter = adaptersToHandleNodes.get(AControlledModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAControlledModeId(node);
        }
        super.inAControlledModeId(node); // to continue the tree traversal
    }

    public void outAControlledModeId(AControlledModeId node) {
        Object adapter = adaptersToHandleNodes.get(AControlledModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAControlledModeId(node);
        }
        super.outAControlledModeId(node); // to continue the tree traversal
    }

    public void caseAControlledModeId(AControlledModeId node) {
        Object adapter = adaptersToHandleNodes.get(AControlledModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAControlledModeId(node);
        }
        super.caseAControlledModeId(node); // to continue the tree traversal
    }

    public void inAIriGroundingInfo(AIriGroundingInfo node) {
        Object adapter = adaptersToHandleNodes.get(AIriGroundingInfo.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIriGroundingInfo(node);
        }
        super.inAIriGroundingInfo(node); // to continue the tree traversal
    }

    public void outAIriGroundingInfo(AIriGroundingInfo node) {
        Object adapter = adaptersToHandleNodes.get(AIriGroundingInfo.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIriGroundingInfo(node);
        }
        super.outAIriGroundingInfo(node); // to continue the tree traversal
    }

    public void caseAIriGroundingInfo(AIriGroundingInfo node) {
        Object adapter = adaptersToHandleNodes.get(AIriGroundingInfo.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIriGroundingInfo(node);
        }
        super.caseAIriGroundingInfo(node); // to continue the tree traversal
    }

    public void inAOrchChooseOrchestrationRule(AOrchChooseOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchChooseOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchChooseOrchestrationRule(node);
        }
        super.inAOrchChooseOrchestrationRule(node); // to continue the tree traversal
    }

    public void outAOrchChooseOrchestrationRule(AOrchChooseOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchChooseOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchChooseOrchestrationRule(node);
        }
        super.outAOrchChooseOrchestrationRule(node); // to continue the tree traversal
    }

    public void caseAOrchChooseOrchestrationRule(AOrchChooseOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchChooseOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchChooseOrchestrationRule(node);
        }
        super.caseAOrchChooseOrchestrationRule(node); // to continue the tree traversal
    }

    public void inAMoleculeSimple(AMoleculeSimple node) {
        Object adapter = adaptersToHandleNodes.get(AMoleculeSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMoleculeSimple(node);
        }
        super.inAMoleculeSimple(node); // to continue the tree traversal
    }

    public void outAMoleculeSimple(AMoleculeSimple node) {
        Object adapter = adaptersToHandleNodes.get(AMoleculeSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMoleculeSimple(node);
        }
        super.outAMoleculeSimple(node); // to continue the tree traversal
    }

    public void caseAMoleculeSimple(AMoleculeSimple node) {
        Object adapter = adaptersToHandleNodes.get(AMoleculeSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMoleculeSimple(node);
        }
        super.caseAMoleculeSimple(node); // to continue the tree traversal
    }

    public void inAAxiomOntologyElement(AAxiomOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AAxiomOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAxiomOntologyElement(node);
        }
        super.inAAxiomOntologyElement(node); // to continue the tree traversal
    }

    public void outAAxiomOntologyElement(AAxiomOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AAxiomOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAxiomOntologyElement(node);
        }
        super.outAAxiomOntologyElement(node); // to continue the tree traversal
    }

    public void caseAAxiomOntologyElement(AAxiomOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AAxiomOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAxiomOntologyElement(node);
        }
        super.caseAAxiomOntologyElement(node); // to continue the tree traversal
    }

    public void inADefaultModeModeEntry(ADefaultModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADefaultModeModeEntry(node);
        }
        super.inADefaultModeModeEntry(node); // to continue the tree traversal
    }

    public void outADefaultModeModeEntry(ADefaultModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADefaultModeModeEntry(node);
        }
        super.outADefaultModeModeEntry(node); // to continue the tree traversal
    }

    public void caseADefaultModeModeEntry(ADefaultModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADefaultModeModeEntry(node);
        }
        super.caseADefaultModeModeEntry(node); // to continue the tree traversal
    }

    public void inANumericValue(ANumericValue node) {
        Object adapter = adaptersToHandleNodes.get(ANumericValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANumericValue(node);
        }
        super.inANumericValue(node); // to continue the tree traversal
    }

    public void outANumericValue(ANumericValue node) {
        Object adapter = adaptersToHandleNodes.get(ANumericValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANumericValue(node);
        }
        super.outANumericValue(node); // to continue the tree traversal
    }

    public void caseANumericValue(ANumericValue node) {
        Object adapter = adaptersToHandleNodes.get(ANumericValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANumericValue(node);
        }
        super.caseANumericValue(node); // to continue the tree traversal
    }

    public void inASemisimple2AdditionArithVal(ASemisimple2AdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASemisimple2AdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASemisimple2AdditionArithVal(node);
        }
        super.inASemisimple2AdditionArithVal(node); // to continue the tree traversal
    }

    public void outASemisimple2AdditionArithVal(ASemisimple2AdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASemisimple2AdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASemisimple2AdditionArithVal(node);
        }
        super.outASemisimple2AdditionArithVal(node); // to continue the tree traversal
    }

    public void caseASemisimple2AdditionArithVal(ASemisimple2AdditionArithVal node) {
        Object adapter = adaptersToHandleNodes.get(ASemisimple2AdditionArithVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASemisimple2AdditionArithVal(node);
        }
        super.caseASemisimple2AdditionArithVal(node); // to continue the tree traversal
    }

    public void inAFactRelationFact(AFactRelationFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactRelationFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFactRelationFact(node);
        }
        super.inAFactRelationFact(node); // to continue the tree traversal
    }

    public void outAFactRelationFact(AFactRelationFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactRelationFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFactRelationFact(node);
        }
        super.outAFactRelationFact(node); // to continue the tree traversal
    }

    public void caseAFactRelationFact(AFactRelationFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactRelationFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFactRelationFact(node);
        }
        super.caseAFactRelationFact(node); // to continue the tree traversal
    }

    public void inAArithMathOp(AArithMathOp node) {
        Object adapter = adaptersToHandleNodes.get(AArithMathOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAArithMathOp(node);
        }
        super.inAArithMathOp(node); // to continue the tree traversal
    }

    public void outAArithMathOp(AArithMathOp node) {
        Object adapter = adaptersToHandleNodes.get(AArithMathOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAArithMathOp(node);
        }
        super.outAArithMathOp(node); // to continue the tree traversal
    }

    public void caseAArithMathOp(AArithMathOp node) {
        Object adapter = adaptersToHandleNodes.get(AArithMathOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAArithMathOp(node);
        }
        super.caseAArithMathOp(node); // to continue the tree traversal
    }

    public void inADefinedby(ADefinedby node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedby.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADefinedby(node);
        }
        super.inADefinedby(node); // to continue the tree traversal
    }

    public void outADefinedby(ADefinedby node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedby.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADefinedby(node);
        }
        super.outADefinedby(node); // to continue the tree traversal
    }

    public void caseADefinedby(ADefinedby node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedby.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADefinedby(node);
        }
        super.caseADefinedby(node); // to continue the tree traversal
    }

    public void inAMode(AMode node) {
        Object adapter = adaptersToHandleNodes.get(AMode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMode(node);
        }
        super.inAMode(node); // to continue the tree traversal
    }

    public void outAMode(AMode node) {
        Object adapter = adaptersToHandleNodes.get(AMode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMode(node);
        }
        super.outAMode(node); // to continue the tree traversal
    }

    public void caseAMode(AMode node) {
        Object adapter = adaptersToHandleNodes.get(AMode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMode(node);
        }
        super.caseAMode(node); // to continue the tree traversal
    }

    public void inARelationInstanceAnykeyword(ARelationInstanceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARelationInstanceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARelationInstanceAnykeyword(node);
        }
        super.inARelationInstanceAnykeyword(node); // to continue the tree traversal
    }

    public void outARelationInstanceAnykeyword(ARelationInstanceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARelationInstanceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARelationInstanceAnykeyword(node);
        }
        super.outARelationInstanceAnykeyword(node); // to continue the tree traversal
    }

    public void caseARelationInstanceAnykeyword(ARelationInstanceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ARelationInstanceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARelationInstanceAnykeyword(node);
        }
        super.caseARelationInstanceAnykeyword(node); // to continue the tree traversal
    }

    public void inAInterrupting(AInterrupting node) {
        Object adapter = adaptersToHandleNodes.get(AInterrupting.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInterrupting(node);
        }
        super.inAInterrupting(node); // to continue the tree traversal
    }

    public void outAInterrupting(AInterrupting node) {
        Object adapter = adaptersToHandleNodes.get(AInterrupting.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInterrupting(node);
        }
        super.outAInterrupting(node); // to continue the tree traversal
    }

    public void caseAInterrupting(AInterrupting node) {
        Object adapter = adaptersToHandleNodes.get(AInterrupting.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInterrupting(node);
        }
        super.caseAInterrupting(node); // to continue the tree traversal
    }

    public void inAMsources(AMsources node) {
        Object adapter = adaptersToHandleNodes.get(AMsources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMsources(node);
        }
        super.inAMsources(node); // to continue the tree traversal
    }

    public void outAMsources(AMsources node) {
        Object adapter = adaptersToHandleNodes.get(AMsources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMsources(node);
        }
        super.outAMsources(node); // to continue the tree traversal
    }

    public void caseAMsources(AMsources node) {
        Object adapter = adaptersToHandleNodes.get(AMsources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMsources(node);
        }
        super.caseAMsources(node); // to continue the tree traversal
    }

    public void inAImpliesAnykeyword(AImpliesAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliesAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImpliesAnykeyword(node);
        }
        super.inAImpliesAnykeyword(node); // to continue the tree traversal
    }

    public void outAImpliesAnykeyword(AImpliesAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliesAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImpliesAnykeyword(node);
        }
        super.outAImpliesAnykeyword(node); // to continue the tree traversal
    }

    public void caseAImpliesAnykeyword(AImpliesAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliesAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImpliesAnykeyword(node);
        }
        super.caseAImpliesAnykeyword(node); // to continue the tree traversal
    }

    public void inAExtractionNode(AExtractionNode node) {
        Object adapter = adaptersToHandleNodes.get(AExtractionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAExtractionNode(node);
        }
        super.inAExtractionNode(node); // to continue the tree traversal
    }

    public void outAExtractionNode(AExtractionNode node) {
        Object adapter = adaptersToHandleNodes.get(AExtractionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAExtractionNode(node);
        }
        super.outAExtractionNode(node); // to continue the tree traversal
    }

    public void caseAExtractionNode(AExtractionNode node) {
        Object adapter = adaptersToHandleNodes.get(AExtractionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAExtractionNode(node);
        }
        super.caseAExtractionNode(node); // to continue the tree traversal
    }

    public void inAGrounding(AGrounding node) {
        Object adapter = adaptersToHandleNodes.get(AGrounding.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGrounding(node);
        }
        super.inAGrounding(node); // to continue the tree traversal
    }

    public void outAGrounding(AGrounding node) {
        Object adapter = adaptersToHandleNodes.get(AGrounding.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGrounding(node);
        }
        super.outAGrounding(node); // to continue the tree traversal
    }

    public void caseAGrounding(AGrounding node) {
        Object adapter = adaptersToHandleNodes.get(AGrounding.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGrounding(node);
        }
        super.caseAGrounding(node); // to continue the tree traversal
    }

    public void inAAnySqname(AAnySqname node) {
        Object adapter = adaptersToHandleNodes.get(AAnySqname.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAnySqname(node);
        }
        super.inAAnySqname(node); // to continue the tree traversal
    }

    public void outAAnySqname(AAnySqname node) {
        Object adapter = adaptersToHandleNodes.get(AAnySqname.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAnySqname(node);
        }
        super.outAAnySqname(node); // to continue the tree traversal
    }

    public void caseAAnySqname(AAnySqname node) {
        Object adapter = adaptersToHandleNodes.get(AAnySqname.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAnySqname(node);
        }
        super.caseAAnySqname(node); // to continue the tree traversal
    }

    public void inAOntologyAnykeyword(AOntologyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOntologyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOntologyAnykeyword(node);
        }
        super.inAOntologyAnykeyword(node); // to continue the tree traversal
    }

    public void outAOntologyAnykeyword(AOntologyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOntologyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOntologyAnykeyword(node);
        }
        super.outAOntologyAnykeyword(node); // to continue the tree traversal
    }

    public void caseAOntologyAnykeyword(AOntologyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOntologyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOntologyAnykeyword(node);
        }
        super.caseAOntologyAnykeyword(node); // to continue the tree traversal
    }

    public void inAGoalDefinition(AGoalDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AGoalDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGoalDefinition(node);
        }
        super.inAGoalDefinition(node); // to continue the tree traversal
    }

    public void outAGoalDefinition(AGoalDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AGoalDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGoalDefinition(node);
        }
        super.outAGoalDefinition(node); // to continue the tree traversal
    }

    public void caseAGoalDefinition(AGoalDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AGoalDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGoalDefinition(node);
        }
        super.caseAGoalDefinition(node); // to continue the tree traversal
    }

    public void inACashewworkflowAnykeyword(ACashewworkflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ACashewworkflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewworkflowAnykeyword(node);
        }
        super.inACashewworkflowAnykeyword(node); // to continue the tree traversal
    }

    public void outACashewworkflowAnykeyword(ACashewworkflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ACashewworkflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewworkflowAnykeyword(node);
        }
        super.outACashewworkflowAnykeyword(node); // to continue the tree traversal
    }

    public void caseACashewworkflowAnykeyword(ACashewworkflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ACashewworkflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewworkflowAnykeyword(node);
        }
        super.caseACashewworkflowAnykeyword(node); // to continue the tree traversal
    }

    public void inAGgmediatorAnykeyword(AGgmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGgmediatorAnykeyword(node);
        }
        super.inAGgmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAGgmediatorAnykeyword(AGgmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGgmediatorAnykeyword(node);
        }
        super.outAGgmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAGgmediatorAnykeyword(AGgmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGgmediatorAnykeyword(node);
        }
        super.caseAGgmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inANfpHeader(ANfpHeader node) {
        Object adapter = adaptersToHandleNodes.get(ANfpHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANfpHeader(node);
        }
        super.inANfpHeader(node); // to continue the tree traversal
    }

    public void outANfpHeader(ANfpHeader node) {
        Object adapter = adaptersToHandleNodes.get(ANfpHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANfpHeader(node);
        }
        super.outANfpHeader(node); // to continue the tree traversal
    }

    public void caseANfpHeader(ANfpHeader node) {
        Object adapter = adaptersToHandleNodes.get(ANfpHeader.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANfpHeader(node);
        }
        super.caseANfpHeader(node); // to continue the tree traversal
    }

    public void inACashewWorkflowDef(ACashewWorkflowDef node) {
        Object adapter = adaptersToHandleNodes.get(ACashewWorkflowDef.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewWorkflowDef(node);
        }
        super.inACashewWorkflowDef(node); // to continue the tree traversal
    }

    public void outACashewWorkflowDef(ACashewWorkflowDef node) {
        Object adapter = adaptersToHandleNodes.get(ACashewWorkflowDef.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewWorkflowDef(node);
        }
        super.outACashewWorkflowDef(node); // to continue the tree traversal
    }

    public void caseACashewWorkflowDef(ACashewWorkflowDef node) {
        Object adapter = adaptersToHandleNodes.get(ACashewWorkflowDef.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewWorkflowDef(node);
        }
        super.caseACashewWorkflowDef(node); // to continue the tree traversal
    }

    public void inAInstanceAnykeyword(AInstanceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInstanceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInstanceAnykeyword(node);
        }
        super.inAInstanceAnykeyword(node); // to continue the tree traversal
    }

    public void outAInstanceAnykeyword(AInstanceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInstanceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInstanceAnykeyword(node);
        }
        super.outAInstanceAnykeyword(node); // to continue the tree traversal
    }

    public void caseAInstanceAnykeyword(AInstanceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInstanceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInstanceAnykeyword(node);
        }
        super.caseAInstanceAnykeyword(node); // to continue the tree traversal
    }

    public void inANamespace(ANamespace node) {
        Object adapter = adaptersToHandleNodes.get(ANamespace.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANamespace(node);
        }
        super.inANamespace(node); // to continue the tree traversal
    }

    public void outANamespace(ANamespace node) {
        Object adapter = adaptersToHandleNodes.get(ANamespace.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANamespace(node);
        }
        super.outANamespace(node); // to continue the tree traversal
    }

    public void caseANamespace(ANamespace node) {
        Object adapter = adaptersToHandleNodes.get(ANamespace.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANamespace(node);
        }
        super.caseANamespace(node); // to continue the tree traversal
    }

    public void inAInstanceOntologyElement(AInstanceOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AInstanceOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInstanceOntologyElement(node);
        }
        super.inAInstanceOntologyElement(node); // to continue the tree traversal
    }

    public void outAInstanceOntologyElement(AInstanceOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AInstanceOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInstanceOntologyElement(node);
        }
        super.outAInstanceOntologyElement(node); // to continue the tree traversal
    }

    public void caseAInstanceOntologyElement(AInstanceOntologyElement node) {
        Object adapter = adaptersToHandleNodes.get(AInstanceOntologyElement.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInstanceOntologyElement(node);
        }
        super.caseAInstanceOntologyElement(node); // to continue the tree traversal
    }

    public void inAUntilAnykeyword(AUntilAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUntilAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUntilAnykeyword(node);
        }
        super.inAUntilAnykeyword(node); // to continue the tree traversal
    }

    public void outAUntilAnykeyword(AUntilAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUntilAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUntilAnykeyword(node);
        }
        super.outAUntilAnykeyword(node); // to continue the tree traversal
    }

    public void caseAUntilAnykeyword(AUntilAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUntilAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUntilAnykeyword(node);
        }
        super.caseAUntilAnykeyword(node); // to continue the tree traversal
    }

    public void inAIdlistIdlist(AIdlistIdlist node) {
        Object adapter = adaptersToHandleNodes.get(AIdlistIdlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIdlistIdlist(node);
        }
        super.inAIdlistIdlist(node); // to continue the tree traversal
    }

    public void outAIdlistIdlist(AIdlistIdlist node) {
        Object adapter = adaptersToHandleNodes.get(AIdlistIdlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIdlistIdlist(node);
        }
        super.outAIdlistIdlist(node); // to continue the tree traversal
    }

    public void caseAIdlistIdlist(AIdlistIdlist node) {
        Object adapter = adaptersToHandleNodes.get(AIdlistIdlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIdlistIdlist(node);
        }
        super.caseAIdlistIdlist(node); // to continue the tree traversal
    }

    public void inAUpdatesRule(AUpdatesRule node) {
        Object adapter = adaptersToHandleNodes.get(AUpdatesRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUpdatesRule(node);
        }
        super.inAUpdatesRule(node); // to continue the tree traversal
    }

    public void outAUpdatesRule(AUpdatesRule node) {
        Object adapter = adaptersToHandleNodes.get(AUpdatesRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUpdatesRule(node);
        }
        super.outAUpdatesRule(node); // to continue the tree traversal
    }

    public void caseAUpdatesRule(AUpdatesRule node) {
        Object adapter = adaptersToHandleNodes.get(AUpdatesRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUpdatesRule(node);
        }
        super.caseAUpdatesRule(node); // to continue the tree traversal
    }

    public void inASingleSources(ASingleSources node) {
        Object adapter = adaptersToHandleNodes.get(ASingleSources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASingleSources(node);
        }
        super.inASingleSources(node); // to continue the tree traversal
    }

    public void outASingleSources(ASingleSources node) {
        Object adapter = adaptersToHandleNodes.get(ASingleSources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASingleSources(node);
        }
        super.outASingleSources(node); // to continue the tree traversal
    }

    public void caseASingleSources(ASingleSources node) {
        Object adapter = adaptersToHandleNodes.get(ASingleSources.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASingleSources(node);
        }
        super.caseASingleSources(node); // to continue the tree traversal
    }

    public void inADataflowmediatorsAnykeyword(ADataflowmediatorsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowmediatorsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADataflowmediatorsAnykeyword(node);
        }
        super.inADataflowmediatorsAnykeyword(node); // to continue the tree traversal
    }

    public void outADataflowmediatorsAnykeyword(ADataflowmediatorsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowmediatorsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADataflowmediatorsAnykeyword(node);
        }
        super.outADataflowmediatorsAnykeyword(node); // to continue the tree traversal
    }

    public void caseADataflowmediatorsAnykeyword(ADataflowmediatorsAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowmediatorsAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADataflowmediatorsAnykeyword(node);
        }
        super.caseADataflowmediatorsAnykeyword(node); // to continue the tree traversal
    }

    public void inASource(ASource node) {
        Object adapter = adaptersToHandleNodes.get(ASource.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASource(node);
        }
        super.inASource(node); // to continue the tree traversal
    }

    public void outASource(ASource node) {
        Object adapter = adaptersToHandleNodes.get(ASource.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASource(node);
        }
        super.outASource(node); // to continue the tree traversal
    }

    public void caseASource(ASource node) {
        Object adapter = adaptersToHandleNodes.get(ASource.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASource(node);
        }
        super.caseASource(node); // to continue the tree traversal
    }

    public void inAParametrizedFunctionsymbol(AParametrizedFunctionsymbol node) {
        Object adapter = adaptersToHandleNodes.get(AParametrizedFunctionsymbol.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAParametrizedFunctionsymbol(node);
        }
        super.inAParametrizedFunctionsymbol(node); // to continue the tree traversal
    }

    public void outAParametrizedFunctionsymbol(AParametrizedFunctionsymbol node) {
        Object adapter = adaptersToHandleNodes.get(AParametrizedFunctionsymbol.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAParametrizedFunctionsymbol(node);
        }
        super.outAParametrizedFunctionsymbol(node); // to continue the tree traversal
    }

    public void caseAParametrizedFunctionsymbol(AParametrizedFunctionsymbol node) {
        Object adapter = adaptersToHandleNodes.get(AParametrizedFunctionsymbol.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAParametrizedFunctionsymbol(node);
        }
        super.caseAParametrizedFunctionsymbol(node); // to continue the tree traversal
    }

    public void inAElseGuard(AElseGuard node) {
        Object adapter = adaptersToHandleNodes.get(AElseGuard.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAElseGuard(node);
        }
        super.inAElseGuard(node); // to continue the tree traversal
    }

    public void outAElseGuard(AElseGuard node) {
        Object adapter = adaptersToHandleNodes.get(AElseGuard.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAElseGuard(node);
        }
        super.outAElseGuard(node); // to continue the tree traversal
    }

    public void caseAElseGuard(AElseGuard node) {
        Object adapter = adaptersToHandleNodes.get(AElseGuard.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAElseGuard(node);
        }
        super.caseAElseGuard(node); // to continue the tree traversal
    }

    public void inAAnonymousId(AAnonymousId node) {
        Object adapter = adaptersToHandleNodes.get(AAnonymousId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAnonymousId(node);
        }
        super.inAAnonymousId(node); // to continue the tree traversal
    }

    public void outAAnonymousId(AAnonymousId node) {
        Object adapter = adaptersToHandleNodes.get(AAnonymousId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAnonymousId(node);
        }
        super.outAAnonymousId(node); // to continue the tree traversal
    }

    public void caseAAnonymousId(AAnonymousId node) {
        Object adapter = adaptersToHandleNodes.get(AAnonymousId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAnonymousId(node);
        }
        super.caseAAnonymousId(node); // to continue the tree traversal
    }

    public void inAImportsontology(AImportsontology node) {
        Object adapter = adaptersToHandleNodes.get(AImportsontology.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImportsontology(node);
        }
        super.inAImportsontology(node); // to continue the tree traversal
    }

    public void outAImportsontology(AImportsontology node) {
        Object adapter = adaptersToHandleNodes.get(AImportsontology.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImportsontology(node);
        }
        super.outAImportsontology(node); // to continue the tree traversal
    }

    public void caseAImportsontology(AImportsontology node) {
        Object adapter = adaptersToHandleNodes.get(AImportsontology.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImportsontology(node);
        }
        super.caseAImportsontology(node); // to continue the tree traversal
    }

    public void inAOutModeId(AOutModeId node) {
        Object adapter = adaptersToHandleNodes.get(AOutModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOutModeId(node);
        }
        super.inAOutModeId(node); // to continue the tree traversal
    }

    public void outAOutModeId(AOutModeId node) {
        Object adapter = adaptersToHandleNodes.get(AOutModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOutModeId(node);
        }
        super.outAOutModeId(node); // to continue the tree traversal
    }

    public void caseAOutModeId(AOutModeId node) {
        Object adapter = adaptersToHandleNodes.get(AOutModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOutModeId(node);
        }
        super.caseAOutModeId(node); // to continue the tree traversal
    }

    public void inAExistsQuantifierKey(AExistsQuantifierKey node) {
        Object adapter = adaptersToHandleNodes.get(AExistsQuantifierKey.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAExistsQuantifierKey(node);
        }
        super.inAExistsQuantifierKey(node); // to continue the tree traversal
    }

    public void outAExistsQuantifierKey(AExistsQuantifierKey node) {
        Object adapter = adaptersToHandleNodes.get(AExistsQuantifierKey.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAExistsQuantifierKey(node);
        }
        super.outAExistsQuantifierKey(node); // to continue the tree traversal
    }

    public void caseAExistsQuantifierKey(AExistsQuantifierKey node) {
        Object adapter = adaptersToHandleNodes.get(AExistsQuantifierKey.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAExistsQuantifierKey(node);
        }
        super.caseAExistsQuantifierKey(node); // to continue the tree traversal
    }

    public void inAFactPreferredFact(AFactPreferredFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactPreferredFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFactPreferredFact(node);
        }
        super.inAFactPreferredFact(node); // to continue the tree traversal
    }

    public void outAFactPreferredFact(AFactPreferredFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactPreferredFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFactPreferredFact(node);
        }
        super.outAFactPreferredFact(node); // to continue the tree traversal
    }

    public void caseAFactPreferredFact(AFactPreferredFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactPreferredFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFactPreferredFact(node);
        }
        super.caseAFactPreferredFact(node); // to continue the tree traversal
    }

    public void inAGuardAnykeyword(AGuardAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGuardAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGuardAnykeyword(node);
        }
        super.inAGuardAnykeyword(node); // to continue the tree traversal
    }

    public void outAGuardAnykeyword(AGuardAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGuardAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGuardAnykeyword(node);
        }
        super.outAGuardAnykeyword(node); // to continue the tree traversal
    }

    public void caseAGuardAnykeyword(AGuardAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGuardAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGuardAnykeyword(node);
        }
        super.caseAGuardAnykeyword(node); // to continue the tree traversal
    }

    public void inATermValuelist(ATermValuelist node) {
        Object adapter = adaptersToHandleNodes.get(ATermValuelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATermValuelist(node);
        }
        super.inATermValuelist(node); // to continue the tree traversal
    }

    public void outATermValuelist(ATermValuelist node) {
        Object adapter = adaptersToHandleNodes.get(ATermValuelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATermValuelist(node);
        }
        super.outATermValuelist(node); // to continue the tree traversal
    }

    public void caseATermValuelist(ATermValuelist node) {
        Object adapter = adaptersToHandleNodes.get(ATermValuelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATermValuelist(node);
        }
        super.caseATermValuelist(node); // to continue the tree traversal
    }

    public void inAWsmlvariant(AWsmlvariant node) {
        Object adapter = adaptersToHandleNodes.get(AWsmlvariant.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWsmlvariant(node);
        }
        super.inAWsmlvariant(node); // to continue the tree traversal
    }

    public void outAWsmlvariant(AWsmlvariant node) {
        Object adapter = adaptersToHandleNodes.get(AWsmlvariant.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWsmlvariant(node);
        }
        super.outAWsmlvariant(node); // to continue the tree traversal
    }

    public void caseAWsmlvariant(AWsmlvariant node) {
        Object adapter = adaptersToHandleNodes.get(AWsmlvariant.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWsmlvariant(node);
        }
        super.caseAWsmlvariant(node); // to continue the tree traversal
    }

    public void inARestrictedLeCondition(ARestrictedLeCondition node) {
        Object adapter = adaptersToHandleNodes.get(ARestrictedLeCondition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inARestrictedLeCondition(node);
        }
        super.inARestrictedLeCondition(node); // to continue the tree traversal
    }

    public void outARestrictedLeCondition(ARestrictedLeCondition node) {
        Object adapter = adaptersToHandleNodes.get(ARestrictedLeCondition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outARestrictedLeCondition(node);
        }
        super.outARestrictedLeCondition(node); // to continue the tree traversal
    }

    public void caseARestrictedLeCondition(ARestrictedLeCondition node) {
        Object adapter = adaptersToHandleNodes.get(ARestrictedLeCondition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseARestrictedLeCondition(node);
        }
        super.caseARestrictedLeCondition(node); // to continue the tree traversal
    }

    public void inASubconceptofCptOp(ASubconceptofCptOp node) {
        Object adapter = adaptersToHandleNodes.get(ASubconceptofCptOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASubconceptofCptOp(node);
        }
        super.inASubconceptofCptOp(node); // to continue the tree traversal
    }

    public void outASubconceptofCptOp(ASubconceptofCptOp node) {
        Object adapter = adaptersToHandleNodes.get(ASubconceptofCptOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASubconceptofCptOp(node);
        }
        super.outASubconceptofCptOp(node); // to continue the tree traversal
    }

    public void caseASubconceptofCptOp(ASubconceptofCptOp node) {
        Object adapter = adaptersToHandleNodes.get(ASubconceptofCptOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASubconceptofCptOp(node);
        }
        super.caseASubconceptofCptOp(node); // to continue the tree traversal
    }

    public void inAActivitygroupcontents(AActivitygroupcontents node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupcontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAActivitygroupcontents(node);
        }
        super.inAActivitygroupcontents(node); // to continue the tree traversal
    }

    public void outAActivitygroupcontents(AActivitygroupcontents node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupcontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAActivitygroupcontents(node);
        }
        super.outAActivitygroupcontents(node); // to continue the tree traversal
    }

    public void caseAActivitygroupcontents(AActivitygroupcontents node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupcontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAActivitygroupcontents(node);
        }
        super.caseAActivitygroupcontents(node); // to continue the tree traversal
    }

    public void inAAttrSpecification(AAttrSpecification node) {
        Object adapter = adaptersToHandleNodes.get(AAttrSpecification.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrSpecification(node);
        }
        super.inAAttrSpecification(node); // to continue the tree traversal
    }

    public void outAAttrSpecification(AAttrSpecification node) {
        Object adapter = adaptersToHandleNodes.get(AAttrSpecification.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrSpecification(node);
        }
        super.outAAttrSpecification(node); // to continue the tree traversal
    }

    public void caseAAttrSpecification(AAttrSpecification node) {
        Object adapter = adaptersToHandleNodes.get(AAttrSpecification.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrSpecification(node);
        }
        super.caseAAttrSpecification(node); // to continue the tree traversal
    }

    public void inAForkAnykeyword(AForkAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AForkAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAForkAnykeyword(node);
        }
        super.inAForkAnykeyword(node); // to continue the tree traversal
    }

    public void outAForkAnykeyword(AForkAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AForkAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAForkAnykeyword(node);
        }
        super.outAForkAnykeyword(node); // to continue the tree traversal
    }

    public void caseAForkAnykeyword(AForkAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AForkAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAForkAnykeyword(node);
        }
        super.caseAForkAnykeyword(node); // to continue the tree traversal
    }

    public void inAGoalAnykeyword(AGoalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGoalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGoalAnykeyword(node);
        }
        super.inAGoalAnykeyword(node); // to continue the tree traversal
    }

    public void outAGoalAnykeyword(AGoalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGoalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGoalAnykeyword(node);
        }
        super.outAGoalAnykeyword(node); // to continue the tree traversal
    }

    public void caseAGoalAnykeyword(AGoalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AGoalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGoalAnykeyword(node);
        }
        super.caseAGoalAnykeyword(node); // to continue the tree traversal
    }

    public void inAOftypeAttrDefOp(AOftypeAttrDefOp node) {
        Object adapter = adaptersToHandleNodes.get(AOftypeAttrDefOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOftypeAttrDefOp(node);
        }
        super.inAOftypeAttrDefOp(node); // to continue the tree traversal
    }

    public void outAOftypeAttrDefOp(AOftypeAttrDefOp node) {
        Object adapter = adaptersToHandleNodes.get(AOftypeAttrDefOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOftypeAttrDefOp(node);
        }
        super.outAOftypeAttrDefOp(node); // to continue the tree traversal
    }

    public void caseAOftypeAttrDefOp(AOftypeAttrDefOp node) {
        Object adapter = adaptersToHandleNodes.get(AOftypeAttrDefOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOftypeAttrDefOp(node);
        }
        super.caseAOftypeAttrDefOp(node); // to continue the tree traversal
    }

    public void inAAttrRelationAttrFactList(AAttrRelationAttrFactList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelationAttrFactList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrRelationAttrFactList(node);
        }
        super.inAAttrRelationAttrFactList(node); // to continue the tree traversal
    }

    public void outAAttrRelationAttrFactList(AAttrRelationAttrFactList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelationAttrFactList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrRelationAttrFactList(node);
        }
        super.outAAttrRelationAttrFactList(node); // to continue the tree traversal
    }

    public void caseAAttrRelationAttrFactList(AAttrRelationAttrFactList node) {
        Object adapter = adaptersToHandleNodes.get(AAttrRelationAttrFactList.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrRelationAttrFactList(node);
        }
        super.caseAAttrRelationAttrFactList(node); // to continue the tree traversal
    }

    public void inADecimal(ADecimal node) {
        Object adapter = adaptersToHandleNodes.get(ADecimal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADecimal(node);
        }
        super.inADecimal(node); // to continue the tree traversal
    }

    public void outADecimal(ADecimal node) {
        Object adapter = adaptersToHandleNodes.get(ADecimal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADecimal(node);
        }
        super.outADecimal(node); // to continue the tree traversal
    }

    public void caseADecimal(ADecimal node) {
        Object adapter = adaptersToHandleNodes.get(ADecimal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADecimal(node);
        }
        super.caseADecimal(node); // to continue the tree traversal
    }

    public void inALocalkeywordSqname(ALocalkeywordSqname node) {
        Object adapter = adaptersToHandleNodes.get(ALocalkeywordSqname.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inALocalkeywordSqname(node);
        }
        super.inALocalkeywordSqname(node); // to continue the tree traversal
    }

    public void outALocalkeywordSqname(ALocalkeywordSqname node) {
        Object adapter = adaptersToHandleNodes.get(ALocalkeywordSqname.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outALocalkeywordSqname(node);
        }
        super.outALocalkeywordSqname(node); // to continue the tree traversal
    }

    public void caseALocalkeywordSqname(ALocalkeywordSqname node) {
        Object adapter = adaptersToHandleNodes.get(ALocalkeywordSqname.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseALocalkeywordSqname(node);
        }
        super.caseALocalkeywordSqname(node); // to continue the tree traversal
    }

    public void inADataflowEdge(ADataflowEdge node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowEdge.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADataflowEdge(node);
        }
        super.inADataflowEdge(node); // to continue the tree traversal
    }

    public void outADataflowEdge(ADataflowEdge node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowEdge.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADataflowEdge(node);
        }
        super.outADataflowEdge(node); // to continue the tree traversal
    }

    public void caseADataflowEdge(ADataflowEdge node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowEdge.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADataflowEdge(node);
        }
        super.caseADataflowEdge(node); // to continue the tree traversal
    }

    public void inAPostconditionAnykeyword(APostconditionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APostconditionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPostconditionAnykeyword(node);
        }
        super.inAPostconditionAnykeyword(node); // to continue the tree traversal
    }

    public void outAPostconditionAnykeyword(APostconditionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APostconditionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPostconditionAnykeyword(node);
        }
        super.outAPostconditionAnykeyword(node); // to continue the tree traversal
    }

    public void caseAPostconditionAnykeyword(APostconditionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APostconditionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPostconditionAnykeyword(node);
        }
        super.caseAPostconditionAnykeyword(node); // to continue the tree traversal
    }

    public void inAMergeNode(AMergeNode node) {
        Object adapter = adaptersToHandleNodes.get(AMergeNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMergeNode(node);
        }
        super.inAMergeNode(node); // to continue the tree traversal
    }

    public void outAMergeNode(AMergeNode node) {
        Object adapter = adaptersToHandleNodes.get(AMergeNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMergeNode(node);
        }
        super.outAMergeNode(node); // to continue the tree traversal
    }

    public void caseAMergeNode(AMergeNode node) {
        Object adapter = adaptersToHandleNodes.get(AMergeNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMergeNode(node);
        }
        super.caseAMergeNode(node); // to continue the tree traversal
    }

    public void inAHasvalueAnykeyword(AHasvalueAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AHasvalueAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAHasvalueAnykeyword(node);
        }
        super.inAHasvalueAnykeyword(node); // to continue the tree traversal
    }

    public void outAHasvalueAnykeyword(AHasvalueAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AHasvalueAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAHasvalueAnykeyword(node);
        }
        super.outAHasvalueAnykeyword(node); // to continue the tree traversal
    }

    public void caseAHasvalueAnykeyword(AHasvalueAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AHasvalueAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAHasvalueAnykeyword(node);
        }
        super.caseAHasvalueAnykeyword(node); // to continue the tree traversal
    }

    public void inAFlowstartAnykeyword(AFlowstartAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AFlowstartAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFlowstartAnykeyword(node);
        }
        super.inAFlowstartAnykeyword(node); // to continue the tree traversal
    }

    public void outAFlowstartAnykeyword(AFlowstartAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AFlowstartAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFlowstartAnykeyword(node);
        }
        super.outAFlowstartAnykeyword(node); // to continue the tree traversal
    }

    public void caseAFlowstartAnykeyword(AFlowstartAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AFlowstartAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFlowstartAnykeyword(node);
        }
        super.caseAFlowstartAnykeyword(node); // to continue the tree traversal
    }

    public void inAMoreParamsTermUpdates(AMoreParamsTermUpdates node) {
        Object adapter = adaptersToHandleNodes.get(AMoreParamsTermUpdates.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMoreParamsTermUpdates(node);
        }
        super.inAMoreParamsTermUpdates(node); // to continue the tree traversal
    }

    public void outAMoreParamsTermUpdates(AMoreParamsTermUpdates node) {
        Object adapter = adaptersToHandleNodes.get(AMoreParamsTermUpdates.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMoreParamsTermUpdates(node);
        }
        super.outAMoreParamsTermUpdates(node); // to continue the tree traversal
    }

    public void caseAMoreParamsTermUpdates(AMoreParamsTermUpdates node) {
        Object adapter = adaptersToHandleNodes.get(AMoreParamsTermUpdates.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMoreParamsTermUpdates(node);
        }
        super.caseAMoreParamsTermUpdates(node); // to continue the tree traversal
    }

    public void inASslink(ASslink node) {
        Object adapter = adaptersToHandleNodes.get(ASslink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASslink(node);
        }
        super.inASslink(node); // to continue the tree traversal
    }

    public void outASslink(ASslink node) {
        Object adapter = adaptersToHandleNodes.get(ASslink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASslink(node);
        }
        super.outASslink(node); // to continue the tree traversal
    }

    public void caseASslink(ASslink node) {
        Object adapter = adaptersToHandleNodes.get(ASslink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASslink(node);
        }
        super.caseASslink(node); // to continue the tree traversal
    }

    public void inAComparisonSimple(AComparisonSimple node) {
        Object adapter = adaptersToHandleNodes.get(AComparisonSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAComparisonSimple(node);
        }
        super.inAComparisonSimple(node); // to continue the tree traversal
    }

    public void outAComparisonSimple(AComparisonSimple node) {
        Object adapter = adaptersToHandleNodes.get(AComparisonSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAComparisonSimple(node);
        }
        super.outAComparisonSimple(node); // to continue the tree traversal
    }

    public void caseAComparisonSimple(AComparisonSimple node) {
        Object adapter = adaptersToHandleNodes.get(AComparisonSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAComparisonSimple(node);
        }
        super.caseAComparisonSimple(node); // to continue the tree traversal
    }

    public void inANewTermNewTerm(ANewTermNewTerm node) {
        Object adapter = adaptersToHandleNodes.get(ANewTermNewTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANewTermNewTerm(node);
        }
        super.inANewTermNewTerm(node); // to continue the tree traversal
    }

    public void outANewTermNewTerm(ANewTermNewTerm node) {
        Object adapter = adaptersToHandleNodes.get(ANewTermNewTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANewTermNewTerm(node);
        }
        super.outANewTermNewTerm(node); // to continue the tree traversal
    }

    public void caseANewTermNewTerm(ANewTermNewTerm node) {
        Object adapter = adaptersToHandleNodes.get(ANewTermNewTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANewTermNewTerm(node);
        }
        super.caseANewTermNewTerm(node); // to continue the tree traversal
    }

    public void inADefaultnsPrefixdefinitionlist(ADefaultnsPrefixdefinitionlist node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultnsPrefixdefinitionlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADefaultnsPrefixdefinitionlist(node);
        }
        super.inADefaultnsPrefixdefinitionlist(node); // to continue the tree traversal
    }

    public void outADefaultnsPrefixdefinitionlist(ADefaultnsPrefixdefinitionlist node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultnsPrefixdefinitionlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADefaultnsPrefixdefinitionlist(node);
        }
        super.outADefaultnsPrefixdefinitionlist(node); // to continue the tree traversal
    }

    public void caseADefaultnsPrefixdefinitionlist(ADefaultnsPrefixdefinitionlist node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultnsPrefixdefinitionlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADefaultnsPrefixdefinitionlist(node);
        }
        super.caseADefaultnsPrefixdefinitionlist(node); // to continue the tree traversal
    }

    public void inAImpliestypeAttrDefOp(AImpliestypeAttrDefOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliestypeAttrDefOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImpliestypeAttrDefOp(node);
        }
        super.inAImpliestypeAttrDefOp(node); // to continue the tree traversal
    }

    public void outAImpliestypeAttrDefOp(AImpliestypeAttrDefOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliestypeAttrDefOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImpliestypeAttrDefOp(node);
        }
        super.outAImpliestypeAttrDefOp(node); // to continue the tree traversal
    }

    public void caseAImpliestypeAttrDefOp(AImpliestypeAttrDefOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliestypeAttrDefOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImpliestypeAttrDefOp(node);
        }
        super.caseAImpliestypeAttrDefOp(node); // to continue the tree traversal
    }

    public void inAStateSignature(AStateSignature node) {
        Object adapter = adaptersToHandleNodes.get(AStateSignature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAStateSignature(node);
        }
        super.inAStateSignature(node); // to continue the tree traversal
    }

    public void outAStateSignature(AStateSignature node) {
        Object adapter = adaptersToHandleNodes.get(AStateSignature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAStateSignature(node);
        }
        super.outAStateSignature(node); // to continue the tree traversal
    }

    public void caseAStateSignature(AStateSignature node) {
        Object adapter = adaptersToHandleNodes.get(AStateSignature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAStateSignature(node);
        }
        super.caseAStateSignature(node); // to continue the tree traversal
    }

    public void inAConjunctionDisjunction(AConjunctionDisjunction node) {
        Object adapter = adaptersToHandleNodes.get(AConjunctionDisjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConjunctionDisjunction(node);
        }
        super.inAConjunctionDisjunction(node); // to continue the tree traversal
    }

    public void outAConjunctionDisjunction(AConjunctionDisjunction node) {
        Object adapter = adaptersToHandleNodes.get(AConjunctionDisjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConjunctionDisjunction(node);
        }
        super.outAConjunctionDisjunction(node); // to continue the tree traversal
    }

    public void caseAConjunctionDisjunction(AConjunctionDisjunction node) {
        Object adapter = adaptersToHandleNodes.get(AConjunctionDisjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConjunctionDisjunction(node);
        }
        super.caseAConjunctionDisjunction(node); // to continue the tree traversal
    }

    public void inACashewWorkflow(ACashewWorkflow node) {
        Object adapter = adaptersToHandleNodes.get(ACashewWorkflow.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewWorkflow(node);
        }
        super.inACashewWorkflow(node); // to continue the tree traversal
    }

    public void outACashewWorkflow(ACashewWorkflow node) {
        Object adapter = adaptersToHandleNodes.get(ACashewWorkflow.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewWorkflow(node);
        }
        super.outACashewWorkflow(node); // to continue the tree traversal
    }

    public void caseACashewWorkflow(ACashewWorkflow node) {
        Object adapter = adaptersToHandleNodes.get(ACashewWorkflow.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewWorkflow(node);
        }
        super.caseACashewWorkflow(node); // to continue the tree traversal
    }

    public void inAVarTerm(AVarTerm node) {
        Object adapter = adaptersToHandleNodes.get(AVarTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAVarTerm(node);
        }
        super.inAVarTerm(node); // to continue the tree traversal
    }

    public void outAVarTerm(AVarTerm node) {
        Object adapter = adaptersToHandleNodes.get(AVarTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAVarTerm(node);
        }
        super.outAVarTerm(node); // to continue the tree traversal
    }

    public void caseAVarTerm(AVarTerm node) {
        Object adapter = adaptersToHandleNodes.get(AVarTerm.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAVarTerm(node);
        }
        super.caseAVarTerm(node); // to continue the tree traversal
    }

    public void inAAtomPerformSendAtomPerformAlt(AAtomPerformSendAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformSendAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAtomPerformSendAtomPerformAlt(node);
        }
        super.inAAtomPerformSendAtomPerformAlt(node); // to continue the tree traversal
    }

    public void outAAtomPerformSendAtomPerformAlt(AAtomPerformSendAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformSendAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAtomPerformSendAtomPerformAlt(node);
        }
        super.outAAtomPerformSendAtomPerformAlt(node); // to continue the tree traversal
    }

    public void caseAAtomPerformSendAtomPerformAlt(AAtomPerformSendAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformSendAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAtomPerformSendAtomPerformAlt(node);
        }
        super.caseAAtomPerformSendAtomPerformAlt(node); // to continue the tree traversal
    }

    public void inAAtomPerformReceiveAtomPerformAlt(AAtomPerformReceiveAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformReceiveAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAtomPerformReceiveAtomPerformAlt(node);
        }
        super.inAAtomPerformReceiveAtomPerformAlt(node); // to continue the tree traversal
    }

    public void outAAtomPerformReceiveAtomPerformAlt(AAtomPerformReceiveAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformReceiveAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAtomPerformReceiveAtomPerformAlt(node);
        }
        super.outAAtomPerformReceiveAtomPerformAlt(node); // to continue the tree traversal
    }

    public void caseAAtomPerformReceiveAtomPerformAlt(AAtomPerformReceiveAtomPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AAtomPerformReceiveAtomPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAtomPerformReceiveAtomPerformAlt(node);
        }
        super.caseAAtomPerformReceiveAtomPerformAlt(node); // to continue the tree traversal
    }

    public void inAMorechoices(AMorechoices node) {
        Object adapter = adaptersToHandleNodes.get(AMorechoices.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMorechoices(node);
        }
        super.inAMorechoices(node); // to continue the tree traversal
    }

    public void outAMorechoices(AMorechoices node) {
        Object adapter = adaptersToHandleNodes.get(AMorechoices.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMorechoices(node);
        }
        super.outAMorechoices(node); // to continue the tree traversal
    }

    public void caseAMorechoices(AMorechoices node) {
        Object adapter = adaptersToHandleNodes.get(AMorechoices.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMorechoices(node);
        }
        super.caseAMorechoices(node); // to continue the tree traversal
    }

    public void inAMediatorDefinition(AMediatorDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AMediatorDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMediatorDefinition(node);
        }
        super.inAMediatorDefinition(node); // to continue the tree traversal
    }

    public void outAMediatorDefinition(AMediatorDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AMediatorDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMediatorDefinition(node);
        }
        super.outAMediatorDefinition(node); // to continue the tree traversal
    }

    public void caseAMediatorDefinition(AMediatorDefinition node) {
        Object adapter = adaptersToHandleNodes.get(AMediatorDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMediatorDefinition(node);
        }
        super.caseAMediatorDefinition(node); // to continue the tree traversal
    }

    public void inAEquivalentAnykeyword(AEquivalentAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEquivalentAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEquivalentAnykeyword(node);
        }
        super.inAEquivalentAnykeyword(node); // to continue the tree traversal
    }

    public void outAEquivalentAnykeyword(AEquivalentAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEquivalentAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEquivalentAnykeyword(node);
        }
        super.outAEquivalentAnykeyword(node); // to continue the tree traversal
    }

    public void caseAEquivalentAnykeyword(AEquivalentAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEquivalentAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEquivalentAnykeyword(node);
        }
        super.caseAEquivalentAnykeyword(node); // to continue the tree traversal
    }

    public void inAWhileAnykeyword(AWhileAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWhileAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWhileAnykeyword(node);
        }
        super.inAWhileAnykeyword(node); // to continue the tree traversal
    }

    public void outAWhileAnykeyword(AWhileAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWhileAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWhileAnykeyword(node);
        }
        super.outAWhileAnykeyword(node); // to continue the tree traversal
    }

    public void caseAWhileAnykeyword(AWhileAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWhileAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWhileAnykeyword(node);
        }
        super.caseAWhileAnykeyword(node); // to continue the tree traversal
    }

    public void inAReflexiveAnykeyword(AReflexiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AReflexiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAReflexiveAnykeyword(node);
        }
        super.inAReflexiveAnykeyword(node); // to continue the tree traversal
    }

    public void outAReflexiveAnykeyword(AReflexiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AReflexiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAReflexiveAnykeyword(node);
        }
        super.outAReflexiveAnykeyword(node); // to continue the tree traversal
    }

    public void caseAReflexiveAnykeyword(AReflexiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AReflexiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAReflexiveAnykeyword(node);
        }
        super.caseAReflexiveAnykeyword(node); // to continue the tree traversal
    }

    public void inAIriId(AIriId node) {
        Object adapter = adaptersToHandleNodes.get(AIriId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIriId(node);
        }
        super.inAIriId(node); // to continue the tree traversal
    }

    public void outAIriId(AIriId node) {
        Object adapter = adaptersToHandleNodes.get(AIriId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIriId(node);
        }
        super.outAIriId(node); // to continue the tree traversal
    }

    public void caseAIriId(AIriId node) {
        Object adapter = adaptersToHandleNodes.get(AIriId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIriId(node);
        }
        super.caseAIriId(node); // to continue the tree traversal
    }

    public void inAIrilistGroundingInfo(AIrilistGroundingInfo node) {
        Object adapter = adaptersToHandleNodes.get(AIrilistGroundingInfo.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIrilistGroundingInfo(node);
        }
        super.inAIrilistGroundingInfo(node); // to continue the tree traversal
    }

    public void outAIrilistGroundingInfo(AIrilistGroundingInfo node) {
        Object adapter = adaptersToHandleNodes.get(AIrilistGroundingInfo.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIrilistGroundingInfo(node);
        }
        super.outAIrilistGroundingInfo(node); // to continue the tree traversal
    }

    public void caseAIrilistGroundingInfo(AIrilistGroundingInfo node) {
        Object adapter = adaptersToHandleNodes.get(AIrilistGroundingInfo.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIrilistGroundingInfo(node);
        }
        super.caseAIrilistGroundingInfo(node); // to continue the tree traversal
    }

    public void inAVariables(AVariables node) {
        Object adapter = adaptersToHandleNodes.get(AVariables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAVariables(node);
        }
        super.inAVariables(node); // to continue the tree traversal
    }

    public void outAVariables(AVariables node) {
        Object adapter = adaptersToHandleNodes.get(AVariables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAVariables(node);
        }
        super.outAVariables(node); // to continue the tree traversal
    }

    public void caseAVariables(AVariables node) {
        Object adapter = adaptersToHandleNodes.get(AVariables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAVariables(node);
        }
        super.caseAVariables(node); // to continue the tree traversal
    }

    public void inAAddModifier(AAddModifier node) {
        Object adapter = adaptersToHandleNodes.get(AAddModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAddModifier(node);
        }
        super.inAAddModifier(node); // to continue the tree traversal
    }

    public void outAAddModifier(AAddModifier node) {
        Object adapter = adaptersToHandleNodes.get(AAddModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAddModifier(node);
        }
        super.outAAddModifier(node); // to continue the tree traversal
    }

    public void caseAAddModifier(AAddModifier node) {
        Object adapter = adaptersToHandleNodes.get(AAddModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAddModifier(node);
        }
        super.caseAAddModifier(node); // to continue the tree traversal
    }

    public void inAOrchInvokeServiceOrchPerformAlt(AOrchInvokeServiceOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchInvokeServiceOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchInvokeServiceOrchPerformAlt(node);
        }
        super.inAOrchInvokeServiceOrchPerformAlt(node); // to continue the tree traversal
    }

    public void outAOrchInvokeServiceOrchPerformAlt(AOrchInvokeServiceOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchInvokeServiceOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchInvokeServiceOrchPerformAlt(node);
        }
        super.outAOrchInvokeServiceOrchPerformAlt(node); // to continue the tree traversal
    }

    public void caseAOrchInvokeServiceOrchPerformAlt(AOrchInvokeServiceOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchInvokeServiceOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchInvokeServiceOrchPerformAlt(node);
        }
        super.caseAOrchInvokeServiceOrchPerformAlt(node); // to continue the tree traversal
    }

    public void inAWwmediator(AWwmediator node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWwmediator(node);
        }
        super.inAWwmediator(node); // to continue the tree traversal
    }

    public void outAWwmediator(AWwmediator node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWwmediator(node);
        }
        super.outAWwmediator(node); // to continue the tree traversal
    }

    public void caseAWwmediator(AWwmediator node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWwmediator(node);
        }
        super.caseAWwmediator(node); // to continue the tree traversal
    }

    public void inAGteCompOp(AGteCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AGteCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGteCompOp(node);
        }
        super.inAGteCompOp(node); // to continue the tree traversal
    }

    public void outAGteCompOp(AGteCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AGteCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGteCompOp(node);
        }
        super.outAGteCompOp(node); // to continue the tree traversal
    }

    public void caseAGteCompOp(AGteCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AGteCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGteCompOp(node);
        }
        super.caseAGteCompOp(node); // to continue the tree traversal
    }

    public void inAAdlink(AAdlink node) {
        Object adapter = adaptersToHandleNodes.get(AAdlink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAdlink(node);
        }
        super.inAAdlink(node); // to continue the tree traversal
    }

    public void outAAdlink(AAdlink node) {
        Object adapter = adaptersToHandleNodes.get(AAdlink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAdlink(node);
        }
        super.outAAdlink(node); // to continue the tree traversal
    }

    public void caseAAdlink(AAdlink node) {
        Object adapter = adaptersToHandleNodes.get(AAdlink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAdlink(node);
        }
        super.caseAAdlink(node); // to continue the tree traversal
    }

    public void inAApplieschoreographyAnykeyword(AApplieschoreographyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AApplieschoreographyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAApplieschoreographyAnykeyword(node);
        }
        super.inAApplieschoreographyAnykeyword(node); // to continue the tree traversal
    }

    public void outAApplieschoreographyAnykeyword(AApplieschoreographyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AApplieschoreographyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAApplieschoreographyAnykeyword(node);
        }
        super.outAApplieschoreographyAnykeyword(node); // to continue the tree traversal
    }

    public void caseAApplieschoreographyAnykeyword(AApplieschoreographyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AApplieschoreographyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAApplieschoreographyAnykeyword(node);
        }
        super.caseAApplieschoreographyAnykeyword(node); // to continue the tree traversal
    }

    public void inAInterfaceAnykeyword(AInterfaceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterfaceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInterfaceAnykeyword(node);
        }
        super.inAInterfaceAnykeyword(node); // to continue the tree traversal
    }

    public void outAInterfaceAnykeyword(AInterfaceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterfaceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInterfaceAnykeyword(node);
        }
        super.outAInterfaceAnykeyword(node); // to continue the tree traversal
    }

    public void caseAInterfaceAnykeyword(AInterfaceAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInterfaceAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInterfaceAnykeyword(node);
        }
        super.caseAInterfaceAnykeyword(node); // to continue the tree traversal
    }

    public void inAComparison(AComparison node) {
        Object adapter = adaptersToHandleNodes.get(AComparison.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAComparison(node);
        }
        super.inAComparison(node); // to continue the tree traversal
    }

    public void outAComparison(AComparison node) {
        Object adapter = adaptersToHandleNodes.get(AComparison.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAComparison(node);
        }
        super.outAComparison(node); // to continue the tree traversal
    }

    public void caseAComparison(AComparison node) {
        Object adapter = adaptersToHandleNodes.get(AComparison.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAComparison(node);
        }
        super.caseAComparison(node); // to continue the tree traversal
    }

    public void inAAttrFact(AAttrFact node) {
        Object adapter = adaptersToHandleNodes.get(AAttrFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrFact(node);
        }
        super.inAAttrFact(node); // to continue the tree traversal
    }

    public void outAAttrFact(AAttrFact node) {
        Object adapter = adaptersToHandleNodes.get(AAttrFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrFact(node);
        }
        super.outAAttrFact(node); // to continue the tree traversal
    }

    public void caseAAttrFact(AAttrFact node) {
        Object adapter = adaptersToHandleNodes.get(AAttrFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrFact(node);
        }
        super.caseAAttrFact(node); // to continue the tree traversal
    }

    public void inAChorCashewChoreographyFormalism(AChorCashewChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorCashewChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAChorCashewChoreographyFormalism(node);
        }
        super.inAChorCashewChoreographyFormalism(node); // to continue the tree traversal
    }

    public void outAChorCashewChoreographyFormalism(AChorCashewChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorCashewChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAChorCashewChoreographyFormalism(node);
        }
        super.outAChorCashewChoreographyFormalism(node); // to continue the tree traversal
    }

    public void caseAChorCashewChoreographyFormalism(AChorCashewChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorCashewChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAChorCashewChoreographyFormalism(node);
        }
        super.caseAChorCashewChoreographyFormalism(node); // to continue the tree traversal
    }

    public void inAMoreids(AMoreids node) {
        Object adapter = adaptersToHandleNodes.get(AMoreids.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMoreids(node);
        }
        super.inAMoreids(node); // to continue the tree traversal
    }

    public void outAMoreids(AMoreids node) {
        Object adapter = adaptersToHandleNodes.get(AMoreids.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMoreids(node);
        }
        super.outAMoreids(node); // to continue the tree traversal
    }

    public void caseAMoreids(AMoreids node) {
        Object adapter = adaptersToHandleNodes.get(AMoreids.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMoreids(node);
        }
        super.caseAMoreids(node); // to continue the tree traversal
    }

    public void inAIriIri(AIriIri node) {
        Object adapter = adaptersToHandleNodes.get(AIriIri.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIriIri(node);
        }
        super.inAIriIri(node); // to continue the tree traversal
    }

    public void outAIriIri(AIriIri node) {
        Object adapter = adaptersToHandleNodes.get(AIriIri.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIriIri(node);
        }
        super.outAIriIri(node); // to continue the tree traversal
    }

    public void caseAIriIri(AIriIri node) {
        Object adapter = adaptersToHandleNodes.get(AIriIri.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIriIri(node);
        }
        super.caseAIriIri(node); // to continue the tree traversal
    }

    public void inAGgmediator(AGgmediator node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGgmediator(node);
        }
        super.inAGgmediator(node); // to continue the tree traversal
    }

    public void outAGgmediator(AGgmediator node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGgmediator(node);
        }
        super.outAGgmediator(node); // to continue the tree traversal
    }

    public void caseAGgmediator(AGgmediator node) {
        Object adapter = adaptersToHandleNodes.get(AGgmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGgmediator(node);
        }
        super.caseAGgmediator(node); // to continue the tree traversal
    }

    public void inAElseAnykeyword(AElseAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AElseAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAElseAnykeyword(node);
        }
        super.inAElseAnykeyword(node); // to continue the tree traversal
    }

    public void outAElseAnykeyword(AElseAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AElseAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAElseAnykeyword(node);
        }
        super.outAElseAnykeyword(node); // to continue the tree traversal
    }

    public void caseAElseAnykeyword(AElseAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AElseAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAElseAnykeyword(node);
        }
        super.caseAElseAnykeyword(node); // to continue the tree traversal
    }

    public void inADisjunctionExpr(ADisjunctionExpr node) {
        Object adapter = adaptersToHandleNodes.get(ADisjunctionExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADisjunctionExpr(node);
        }
        super.inADisjunctionExpr(node); // to continue the tree traversal
    }

    public void outADisjunctionExpr(ADisjunctionExpr node) {
        Object adapter = adaptersToHandleNodes.get(ADisjunctionExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADisjunctionExpr(node);
        }
        super.outADisjunctionExpr(node); // to continue the tree traversal
    }

    public void caseADisjunctionExpr(ADisjunctionExpr node) {
        Object adapter = adaptersToHandleNodes.get(ADisjunctionExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADisjunctionExpr(node);
        }
        super.caseADisjunctionExpr(node); // to continue the tree traversal
    }

    public void inADatatypeValue(ADatatypeValue node) {
        Object adapter = adaptersToHandleNodes.get(ADatatypeValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADatatypeValue(node);
        }
        super.inADatatypeValue(node); // to continue the tree traversal
    }

    public void outADatatypeValue(ADatatypeValue node) {
        Object adapter = adaptersToHandleNodes.get(ADatatypeValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADatatypeValue(node);
        }
        super.outADatatypeValue(node); // to continue the tree traversal
    }

    public void caseADatatypeValue(ADatatypeValue node) {
        Object adapter = adaptersToHandleNodes.get(ADatatypeValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADatatypeValue(node);
        }
        super.caseADatatypeValue(node); // to continue the tree traversal
    }

    public void inAMultiplicationMultVal(AMultiplicationMultVal node) {
        Object adapter = adaptersToHandleNodes.get(AMultiplicationMultVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMultiplicationMultVal(node);
        }
        super.inAMultiplicationMultVal(node); // to continue the tree traversal
    }

    public void outAMultiplicationMultVal(AMultiplicationMultVal node) {
        Object adapter = adaptersToHandleNodes.get(AMultiplicationMultVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMultiplicationMultVal(node);
        }
        super.outAMultiplicationMultVal(node); // to continue the tree traversal
    }

    public void caseAMultiplicationMultVal(AMultiplicationMultVal node) {
        Object adapter = adaptersToHandleNodes.get(AMultiplicationMultVal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMultiplicationMultVal(node);
        }
        super.caseAMultiplicationMultVal(node); // to continue the tree traversal
    }

    public void inAWgmediatorAnykeyword(AWgmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWgmediatorAnykeyword(node);
        }
        super.inAWgmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAWgmediatorAnykeyword(AWgmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWgmediatorAnykeyword(node);
        }
        super.outAWgmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAWgmediatorAnykeyword(AWgmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWgmediatorAnykeyword(node);
        }
        super.caseAWgmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inAOrchPerformSendOrchPerformAlt(AOrchPerformSendOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformSendOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchPerformSendOrchPerformAlt(node);
        }
        super.inAOrchPerformSendOrchPerformAlt(node); // to continue the tree traversal
    }

    public void outAOrchPerformSendOrchPerformAlt(AOrchPerformSendOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformSendOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchPerformSendOrchPerformAlt(node);
        }
        super.outAOrchPerformSendOrchPerformAlt(node); // to continue the tree traversal
    }

    public void caseAOrchPerformSendOrchPerformAlt(AOrchPerformSendOrchPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(AOrchPerformSendOrchPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchPerformSendOrchPerformAlt(node);
        }
        super.caseAOrchPerformSendOrchPerformAlt(node); // to continue the tree traversal
    }

    public void inANegatedSubexpr(ANegatedSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(ANegatedSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANegatedSubexpr(node);
        }
        super.inANegatedSubexpr(node); // to continue the tree traversal
    }

    public void outANegatedSubexpr(ANegatedSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(ANegatedSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANegatedSubexpr(node);
        }
        super.outANegatedSubexpr(node); // to continue the tree traversal
    }

    public void caseANegatedSubexpr(ANegatedSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(ANegatedSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANegatedSubexpr(node);
        }
        super.caseANegatedSubexpr(node); // to continue the tree traversal
    }

    public void inAConceptMoleculeNonpreferredMolecule(AConceptMoleculeNonpreferredMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AConceptMoleculeNonpreferredMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConceptMoleculeNonpreferredMolecule(node);
        }
        super.inAConceptMoleculeNonpreferredMolecule(node); // to continue the tree traversal
    }

    public void outAConceptMoleculeNonpreferredMolecule(AConceptMoleculeNonpreferredMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AConceptMoleculeNonpreferredMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConceptMoleculeNonpreferredMolecule(node);
        }
        super.outAConceptMoleculeNonpreferredMolecule(node); // to continue the tree traversal
    }

    public void caseAConceptMoleculeNonpreferredMolecule(AConceptMoleculeNonpreferredMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AConceptMoleculeNonpreferredMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConceptMoleculeNonpreferredMolecule(node);
        }
        super.caseAConceptMoleculeNonpreferredMolecule(node); // to continue the tree traversal
    }

    public void inAConcept(AConcept node) {
        Object adapter = adaptersToHandleNodes.get(AConcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConcept(node);
        }
        super.inAConcept(node); // to continue the tree traversal
    }

    public void outAConcept(AConcept node) {
        Object adapter = adaptersToHandleNodes.get(AConcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConcept(node);
        }
        super.outAConcept(node); // to continue the tree traversal
    }

    public void caseAConcept(AConcept node) {
        Object adapter = adaptersToHandleNodes.get(AConcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConcept(node);
        }
        super.caseAConcept(node); // to continue the tree traversal
    }

    public void inAJoinNode(AJoinNode node) {
        Object adapter = adaptersToHandleNodes.get(AJoinNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAJoinNode(node);
        }
        super.inAJoinNode(node); // to continue the tree traversal
    }

    public void outAJoinNode(AJoinNode node) {
        Object adapter = adaptersToHandleNodes.get(AJoinNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAJoinNode(node);
        }
        super.outAJoinNode(node); // to continue the tree traversal
    }

    public void caseAJoinNode(AJoinNode node) {
        Object adapter = adaptersToHandleNodes.get(AJoinNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAJoinNode(node);
        }
        super.caseAJoinNode(node); // to continue the tree traversal
    }

    public void inACapability(ACapability node) {
        Object adapter = adaptersToHandleNodes.get(ACapability.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACapability(node);
        }
        super.inACapability(node); // to continue the tree traversal
    }

    public void outACapability(ACapability node) {
        Object adapter = adaptersToHandleNodes.get(ACapability.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACapability(node);
        }
        super.outACapability(node); // to continue the tree traversal
    }

    public void caseACapability(ACapability node) {
        Object adapter = adaptersToHandleNodes.get(ACapability.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACapability(node);
        }
        super.caseACapability(node); // to continue the tree traversal
    }

    public void inAConceptAnykeyword(AConceptAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConceptAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConceptAnykeyword(node);
        }
        super.inAConceptAnykeyword(node); // to continue the tree traversal
    }

    public void outAConceptAnykeyword(AConceptAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConceptAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConceptAnykeyword(node);
        }
        super.outAConceptAnykeyword(node); // to continue the tree traversal
    }

    public void caseAConceptAnykeyword(AConceptAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConceptAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConceptAnykeyword(node);
        }
        super.caseAConceptAnykeyword(node); // to continue the tree traversal
    }

    public void inAChorAsmChoreographyFormalism(AChorAsmChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorAsmChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAChorAsmChoreographyFormalism(node);
        }
        super.inAChorAsmChoreographyFormalism(node); // to continue the tree traversal
    }

    public void outAChorAsmChoreographyFormalism(AChorAsmChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorAsmChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAChorAsmChoreographyFormalism(node);
        }
        super.outAChorAsmChoreographyFormalism(node); // to continue the tree traversal
    }

    public void caseAChorAsmChoreographyFormalism(AChorAsmChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorAsmChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAChorAsmChoreographyFormalism(node);
        }
        super.caseAChorAsmChoreographyFormalism(node); // to continue the tree traversal
    }

    public void inAMediatorAnykeyword(AMediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMediatorAnykeyword(node);
        }
        super.inAMediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAMediatorAnykeyword(AMediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMediatorAnykeyword(node);
        }
        super.outAMediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAMediatorAnykeyword(AMediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMediatorAnykeyword(node);
        }
        super.caseAMediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inAChooseRule(AChooseRule node) {
        Object adapter = adaptersToHandleNodes.get(AChooseRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAChooseRule(node);
        }
        super.inAChooseRule(node); // to continue the tree traversal
    }

    public void outAChooseRule(AChooseRule node) {
        Object adapter = adaptersToHandleNodes.get(AChooseRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAChooseRule(node);
        }
        super.outAChooseRule(node); // to continue the tree traversal
    }

    public void caseAChooseRule(AChooseRule node) {
        Object adapter = adaptersToHandleNodes.get(AChooseRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAChooseRule(node);
        }
        super.caseAChooseRule(node); // to continue the tree traversal
    }

    public void inASingleInterfaces(ASingleInterfaces node) {
        Object adapter = adaptersToHandleNodes.get(ASingleInterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASingleInterfaces(node);
        }
        super.inASingleInterfaces(node); // to continue the tree traversal
    }

    public void outASingleInterfaces(ASingleInterfaces node) {
        Object adapter = adaptersToHandleNodes.get(ASingleInterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASingleInterfaces(node);
        }
        super.outASingleInterfaces(node); // to continue the tree traversal
    }

    public void caseASingleInterfaces(ASingleInterfaces node) {
        Object adapter = adaptersToHandleNodes.get(ASingleInterfaces.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASingleInterfaces(node);
        }
        super.caseASingleInterfaces(node); // to continue the tree traversal
    }

    public void inAReceiveAnykeyword(AReceiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AReceiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAReceiveAnykeyword(node);
        }
        super.inAReceiveAnykeyword(node); // to continue the tree traversal
    }

    public void outAReceiveAnykeyword(AReceiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AReceiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAReceiveAnykeyword(node);
        }
        super.outAReceiveAnykeyword(node); // to continue the tree traversal
    }

    public void caseAReceiveAnykeyword(AReceiveAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AReceiveAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAReceiveAnykeyword(node);
        }
        super.caseAReceiveAnykeyword(node); // to continue the tree traversal
    }

    public void inADefaultPrefixdefinition(ADefaultPrefixdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultPrefixdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADefaultPrefixdefinition(node);
        }
        super.inADefaultPrefixdefinition(node); // to continue the tree traversal
    }

    public void outADefaultPrefixdefinition(ADefaultPrefixdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultPrefixdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADefaultPrefixdefinition(node);
        }
        super.outADefaultPrefixdefinition(node); // to continue the tree traversal
    }

    public void caseADefaultPrefixdefinition(ADefaultPrefixdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ADefaultPrefixdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADefaultPrefixdefinition(node);
        }
        super.caseADefaultPrefixdefinition(node); // to continue the tree traversal
    }

    public void inACashewPerformSendCashewPerformAlt(ACashewPerformSendCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformSendCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewPerformSendCashewPerformAlt(node);
        }
        super.inACashewPerformSendCashewPerformAlt(node); // to continue the tree traversal
    }

    public void outACashewPerformSendCashewPerformAlt(ACashewPerformSendCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformSendCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewPerformSendCashewPerformAlt(node);
        }
        super.outACashewPerformSendCashewPerformAlt(node); // to continue the tree traversal
    }

    public void caseACashewPerformSendCashewPerformAlt(ACashewPerformSendCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformSendCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewPerformSendCashewPerformAlt(node);
        }
        super.caseACashewPerformSendCashewPerformAlt(node); // to continue the tree traversal
    }

    public void inAOrchAdOrchestrationFormalism(AOrchAdOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchAdOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchAdOrchestrationFormalism(node);
        }
        super.inAOrchAdOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void outAOrchAdOrchestrationFormalism(AOrchAdOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchAdOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchAdOrchestrationFormalism(node);
        }
        super.outAOrchAdOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void caseAOrchAdOrchestrationFormalism(AOrchAdOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchAdOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchAdOrchestrationFormalism(node);
        }
        super.caseAOrchAdOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void inAAxiom(AAxiom node) {
        Object adapter = adaptersToHandleNodes.get(AAxiom.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAxiom(node);
        }
        super.inAAxiom(node); // to continue the tree traversal
    }

    public void outAAxiom(AAxiom node) {
        Object adapter = adaptersToHandleNodes.get(AAxiom.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAxiom(node);
        }
        super.outAAxiom(node); // to continue the tree traversal
    }

    public void caseAAxiom(AAxiom node) {
        Object adapter = adaptersToHandleNodes.get(AAxiom.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAxiom(node);
        }
        super.caseAAxiom(node); // to continue the tree traversal
    }

    public void inANfp(ANfp node) {
        Object adapter = adaptersToHandleNodes.get(ANfp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANfp(node);
        }
        super.inANfp(node); // to continue the tree traversal
    }

    public void outANfp(ANfp node) {
        Object adapter = adaptersToHandleNodes.get(ANfp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANfp(node);
        }
        super.outANfp(node); // to continue the tree traversal
    }

    public void caseANfp(ANfp node) {
        Object adapter = adaptersToHandleNodes.get(ANfp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANfp(node);
        }
        super.caseANfp(node); // to continue the tree traversal
    }

    public void inAEndnfpAnykeyword(AEndnfpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEndnfpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEndnfpAnykeyword(node);
        }
        super.inAEndnfpAnykeyword(node); // to continue the tree traversal
    }

    public void outAEndnfpAnykeyword(AEndnfpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEndnfpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEndnfpAnykeyword(node);
        }
        super.outAEndnfpAnykeyword(node); // to continue the tree traversal
    }

    public void caseAEndnfpAnykeyword(AEndnfpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEndnfpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEndnfpAnykeyword(node);
        }
        super.caseAEndnfpAnykeyword(node); // to continue the tree traversal
    }

    public void inAImpliesImplyOp(AImpliesImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliesImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImpliesImplyOp(node);
        }
        super.inAImpliesImplyOp(node); // to continue the tree traversal
    }

    public void outAImpliesImplyOp(AImpliesImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliesImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImpliesImplyOp(node);
        }
        super.outAImpliesImplyOp(node); // to continue the tree traversal
    }

    public void caseAImpliesImplyOp(AImpliesImplyOp node) {
        Object adapter = adaptersToHandleNodes.get(AImpliesImplyOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImpliesImplyOp(node);
        }
        super.caseAImpliesImplyOp(node); // to continue the tree traversal
    }

    public void inATermTermlist(ATermTermlist node) {
        Object adapter = adaptersToHandleNodes.get(ATermTermlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATermTermlist(node);
        }
        super.inATermTermlist(node); // to continue the tree traversal
    }

    public void outATermTermlist(ATermTermlist node) {
        Object adapter = adaptersToHandleNodes.get(ATermTermlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATermTermlist(node);
        }
        super.outATermTermlist(node); // to continue the tree traversal
    }

    public void caseATermTermlist(ATermTermlist node) {
        Object adapter = adaptersToHandleNodes.get(ATermTermlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATermTermlist(node);
        }
        super.caseATermTermlist(node); // to continue the tree traversal
    }

    public void inAFactMoleculeFact(AFactMoleculeFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactMoleculeFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFactMoleculeFact(node);
        }
        super.inAFactMoleculeFact(node); // to continue the tree traversal
    }

    public void outAFactMoleculeFact(AFactMoleculeFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactMoleculeFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFactMoleculeFact(node);
        }
        super.outAFactMoleculeFact(node); // to continue the tree traversal
    }

    public void caseAFactMoleculeFact(AFactMoleculeFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactMoleculeFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFactMoleculeFact(node);
        }
        super.caseAFactMoleculeFact(node); // to continue the tree traversal
    }

    public void inAGoal(AGoal node) {
        Object adapter = adaptersToHandleNodes.get(AGoal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGoal(node);
        }
        super.inAGoal(node); // to continue the tree traversal
    }

    public void outAGoal(AGoal node) {
        Object adapter = adaptersToHandleNodes.get(AGoal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGoal(node);
        }
        super.outAGoal(node); // to continue the tree traversal
    }

    public void caseAGoal(AGoal node) {
        Object adapter = adaptersToHandleNodes.get(AGoal.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGoal(node);
        }
        super.caseAGoal(node); // to continue the tree traversal
    }

    public void inAAttrDefAttrRelation(AAttrDefAttrRelation node) {
        Object adapter = adaptersToHandleNodes.get(AAttrDefAttrRelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttrDefAttrRelation(node);
        }
        super.inAAttrDefAttrRelation(node); // to continue the tree traversal
    }

    public void outAAttrDefAttrRelation(AAttrDefAttrRelation node) {
        Object adapter = adaptersToHandleNodes.get(AAttrDefAttrRelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttrDefAttrRelation(node);
        }
        super.outAAttrDefAttrRelation(node); // to continue the tree traversal
    }

    public void caseAAttrDefAttrRelation(AAttrDefAttrRelation node) {
        Object adapter = adaptersToHandleNodes.get(AAttrDefAttrRelation.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttrDefAttrRelation(node);
        }
        super.caseAAttrDefAttrRelation(node); // to continue the tree traversal
    }

    public void inATargetAnykeyword(ATargetAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ATargetAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATargetAnykeyword(node);
        }
        super.inATargetAnykeyword(node); // to continue the tree traversal
    }

    public void outATargetAnykeyword(ATargetAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ATargetAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATargetAnykeyword(node);
        }
        super.outATargetAnykeyword(node); // to continue the tree traversal
    }

    public void caseATargetAnykeyword(ATargetAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ATargetAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATargetAnykeyword(node);
        }
        super.caseATargetAnykeyword(node); // to continue the tree traversal
    }

    public void inAInverseAttributefeature(AInverseAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(AInverseAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInverseAttributefeature(node);
        }
        super.inAInverseAttributefeature(node); // to continue the tree traversal
    }

    public void outAInverseAttributefeature(AInverseAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(AInverseAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInverseAttributefeature(node);
        }
        super.outAInverseAttributefeature(node); // to continue the tree traversal
    }

    public void caseAInverseAttributefeature(AInverseAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(AInverseAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInverseAttributefeature(node);
        }
        super.caseAInverseAttributefeature(node); // to continue the tree traversal
    }

    public void inAOomediatorNode(AOomediatorNode node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOomediatorNode(node);
        }
        super.inAOomediatorNode(node); // to continue the tree traversal
    }

    public void outAOomediatorNode(AOomediatorNode node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOomediatorNode(node);
        }
        super.outAOomediatorNode(node); // to continue the tree traversal
    }

    public void caseAOomediatorNode(AOomediatorNode node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOomediatorNode(node);
        }
        super.caseAOomediatorNode(node); // to continue the tree traversal
    }

    public void inAOomediatorMediator(AOomediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOomediatorMediator(node);
        }
        super.inAOomediatorMediator(node); // to continue the tree traversal
    }

    public void outAOomediatorMediator(AOomediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOomediatorMediator(node);
        }
        super.outAOomediatorMediator(node); // to continue the tree traversal
    }

    public void caseAOomediatorMediator(AOomediatorMediator node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorMediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOomediatorMediator(node);
        }
        super.caseAOomediatorMediator(node); // to continue the tree traversal
    }

    public void inAChoreographyAnykeyword(AChoreographyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AChoreographyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAChoreographyAnykeyword(node);
        }
        super.inAChoreographyAnykeyword(node); // to continue the tree traversal
    }

    public void outAChoreographyAnykeyword(AChoreographyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AChoreographyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAChoreographyAnykeyword(node);
        }
        super.outAChoreographyAnykeyword(node); // to continue the tree traversal
    }

    public void caseAChoreographyAnykeyword(AChoreographyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AChoreographyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAChoreographyAnykeyword(node);
        }
        super.caseAChoreographyAnykeyword(node); // to continue the tree traversal
    }

    public void inACardinality(ACardinality node) {
        Object adapter = adaptersToHandleNodes.get(ACardinality.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACardinality(node);
        }
        super.inACardinality(node); // to continue the tree traversal
    }

    public void outACardinality(ACardinality node) {
        Object adapter = adaptersToHandleNodes.get(ACardinality.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACardinality(node);
        }
        super.outACardinality(node); // to continue the tree traversal
    }

    public void caseACardinality(ACardinality node) {
        Object adapter = adaptersToHandleNodes.get(ACardinality.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACardinality(node);
        }
        super.caseACardinality(node); // to continue the tree traversal
    }

    public void inADefinedbyAnykeyword(ADefinedbyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedbyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADefinedbyAnykeyword(node);
        }
        super.inADefinedbyAnykeyword(node); // to continue the tree traversal
    }

    public void outADefinedbyAnykeyword(ADefinedbyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedbyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADefinedbyAnykeyword(node);
        }
        super.outADefinedbyAnykeyword(node); // to continue the tree traversal
    }

    public void caseADefinedbyAnykeyword(ADefinedbyAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedbyAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADefinedbyAnykeyword(node);
        }
        super.caseADefinedbyAnykeyword(node); // to continue the tree traversal
    }

    public void inADeferreduntilWorkflowPattern(ADeferreduntilWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferreduntilWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADeferreduntilWorkflowPattern(node);
        }
        super.inADeferreduntilWorkflowPattern(node); // to continue the tree traversal
    }

    public void outADeferreduntilWorkflowPattern(ADeferreduntilWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferreduntilWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADeferreduntilWorkflowPattern(node);
        }
        super.outADeferreduntilWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseADeferreduntilWorkflowPattern(ADeferreduntilWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(ADeferreduntilWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADeferreduntilWorkflowPattern(node);
        }
        super.caseADeferreduntilWorkflowPattern(node); // to continue the tree traversal
    }

    public void inAMemberofAnykeyword(AMemberofAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMemberofAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMemberofAnykeyword(node);
        }
        super.inAMemberofAnykeyword(node); // to continue the tree traversal
    }

    public void outAMemberofAnykeyword(AMemberofAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMemberofAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMemberofAnykeyword(node);
        }
        super.outAMemberofAnykeyword(node); // to continue the tree traversal
    }

    public void caseAMemberofAnykeyword(AMemberofAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMemberofAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMemberofAnykeyword(node);
        }
        super.caseAMemberofAnykeyword(node); // to continue the tree traversal
    }

    public void inAWhileWorkflowPattern(AWhileWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AWhileWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWhileWorkflowPattern(node);
        }
        super.inAWhileWorkflowPattern(node); // to continue the tree traversal
    }

    public void outAWhileWorkflowPattern(AWhileWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AWhileWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWhileWorkflowPattern(node);
        }
        super.outAWhileWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseAWhileWorkflowPattern(AWhileWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AWhileWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWhileWorkflowPattern(node);
        }
        super.caseAWhileWorkflowPattern(node); // to continue the tree traversal
    }

    public void inAEqualCompOp(AEqualCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AEqualCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEqualCompOp(node);
        }
        super.inAEqualCompOp(node); // to continue the tree traversal
    }

    public void outAEqualCompOp(AEqualCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AEqualCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEqualCompOp(node);
        }
        super.outAEqualCompOp(node); // to continue the tree traversal
    }

    public void caseAEqualCompOp(AEqualCompOp node) {
        Object adapter = adaptersToHandleNodes.get(AEqualCompOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEqualCompOp(node);
        }
        super.caseAEqualCompOp(node); // to continue the tree traversal
    }

    public void inAWwmediatorAnykeyword(AWwmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWwmediatorAnykeyword(node);
        }
        super.inAWwmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAWwmediatorAnykeyword(AWwmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWwmediatorAnykeyword(node);
        }
        super.outAWwmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAWwmediatorAnykeyword(AWwmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWwmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWwmediatorAnykeyword(node);
        }
        super.caseAWwmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inAControlflowAnykeyword(AControlflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AControlflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAControlflowAnykeyword(node);
        }
        super.inAControlflowAnykeyword(node); // to continue the tree traversal
    }

    public void outAControlflowAnykeyword(AControlflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AControlflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAControlflowAnykeyword(node);
        }
        super.outAControlflowAnykeyword(node); // to continue the tree traversal
    }

    public void caseAControlflowAnykeyword(AControlflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AControlflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAControlflowAnykeyword(node);
        }
        super.caseAControlflowAnykeyword(node); // to continue the tree traversal
    }

    public void inADecisionNode(ADecisionNode node) {
        Object adapter = adaptersToHandleNodes.get(ADecisionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADecisionNode(node);
        }
        super.inADecisionNode(node); // to continue the tree traversal
    }

    public void outADecisionNode(ADecisionNode node) {
        Object adapter = adaptersToHandleNodes.get(ADecisionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADecisionNode(node);
        }
        super.outADecisionNode(node); // to continue the tree traversal
    }

    public void caseADecisionNode(ADecisionNode node) {
        Object adapter = adaptersToHandleNodes.get(ADecisionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADecisionNode(node);
        }
        super.caseADecisionNode(node); // to continue the tree traversal
    }

    public void inAPrefixdefinitionlistPrefixdefinitionlist(APrefixdefinitionlistPrefixdefinitionlist node) {
        Object adapter = adaptersToHandleNodes.get(APrefixdefinitionlistPrefixdefinitionlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPrefixdefinitionlistPrefixdefinitionlist(node);
        }
        super.inAPrefixdefinitionlistPrefixdefinitionlist(node); // to continue the tree traversal
    }

    public void outAPrefixdefinitionlistPrefixdefinitionlist(APrefixdefinitionlistPrefixdefinitionlist node) {
        Object adapter = adaptersToHandleNodes.get(APrefixdefinitionlistPrefixdefinitionlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPrefixdefinitionlistPrefixdefinitionlist(node);
        }
        super.outAPrefixdefinitionlistPrefixdefinitionlist(node); // to continue the tree traversal
    }

    public void caseAPrefixdefinitionlistPrefixdefinitionlist(APrefixdefinitionlistPrefixdefinitionlist node) {
        Object adapter = adaptersToHandleNodes.get(APrefixdefinitionlistPrefixdefinitionlist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPrefixdefinitionlistPrefixdefinitionlist(node);
        }
        super.caseAPrefixdefinitionlistPrefixdefinitionlist(node); // to continue the tree traversal
    }

    public void inAImpliedByLpAnykeyword(AImpliedByLpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedByLpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImpliedByLpAnykeyword(node);
        }
        super.inAImpliedByLpAnykeyword(node); // to continue the tree traversal
    }

    public void outAImpliedByLpAnykeyword(AImpliedByLpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedByLpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImpliedByLpAnykeyword(node);
        }
        super.outAImpliedByLpAnykeyword(node); // to continue the tree traversal
    }

    public void caseAImpliedByLpAnykeyword(AImpliedByLpAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedByLpAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImpliedByLpAnykeyword(node);
        }
        super.caseAImpliedByLpAnykeyword(node); // to continue the tree traversal
    }

    public void inAConjunction(AConjunction node) {
        Object adapter = adaptersToHandleNodes.get(AConjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConjunction(node);
        }
        super.inAConjunction(node); // to continue the tree traversal
    }

    public void outAConjunction(AConjunction node) {
        Object adapter = adaptersToHandleNodes.get(AConjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConjunction(node);
        }
        super.outAConjunction(node); // to continue the tree traversal
    }

    public void caseAConjunction(AConjunction node) {
        Object adapter = adaptersToHandleNodes.get(AConjunction.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConjunction(node);
        }
        super.caseAConjunction(node); // to continue the tree traversal
    }

    public void inAAccepteventactionNode(AAccepteventactionNode node) {
        Object adapter = adaptersToHandleNodes.get(AAccepteventactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAccepteventactionNode(node);
        }
        super.inAAccepteventactionNode(node); // to continue the tree traversal
    }

    public void outAAccepteventactionNode(AAccepteventactionNode node) {
        Object adapter = adaptersToHandleNodes.get(AAccepteventactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAccepteventactionNode(node);
        }
        super.outAAccepteventactionNode(node); // to continue the tree traversal
    }

    public void caseAAccepteventactionNode(AAccepteventactionNode node) {
        Object adapter = adaptersToHandleNodes.get(AAccepteventactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAccepteventactionNode(node);
        }
        super.caseAAccepteventactionNode(node); // to continue the tree traversal
    }

    public void inAFactNonpreferredFact(AFactNonpreferredFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactNonpreferredFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFactNonpreferredFact(node);
        }
        super.inAFactNonpreferredFact(node); // to continue the tree traversal
    }

    public void outAFactNonpreferredFact(AFactNonpreferredFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactNonpreferredFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFactNonpreferredFact(node);
        }
        super.outAFactNonpreferredFact(node); // to continue the tree traversal
    }

    public void caseAFactNonpreferredFact(AFactNonpreferredFact node) {
        Object adapter = adaptersToHandleNodes.get(AFactNonpreferredFact.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFactNonpreferredFact(node);
        }
        super.caseAFactNonpreferredFact(node); // to continue the tree traversal
    }

    public void inAImpliedByAnykeyword(AImpliedByAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedByAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImpliedByAnykeyword(node);
        }
        super.inAImpliedByAnykeyword(node); // to continue the tree traversal
    }

    public void outAImpliedByAnykeyword(AImpliedByAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedByAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImpliedByAnykeyword(node);
        }
        super.outAImpliedByAnykeyword(node); // to continue the tree traversal
    }

    public void caseAImpliedByAnykeyword(AImpliedByAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AImpliedByAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImpliedByAnykeyword(node);
        }
        super.caseAImpliedByAnykeyword(node); // to continue the tree traversal
    }

    public void inAAssumptionAnykeyword(AAssumptionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAssumptionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAssumptionAnykeyword(node);
        }
        super.inAAssumptionAnykeyword(node); // to continue the tree traversal
    }

    public void outAAssumptionAnykeyword(AAssumptionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAssumptionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAssumptionAnykeyword(node);
        }
        super.outAAssumptionAnykeyword(node); // to continue the tree traversal
    }

    public void caseAAssumptionAnykeyword(AAssumptionAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAssumptionAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAssumptionAnykeyword(node);
        }
        super.caseAAssumptionAnykeyword(node); // to continue the tree traversal
    }

    public void inADataflowAnykeyword(ADataflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADataflowAnykeyword(node);
        }
        super.inADataflowAnykeyword(node); // to continue the tree traversal
    }

    public void outADataflowAnykeyword(ADataflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADataflowAnykeyword(node);
        }
        super.outADataflowAnykeyword(node); // to continue the tree traversal
    }

    public void caseADataflowAnykeyword(ADataflowAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ADataflowAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADataflowAnykeyword(node);
        }
        super.caseADataflowAnykeyword(node); // to continue the tree traversal
    }

    public void inANamespacedefPrefixdefinition(ANamespacedefPrefixdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ANamespacedefPrefixdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANamespacedefPrefixdefinition(node);
        }
        super.inANamespacedefPrefixdefinition(node); // to continue the tree traversal
    }

    public void outANamespacedefPrefixdefinition(ANamespacedefPrefixdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ANamespacedefPrefixdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANamespacedefPrefixdefinition(node);
        }
        super.outANamespacedefPrefixdefinition(node); // to continue the tree traversal
    }

    public void caseANamespacedefPrefixdefinition(ANamespacedefPrefixdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ANamespacedefPrefixdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANamespacedefPrefixdefinition(node);
        }
        super.caseANamespacedefPrefixdefinition(node); // to continue the tree traversal
    }

    public void inAConstraintAnykeyword(AConstraintAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConstraintAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConstraintAnykeyword(node);
        }
        super.inAConstraintAnykeyword(node); // to continue the tree traversal
    }

    public void outAConstraintAnykeyword(AConstraintAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConstraintAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConstraintAnykeyword(node);
        }
        super.outAConstraintAnykeyword(node); // to continue the tree traversal
    }

    public void caseAConstraintAnykeyword(AConstraintAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AConstraintAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConstraintAnykeyword(node);
        }
        super.caseAConstraintAnykeyword(node); // to continue the tree traversal
    }

    public void inAReflexiveAttributefeature(AReflexiveAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(AReflexiveAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAReflexiveAttributefeature(node);
        }
        super.inAReflexiveAttributefeature(node); // to continue the tree traversal
    }

    public void outAReflexiveAttributefeature(AReflexiveAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(AReflexiveAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAReflexiveAttributefeature(node);
        }
        super.outAReflexiveAttributefeature(node); // to continue the tree traversal
    }

    public void caseAReflexiveAttributefeature(AReflexiveAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(AReflexiveAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAReflexiveAttributefeature(node);
        }
        super.caseAReflexiveAttributefeature(node); // to continue the tree traversal
    }

    public void inAClosedWorldAttType(AClosedWorldAttType node) {
        Object adapter = adaptersToHandleNodes.get(AClosedWorldAttType.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAClosedWorldAttType(node);
        }
        super.inAClosedWorldAttType(node); // to continue the tree traversal
    }

    public void outAClosedWorldAttType(AClosedWorldAttType node) {
        Object adapter = adaptersToHandleNodes.get(AClosedWorldAttType.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAClosedWorldAttType(node);
        }
        super.outAClosedWorldAttType(node); // to continue the tree traversal
    }

    public void caseAClosedWorldAttType(AClosedWorldAttType node) {
        Object adapter = adaptersToHandleNodes.get(AClosedWorldAttType.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAClosedWorldAttType(node);
        }
        super.caseAClosedWorldAttType(node); // to continue the tree traversal
    }

    public void inAPrefix(APrefix node) {
        Object adapter = adaptersToHandleNodes.get(APrefix.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPrefix(node);
        }
        super.inAPrefix(node); // to continue the tree traversal
    }

    public void outAPrefix(APrefix node) {
        Object adapter = adaptersToHandleNodes.get(APrefix.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPrefix(node);
        }
        super.outAPrefix(node); // to continue the tree traversal
    }

    public void caseAPrefix(APrefix node) {
        Object adapter = adaptersToHandleNodes.get(APrefix.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPrefix(node);
        }
        super.caseAPrefix(node); // to continue the tree traversal
    }

    public void inAAttributeMoleculeMolecule(AAttributeMoleculeMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AAttributeMoleculeMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttributeMoleculeMolecule(node);
        }
        super.inAAttributeMoleculeMolecule(node); // to continue the tree traversal
    }

    public void outAAttributeMoleculeMolecule(AAttributeMoleculeMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AAttributeMoleculeMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttributeMoleculeMolecule(node);
        }
        super.outAAttributeMoleculeMolecule(node); // to continue the tree traversal
    }

    public void caseAAttributeMoleculeMolecule(AAttributeMoleculeMolecule node) {
        Object adapter = adaptersToHandleNodes.get(AAttributeMoleculeMolecule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttributeMoleculeMolecule(node);
        }
        super.caseAAttributeMoleculeMolecule(node); // to continue the tree traversal
    }

    public void inAXorWorkflowPattern(AXorWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AXorWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAXorWorkflowPattern(node);
        }
        super.inAXorWorkflowPattern(node); // to continue the tree traversal
    }

    public void outAXorWorkflowPattern(AXorWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AXorWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAXorWorkflowPattern(node);
        }
        super.outAXorWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseAXorWorkflowPattern(AXorWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AXorWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAXorWorkflowPattern(node);
        }
        super.caseAXorWorkflowPattern(node); // to continue the tree traversal
    }

    public void inAChorAdChoreographyFormalism(AChorAdChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorAdChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAChorAdChoreographyFormalism(node);
        }
        super.inAChorAdChoreographyFormalism(node); // to continue the tree traversal
    }

    public void outAChorAdChoreographyFormalism(AChorAdChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorAdChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAChorAdChoreographyFormalism(node);
        }
        super.outAChorAdChoreographyFormalism(node); // to continue the tree traversal
    }

    public void caseAChorAdChoreographyFormalism(AChorAdChoreographyFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AChorAdChoreographyFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAChorAdChoreographyFormalism(node);
        }
        super.caseAChorAdChoreographyFormalism(node); // to continue the tree traversal
    }

    public void inAInputpinAnykeyword(AInputpinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInputpinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInputpinAnykeyword(node);
        }
        super.inAInputpinAnykeyword(node); // to continue the tree traversal
    }

    public void outAInputpinAnykeyword(AInputpinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInputpinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInputpinAnykeyword(node);
        }
        super.outAInputpinAnykeyword(node); // to continue the tree traversal
    }

    public void caseAInputpinAnykeyword(AInputpinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AInputpinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInputpinAnykeyword(node);
        }
        super.caseAInputpinAnykeyword(node); // to continue the tree traversal
    }

    public void inACashewPerformAchievegoalCashewPerformAlt(ACashewPerformAchievegoalCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformAchievegoalCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewPerformAchievegoalCashewPerformAlt(node);
        }
        super.inACashewPerformAchievegoalCashewPerformAlt(node); // to continue the tree traversal
    }

    public void outACashewPerformAchievegoalCashewPerformAlt(ACashewPerformAchievegoalCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformAchievegoalCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewPerformAchievegoalCashewPerformAlt(node);
        }
        super.outACashewPerformAchievegoalCashewPerformAlt(node); // to continue the tree traversal
    }

    public void caseACashewPerformAchievegoalCashewPerformAlt(ACashewPerformAchievegoalCashewPerformAlt node) {
        Object adapter = adaptersToHandleNodes.get(ACashewPerformAchievegoalCashewPerformAlt.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewPerformAchievegoalCashewPerformAlt(node);
        }
        super.caseACashewPerformAchievegoalCashewPerformAlt(node); // to continue the tree traversal
    }

    public void inAPostconditionPrePostAssOrEff(APostconditionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(APostconditionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPostconditionPrePostAssOrEff(node);
        }
        super.inAPostconditionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void outAPostconditionPrePostAssOrEff(APostconditionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(APostconditionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPostconditionPrePostAssOrEff(node);
        }
        super.outAPostconditionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void caseAPostconditionPrePostAssOrEff(APostconditionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(APostconditionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPostconditionPrePostAssOrEff(node);
        }
        super.caseAPostconditionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void inADefinedAxiomAxiomdefinition(ADefinedAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADefinedAxiomAxiomdefinition(node);
        }
        super.inADefinedAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void outADefinedAxiomAxiomdefinition(ADefinedAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADefinedAxiomAxiomdefinition(node);
        }
        super.outADefinedAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void caseADefinedAxiomAxiomdefinition(ADefinedAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(ADefinedAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADefinedAxiomAxiomdefinition(node);
        }
        super.caseADefinedAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void inAEdgecontents(AEdgecontents node) {
        Object adapter = adaptersToHandleNodes.get(AEdgecontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEdgecontents(node);
        }
        super.inAEdgecontents(node); // to continue the tree traversal
    }

    public void outAEdgecontents(AEdgecontents node) {
        Object adapter = adaptersToHandleNodes.get(AEdgecontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEdgecontents(node);
        }
        super.outAEdgecontents(node); // to continue the tree traversal
    }

    public void caseAEdgecontents(AEdgecontents node) {
        Object adapter = adaptersToHandleNodes.get(AEdgecontents.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEdgecontents(node);
        }
        super.caseAEdgecontents(node); // to continue the tree traversal
    }

    public void inAClientChoreography(AClientChoreography node) {
        Object adapter = adaptersToHandleNodes.get(AClientChoreography.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAClientChoreography(node);
        }
        super.inAClientChoreography(node); // to continue the tree traversal
    }

    public void outAClientChoreography(AClientChoreography node) {
        Object adapter = adaptersToHandleNodes.get(AClientChoreography.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAClientChoreography(node);
        }
        super.outAClientChoreography(node); // to continue the tree traversal
    }

    public void caseAClientChoreography(AClientChoreography node) {
        Object adapter = adaptersToHandleNodes.get(AClientChoreography.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAClientChoreography(node);
        }
        super.caseAClientChoreography(node); // to continue the tree traversal
    }

    public void inAPfmediatorAnykeyword(APfmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APfmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPfmediatorAnykeyword(node);
        }
        super.inAPfmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAPfmediatorAnykeyword(APfmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APfmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPfmediatorAnykeyword(node);
        }
        super.outAPfmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAPfmediatorAnykeyword(APfmediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(APfmediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPfmediatorAnykeyword(node);
        }
        super.caseAPfmediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inAUpdaterule(AUpdaterule node) {
        Object adapter = adaptersToHandleNodes.get(AUpdaterule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUpdaterule(node);
        }
        super.inAUpdaterule(node); // to continue the tree traversal
    }

    public void outAUpdaterule(AUpdaterule node) {
        Object adapter = adaptersToHandleNodes.get(AUpdaterule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUpdaterule(node);
        }
        super.outAUpdaterule(node); // to continue the tree traversal
    }

    public void caseAUpdaterule(AUpdaterule node) {
        Object adapter = adaptersToHandleNodes.get(AUpdaterule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUpdaterule(node);
        }
        super.caseAUpdaterule(node); // to continue the tree traversal
    }

    public void inASqnameIri(ASqnameIri node) {
        Object adapter = adaptersToHandleNodes.get(ASqnameIri.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASqnameIri(node);
        }
        super.inASqnameIri(node); // to continue the tree traversal
    }

    public void outASqnameIri(ASqnameIri node) {
        Object adapter = adaptersToHandleNodes.get(ASqnameIri.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASqnameIri(node);
        }
        super.outASqnameIri(node); // to continue the tree traversal
    }

    public void caseASqnameIri(ASqnameIri node) {
        Object adapter = adaptersToHandleNodes.get(ASqnameIri.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASqnameIri(node);
        }
        super.caseASqnameIri(node); // to continue the tree traversal
    }

    public void inAAttributevalue(AAttributevalue node) {
        Object adapter = adaptersToHandleNodes.get(AAttributevalue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAttributevalue(node);
        }
        super.inAAttributevalue(node); // to continue the tree traversal
    }

    public void outAAttributevalue(AAttributevalue node) {
        Object adapter = adaptersToHandleNodes.get(AAttributevalue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAttributevalue(node);
        }
        super.outAAttributevalue(node); // to continue the tree traversal
    }

    public void caseAAttributevalue(AAttributevalue node) {
        Object adapter = adaptersToHandleNodes.get(AAttributevalue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAttributevalue(node);
        }
        super.caseAAttributevalue(node); // to continue the tree traversal
    }

    public void inAForallAnykeyword(AForallAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AForallAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAForallAnykeyword(node);
        }
        super.inAForallAnykeyword(node); // to continue the tree traversal
    }

    public void outAForallAnykeyword(AForallAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AForallAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAForallAnykeyword(node);
        }
        super.outAForallAnykeyword(node); // to continue the tree traversal
    }

    public void caseAForallAnykeyword(AForallAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AForallAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAForallAnykeyword(node);
        }
        super.caseAForallAnykeyword(node); // to continue the tree traversal
    }

    public void inAMin2choicelist(AMin2choicelist node) {
        Object adapter = adaptersToHandleNodes.get(AMin2choicelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMin2choicelist(node);
        }
        super.inAMin2choicelist(node); // to continue the tree traversal
    }

    public void outAMin2choicelist(AMin2choicelist node) {
        Object adapter = adaptersToHandleNodes.get(AMin2choicelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMin2choicelist(node);
        }
        super.outAMin2choicelist(node); // to continue the tree traversal
    }

    public void caseAMin2choicelist(AMin2choicelist node) {
        Object adapter = adaptersToHandleNodes.get(AMin2choicelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMin2choicelist(node);
        }
        super.caseAMin2choicelist(node); // to continue the tree traversal
    }

    public void inAPipedRuleOrchPipedRule(APipedRuleOrchPipedRule node) {
        Object adapter = adaptersToHandleNodes.get(APipedRuleOrchPipedRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPipedRuleOrchPipedRule(node);
        }
        super.inAPipedRuleOrchPipedRule(node); // to continue the tree traversal
    }

    public void outAPipedRuleOrchPipedRule(APipedRuleOrchPipedRule node) {
        Object adapter = adaptersToHandleNodes.get(APipedRuleOrchPipedRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPipedRuleOrchPipedRule(node);
        }
        super.outAPipedRuleOrchPipedRule(node); // to continue the tree traversal
    }

    public void caseAPipedRuleOrchPipedRule(APipedRuleOrchPipedRule node) {
        Object adapter = adaptersToHandleNodes.get(APipedRuleOrchPipedRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPipedRuleOrchPipedRule(node);
        }
        super.caseAPipedRuleOrchPipedRule(node); // to continue the tree traversal
    }

    public void inAExpressionGuard(AExpressionGuard node) {
        Object adapter = adaptersToHandleNodes.get(AExpressionGuard.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAExpressionGuard(node);
        }
        super.inAExpressionGuard(node); // to continue the tree traversal
    }

    public void outAExpressionGuard(AExpressionGuard node) {
        Object adapter = adaptersToHandleNodes.get(AExpressionGuard.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAExpressionGuard(node);
        }
        super.outAExpressionGuard(node); // to continue the tree traversal
    }

    public void caseAExpressionGuard(AExpressionGuard node) {
        Object adapter = adaptersToHandleNodes.get(AExpressionGuard.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAExpressionGuard(node);
        }
        super.caseAExpressionGuard(node); // to continue the tree traversal
    }

    public void inAAggregationAnykeyword(AAggregationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAggregationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAggregationAnykeyword(node);
        }
        super.inAAggregationAnykeyword(node); // to continue the tree traversal
    }

    public void outAAggregationAnykeyword(AAggregationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAggregationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAggregationAnykeyword(node);
        }
        super.outAAggregationAnykeyword(node); // to continue the tree traversal
    }

    public void caseAAggregationAnykeyword(AAggregationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAggregationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAggregationAnykeyword(node);
        }
        super.caseAAggregationAnykeyword(node); // to continue the tree traversal
    }

    public void inATermValue(ATermValue node) {
        Object adapter = adaptersToHandleNodes.get(ATermValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATermValue(node);
        }
        super.inATermValue(node); // to continue the tree traversal
    }

    public void outATermValue(ATermValue node) {
        Object adapter = adaptersToHandleNodes.get(ATermValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATermValue(node);
        }
        super.outATermValue(node); // to continue the tree traversal
    }

    public void caseATermValue(ATermValue node) {
        Object adapter = adaptersToHandleNodes.get(ATermValue.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATermValue(node);
        }
        super.caseATermValue(node); // to continue the tree traversal
    }

    public void inAWsmlvariantAnykeyword(AWsmlvariantAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWsmlvariantAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWsmlvariantAnykeyword(node);
        }
        super.inAWsmlvariantAnykeyword(node); // to continue the tree traversal
    }

    public void outAWsmlvariantAnykeyword(AWsmlvariantAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWsmlvariantAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWsmlvariantAnykeyword(node);
        }
        super.outAWsmlvariantAnykeyword(node); // to continue the tree traversal
    }

    public void caseAWsmlvariantAnykeyword(AWsmlvariantAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AWsmlvariantAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWsmlvariantAnykeyword(node);
        }
        super.caseAWsmlvariantAnykeyword(node); // to continue the tree traversal
    }

    public void inAStaticModeId(AStaticModeId node) {
        Object adapter = adaptersToHandleNodes.get(AStaticModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAStaticModeId(node);
        }
        super.inAStaticModeId(node); // to continue the tree traversal
    }

    public void outAStaticModeId(AStaticModeId node) {
        Object adapter = adaptersToHandleNodes.get(AStaticModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAStaticModeId(node);
        }
        super.outAStaticModeId(node); // to continue the tree traversal
    }

    public void caseAStaticModeId(AStaticModeId node) {
        Object adapter = adaptersToHandleNodes.get(AStaticModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAStaticModeId(node);
        }
        super.caseAStaticModeId(node); // to continue the tree traversal
    }

    public void inASuperconcept(ASuperconcept node) {
        Object adapter = adaptersToHandleNodes.get(ASuperconcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASuperconcept(node);
        }
        super.inASuperconcept(node); // to continue the tree traversal
    }

    public void outASuperconcept(ASuperconcept node) {
        Object adapter = adaptersToHandleNodes.get(ASuperconcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASuperconcept(node);
        }
        super.outASuperconcept(node); // to continue the tree traversal
    }

    public void caseASuperconcept(ASuperconcept node) {
        Object adapter = adaptersToHandleNodes.get(ASuperconcept.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASuperconcept(node);
        }
        super.caseASuperconcept(node); // to continue the tree traversal
    }

    public void inAActivityfinalAnykeyword(AActivityfinalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AActivityfinalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAActivityfinalAnykeyword(node);
        }
        super.inAActivityfinalAnykeyword(node); // to continue the tree traversal
    }

    public void outAActivityfinalAnykeyword(AActivityfinalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AActivityfinalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAActivityfinalAnykeyword(node);
        }
        super.outAActivityfinalAnykeyword(node); // to continue the tree traversal
    }

    public void caseAActivityfinalAnykeyword(AActivityfinalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AActivityfinalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAActivityfinalAnykeyword(node);
        }
        super.caseAActivityfinalAnykeyword(node); // to continue the tree traversal
    }

    public void inAOomediator(AOomediator node) {
        Object adapter = adaptersToHandleNodes.get(AOomediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOomediator(node);
        }
        super.inAOomediator(node); // to continue the tree traversal
    }

    public void outAOomediator(AOomediator node) {
        Object adapter = adaptersToHandleNodes.get(AOomediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOomediator(node);
        }
        super.outAOomediator(node); // to continue the tree traversal
    }

    public void caseAOomediator(AOomediator node) {
        Object adapter = adaptersToHandleNodes.get(AOomediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOomediator(node);
        }
        super.caseAOomediator(node); // to continue the tree traversal
    }

    public void inAMemberofCptOp(AMemberofCptOp node) {
        Object adapter = adaptersToHandleNodes.get(AMemberofCptOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMemberofCptOp(node);
        }
        super.inAMemberofCptOp(node); // to continue the tree traversal
    }

    public void outAMemberofCptOp(AMemberofCptOp node) {
        Object adapter = adaptersToHandleNodes.get(AMemberofCptOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMemberofCptOp(node);
        }
        super.outAMemberofCptOp(node); // to continue the tree traversal
    }

    public void caseAMemberofCptOp(AMemberofCptOp node) {
        Object adapter = adaptersToHandleNodes.get(AMemberofCptOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMemberofCptOp(node);
        }
        super.caseAMemberofCptOp(node); // to continue the tree traversal
    }

    public void inAOrchestrationTransitions(AOrchestrationTransitions node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestrationTransitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchestrationTransitions(node);
        }
        super.inAOrchestrationTransitions(node); // to continue the tree traversal
    }

    public void outAOrchestrationTransitions(AOrchestrationTransitions node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestrationTransitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchestrationTransitions(node);
        }
        super.outAOrchestrationTransitions(node); // to continue the tree traversal
    }

    public void caseAOrchestrationTransitions(AOrchestrationTransitions node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestrationTransitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchestrationTransitions(node);
        }
        super.caseAOrchestrationTransitions(node); // to continue the tree traversal
    }

    public void inASendAnykeyword(ASendAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASendAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASendAnykeyword(node);
        }
        super.inASendAnykeyword(node); // to continue the tree traversal
    }

    public void outASendAnykeyword(ASendAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASendAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASendAnykeyword(node);
        }
        super.outASendAnykeyword(node); // to continue the tree traversal
    }

    public void caseASendAnykeyword(ASendAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASendAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASendAnykeyword(node);
        }
        super.caseASendAnykeyword(node); // to continue the tree traversal
    }

    public void inAParamtype(AParamtype node) {
        Object adapter = adaptersToHandleNodes.get(AParamtype.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAParamtype(node);
        }
        super.inAParamtype(node); // to continue the tree traversal
    }

    public void outAParamtype(AParamtype node) {
        Object adapter = adaptersToHandleNodes.get(AParamtype.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAParamtype(node);
        }
        super.outAParamtype(node); // to continue the tree traversal
    }

    public void caseAParamtype(AParamtype node) {
        Object adapter = adaptersToHandleNodes.get(AParamtype.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAParamtype(node);
        }
        super.caseAParamtype(node); // to continue the tree traversal
    }

    public void inAUseAxiomAxiomdefinition(AUseAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(AUseAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUseAxiomAxiomdefinition(node);
        }
        super.inAUseAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void outAUseAxiomAxiomdefinition(AUseAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(AUseAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUseAxiomAxiomdefinition(node);
        }
        super.outAUseAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void caseAUseAxiomAxiomdefinition(AUseAxiomAxiomdefinition node) {
        Object adapter = adaptersToHandleNodes.get(AUseAxiomAxiomdefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUseAxiomAxiomdefinition(node);
        }
        super.caseAUseAxiomAxiomdefinition(node); // to continue the tree traversal
    }

    public void inATerms(ATerms node) {
        Object adapter = adaptersToHandleNodes.get(ATerms.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATerms(node);
        }
        super.inATerms(node); // to continue the tree traversal
    }

    public void outATerms(ATerms node) {
        Object adapter = adaptersToHandleNodes.get(ATerms.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATerms(node);
        }
        super.outATerms(node); // to continue the tree traversal
    }

    public void caseATerms(ATerms node) {
        Object adapter = adaptersToHandleNodes.get(ATerms.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATerms(node);
        }
        super.caseATerms(node); // to continue the tree traversal
    }

    public void inAUnivtrueAnykeyword(AUnivtrueAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnivtrueAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAUnivtrueAnykeyword(node);
        }
        super.inAUnivtrueAnykeyword(node); // to continue the tree traversal
    }

    public void outAUnivtrueAnykeyword(AUnivtrueAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnivtrueAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAUnivtrueAnykeyword(node);
        }
        super.outAUnivtrueAnykeyword(node); // to continue the tree traversal
    }

    public void caseAUnivtrueAnykeyword(AUnivtrueAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AUnivtrueAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAUnivtrueAnykeyword(node);
        }
        super.caseAUnivtrueAnykeyword(node); // to continue the tree traversal
    }

    public void inACashewSubDefs(ACashewSubDefs node) {
        Object adapter = adaptersToHandleNodes.get(ACashewSubDefs.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inACashewSubDefs(node);
        }
        super.inACashewSubDefs(node); // to continue the tree traversal
    }

    public void outACashewSubDefs(ACashewSubDefs node) {
        Object adapter = adaptersToHandleNodes.get(ACashewSubDefs.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outACashewSubDefs(node);
        }
        super.outACashewSubDefs(node); // to continue the tree traversal
    }

    public void caseACashewSubDefs(ACashewSubDefs node) {
        Object adapter = adaptersToHandleNodes.get(ACashewSubDefs.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseACashewSubDefs(node);
        }
        super.caseACashewSubDefs(node); // to continue the tree traversal
    }

    public void inASubconceptAnykeyword(ASubconceptAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASubconceptAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASubconceptAnykeyword(node);
        }
        super.inASubconceptAnykeyword(node); // to continue the tree traversal
    }

    public void outASubconceptAnykeyword(ASubconceptAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASubconceptAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASubconceptAnykeyword(node);
        }
        super.outASubconceptAnykeyword(node); // to continue the tree traversal
    }

    public void caseASubconceptAnykeyword(ASubconceptAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ASubconceptAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASubconceptAnykeyword(node);
        }
        super.caseASubconceptAnykeyword(node); // to continue the tree traversal
    }

    public void inAOperationNode(AOperationNode node) {
        Object adapter = adaptersToHandleNodes.get(AOperationNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOperationNode(node);
        }
        super.inAOperationNode(node); // to continue the tree traversal
    }

    public void outAOperationNode(AOperationNode node) {
        Object adapter = adaptersToHandleNodes.get(AOperationNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOperationNode(node);
        }
        super.outAOperationNode(node); // to continue the tree traversal
    }

    public void caseAOperationNode(AOperationNode node) {
        Object adapter = adaptersToHandleNodes.get(AOperationNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOperationNode(node);
        }
        super.caseAOperationNode(node); // to continue the tree traversal
    }

    public void inATarget(ATarget node) {
        Object adapter = adaptersToHandleNodes.get(ATarget.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATarget(node);
        }
        super.inATarget(node); // to continue the tree traversal
    }

    public void outATarget(ATarget node) {
        Object adapter = adaptersToHandleNodes.get(ATarget.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATarget(node);
        }
        super.outATarget(node); // to continue the tree traversal
    }

    public void caseATarget(ATarget node) {
        Object adapter = adaptersToHandleNodes.get(ATarget.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATarget(node);
        }
        super.caseATarget(node); // to continue the tree traversal
    }

    public void inAInterleavedWorkflowPattern(AInterleavedWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AInterleavedWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInterleavedWorkflowPattern(node);
        }
        super.inAInterleavedWorkflowPattern(node); // to continue the tree traversal
    }

    public void outAInterleavedWorkflowPattern(AInterleavedWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AInterleavedWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInterleavedWorkflowPattern(node);
        }
        super.outAInterleavedWorkflowPattern(node); // to continue the tree traversal
    }

    public void caseAInterleavedWorkflowPattern(AInterleavedWorkflowPattern node) {
        Object adapter = adaptersToHandleNodes.get(AInterleavedWorkflowPattern.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInterleavedWorkflowPattern(node);
        }
        super.caseAInterleavedWorkflowPattern(node); // to continue the tree traversal
    }

    public void inAInteger(AInteger node) {
        Object adapter = adaptersToHandleNodes.get(AInteger.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInteger(node);
        }
        super.inAInteger(node); // to continue the tree traversal
    }

    public void outAInteger(AInteger node) {
        Object adapter = adaptersToHandleNodes.get(AInteger.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInteger(node);
        }
        super.outAInteger(node); // to continue the tree traversal
    }

    public void caseAInteger(AInteger node) {
        Object adapter = adaptersToHandleNodes.get(AInteger.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInteger(node);
        }
        super.caseAInteger(node); // to continue the tree traversal
    }

    public void inAOrchestration(AOrchestration node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestration.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchestration(node);
        }
        super.inAOrchestration(node); // to continue the tree traversal
    }

    public void outAOrchestration(AOrchestration node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestration.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchestration(node);
        }
        super.outAOrchestration(node); // to continue the tree traversal
    }

    public void caseAOrchestration(AOrchestration node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestration.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchestration(node);
        }
        super.caseAOrchestration(node); // to continue the tree traversal
    }

    public void inAOrAnykeyword(AOrAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOrAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrAnykeyword(node);
        }
        super.inAOrAnykeyword(node); // to continue the tree traversal
    }

    public void outAOrAnykeyword(AOrAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOrAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrAnykeyword(node);
        }
        super.outAOrAnykeyword(node); // to continue the tree traversal
    }

    public void caseAOrAnykeyword(AOrAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOrAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrAnykeyword(node);
        }
        super.caseAOrAnykeyword(node); // to continue the tree traversal
    }

    public void inAPreconditionPrePostAssOrEff(APreconditionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(APreconditionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPreconditionPrePostAssOrEff(node);
        }
        super.inAPreconditionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void outAPreconditionPrePostAssOrEff(APreconditionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(APreconditionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPreconditionPrePostAssOrEff(node);
        }
        super.outAPreconditionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void caseAPreconditionPrePostAssOrEff(APreconditionPrePostAssOrEff node) {
        Object adapter = adaptersToHandleNodes.get(APreconditionPrePostAssOrEff.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPreconditionPrePostAssOrEff(node);
        }
        super.caseAPreconditionPrePostAssOrEff(node); // to continue the tree traversal
    }

    public void inALogDefinition(ALogDefinition node) {
        Object adapter = adaptersToHandleNodes.get(ALogDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inALogDefinition(node);
        }
        super.inALogDefinition(node); // to continue the tree traversal
    }

    public void outALogDefinition(ALogDefinition node) {
        Object adapter = adaptersToHandleNodes.get(ALogDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outALogDefinition(node);
        }
        super.outALogDefinition(node); // to continue the tree traversal
    }

    public void caseALogDefinition(ALogDefinition node) {
        Object adapter = adaptersToHandleNodes.get(ALogDefinition.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseALogDefinition(node);
        }
        super.caseALogDefinition(node); // to continue the tree traversal
    }

    public void inASingleTermUpdate(ASingleTermUpdate node) {
        Object adapter = adaptersToHandleNodes.get(ASingleTermUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASingleTermUpdate(node);
        }
        super.inASingleTermUpdate(node); // to continue the tree traversal
    }

    public void outASingleTermUpdate(ASingleTermUpdate node) {
        Object adapter = adaptersToHandleNodes.get(ASingleTermUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASingleTermUpdate(node);
        }
        super.outASingleTermUpdate(node); // to continue the tree traversal
    }

    public void caseASingleTermUpdate(ASingleTermUpdate node) {
        Object adapter = adaptersToHandleNodes.get(ASingleTermUpdate.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASingleTermUpdate(node);
        }
        super.caseASingleTermUpdate(node); // to continue the tree traversal
    }

    public void inASubArithOp(ASubArithOp node) {
        Object adapter = adaptersToHandleNodes.get(ASubArithOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASubArithOp(node);
        }
        super.inASubArithOp(node); // to continue the tree traversal
    }

    public void outASubArithOp(ASubArithOp node) {
        Object adapter = adaptersToHandleNodes.get(ASubArithOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASubArithOp(node);
        }
        super.outASubArithOp(node); // to continue the tree traversal
    }

    public void caseASubArithOp(ASubArithOp node) {
        Object adapter = adaptersToHandleNodes.get(ASubArithOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASubArithOp(node);
        }
        super.caseASubArithOp(node); // to continue the tree traversal
    }

    public void inAOomediatorAnykeyword(AOomediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOomediatorAnykeyword(node);
        }
        super.inAOomediatorAnykeyword(node); // to continue the tree traversal
    }

    public void outAOomediatorAnykeyword(AOomediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOomediatorAnykeyword(node);
        }
        super.outAOomediatorAnykeyword(node); // to continue the tree traversal
    }

    public void caseAOomediatorAnykeyword(AOomediatorAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOomediatorAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOomediatorAnykeyword(node);
        }
        super.caseAOomediatorAnykeyword(node); // to continue the tree traversal
    }

    public void inAActivitygroupAnykeyword(AActivitygroupAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAActivitygroupAnykeyword(node);
        }
        super.inAActivitygroupAnykeyword(node); // to continue the tree traversal
    }

    public void outAActivitygroupAnykeyword(AActivitygroupAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAActivitygroupAnykeyword(node);
        }
        super.outAActivitygroupAnykeyword(node); // to continue the tree traversal
    }

    public void caseAActivitygroupAnykeyword(AActivitygroupAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AActivitygroupAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAActivitygroupAnykeyword(node);
        }
        super.caseAActivitygroupAnykeyword(node); // to continue the tree traversal
    }

    public void inAEnables(AEnables node) {
        Object adapter = adaptersToHandleNodes.get(AEnables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEnables(node);
        }
        super.inAEnables(node); // to continue the tree traversal
    }

    public void outAEnables(AEnables node) {
        Object adapter = adaptersToHandleNodes.get(AEnables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEnables(node);
        }
        super.outAEnables(node); // to continue the tree traversal
    }

    public void caseAEnables(AEnables node) {
        Object adapter = adaptersToHandleNodes.get(AEnables.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEnables(node);
        }
        super.caseAEnables(node); // to continue the tree traversal
    }

    public void inAMergeAnykeyword(AMergeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMergeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMergeAnykeyword(node);
        }
        super.inAMergeAnykeyword(node); // to continue the tree traversal
    }

    public void outAMergeAnykeyword(AMergeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMergeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMergeAnykeyword(node);
        }
        super.outAMergeAnykeyword(node); // to continue the tree traversal
    }

    public void caseAMergeAnykeyword(AMergeAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AMergeAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMergeAnykeyword(node);
        }
        super.caseAMergeAnykeyword(node); // to continue the tree traversal
    }

    public void inADeleteModifier(ADeleteModifier node) {
        Object adapter = adaptersToHandleNodes.get(ADeleteModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inADeleteModifier(node);
        }
        super.inADeleteModifier(node); // to continue the tree traversal
    }

    public void outADeleteModifier(ADeleteModifier node) {
        Object adapter = adaptersToHandleNodes.get(ADeleteModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outADeleteModifier(node);
        }
        super.outADeleteModifier(node); // to continue the tree traversal
    }

    public void caseADeleteModifier(ADeleteModifier node) {
        Object adapter = adaptersToHandleNodes.get(ADeleteModifier.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseADeleteModifier(node);
        }
        super.caseADeleteModifier(node); // to continue the tree traversal
    }

    public void inAAndAnykeyword(AAndAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAndAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAndAnykeyword(node);
        }
        super.inAAndAnykeyword(node); // to continue the tree traversal
    }

    public void outAAndAnykeyword(AAndAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAndAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAndAnykeyword(node);
        }
        super.outAAndAnykeyword(node); // to continue the tree traversal
    }

    public void caseAAndAnykeyword(AAndAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AAndAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAndAnykeyword(node);
        }
        super.caseAAndAnykeyword(node); // to continue the tree traversal
    }

    public void inAInterruptibleregionGroup(AInterruptibleregionGroup node) {
        Object adapter = adaptersToHandleNodes.get(AInterruptibleregionGroup.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInterruptibleregionGroup(node);
        }
        super.inAInterruptibleregionGroup(node); // to continue the tree traversal
    }

    public void outAInterruptibleregionGroup(AInterruptibleregionGroup node) {
        Object adapter = adaptersToHandleNodes.get(AInterruptibleregionGroup.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInterruptibleregionGroup(node);
        }
        super.outAInterruptibleregionGroup(node); // to continue the tree traversal
    }

    public void caseAInterruptibleregionGroup(AInterruptibleregionGroup node) {
        Object adapter = adaptersToHandleNodes.get(AInterruptibleregionGroup.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInterruptibleregionGroup(node);
        }
        super.caseAInterruptibleregionGroup(node); // to continue the tree traversal
    }

    public void inAOrchIfOrchestrationRule(AOrchIfOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchIfOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchIfOrchestrationRule(node);
        }
        super.inAOrchIfOrchestrationRule(node); // to continue the tree traversal
    }

    public void outAOrchIfOrchestrationRule(AOrchIfOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchIfOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchIfOrchestrationRule(node);
        }
        super.outAOrchIfOrchestrationRule(node); // to continue the tree traversal
    }

    public void caseAOrchIfOrchestrationRule(AOrchIfOrchestrationRule node) {
        Object adapter = adaptersToHandleNodes.get(AOrchIfOrchestrationRule.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchIfOrchestrationRule(node);
        }
        super.caseAOrchIfOrchestrationRule(node); // to continue the tree traversal
    }

    public void inAImplicationExpr(AImplicationExpr node) {
        Object adapter = adaptersToHandleNodes.get(AImplicationExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAImplicationExpr(node);
        }
        super.inAImplicationExpr(node); // to continue the tree traversal
    }

    public void outAImplicationExpr(AImplicationExpr node) {
        Object adapter = adaptersToHandleNodes.get(AImplicationExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAImplicationExpr(node);
        }
        super.outAImplicationExpr(node); // to continue the tree traversal
    }

    public void caseAImplicationExpr(AImplicationExpr node) {
        Object adapter = adaptersToHandleNodes.get(AImplicationExpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAImplicationExpr(node);
        }
        super.caseAImplicationExpr(node); // to continue the tree traversal
    }

    public void inAQuantifiedSubexpr(AQuantifiedSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(AQuantifiedSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAQuantifiedSubexpr(node);
        }
        super.inAQuantifiedSubexpr(node); // to continue the tree traversal
    }

    public void outAQuantifiedSubexpr(AQuantifiedSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(AQuantifiedSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAQuantifiedSubexpr(node);
        }
        super.outAQuantifiedSubexpr(node); // to continue the tree traversal
    }

    public void caseAQuantifiedSubexpr(AQuantifiedSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(AQuantifiedSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAQuantifiedSubexpr(node);
        }
        super.caseAQuantifiedSubexpr(node); // to continue the tree traversal
    }

    public void inAIrilistIrilist(AIrilistIrilist node) {
        Object adapter = adaptersToHandleNodes.get(AIrilistIrilist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAIrilistIrilist(node);
        }
        super.inAIrilistIrilist(node); // to continue the tree traversal
    }

    public void outAIrilistIrilist(AIrilistIrilist node) {
        Object adapter = adaptersToHandleNodes.get(AIrilistIrilist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAIrilistIrilist(node);
        }
        super.outAIrilistIrilist(node); // to continue the tree traversal
    }

    public void caseAIrilistIrilist(AIrilistIrilist node) {
        Object adapter = adaptersToHandleNodes.get(AIrilistIrilist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAIrilistIrilist(node);
        }
        super.caseAIrilistIrilist(node); // to continue the tree traversal
    }

    public void inAVariableListVariablelist(AVariableListVariablelist node) {
        Object adapter = adaptersToHandleNodes.get(AVariableListVariablelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAVariableListVariablelist(node);
        }
        super.inAVariableListVariablelist(node); // to continue the tree traversal
    }

    public void outAVariableListVariablelist(AVariableListVariablelist node) {
        Object adapter = adaptersToHandleNodes.get(AVariableListVariablelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAVariableListVariablelist(node);
        }
        super.outAVariableListVariablelist(node); // to continue the tree traversal
    }

    public void caseAVariableListVariablelist(AVariableListVariablelist node) {
        Object adapter = adaptersToHandleNodes.get(AVariableListVariablelist.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAVariableListVariablelist(node);
        }
        super.caseAVariableListVariablelist(node); // to continue the tree traversal
    }

    public void inAOrchCashewOrchestrationFormalism(AOrchCashewOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchCashewOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchCashewOrchestrationFormalism(node);
        }
        super.inAOrchCashewOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void outAOrchCashewOrchestrationFormalism(AOrchCashewOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchCashewOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchCashewOrchestrationFormalism(node);
        }
        super.outAOrchCashewOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void caseAOrchCashewOrchestrationFormalism(AOrchCashewOrchestrationFormalism node) {
        Object adapter = adaptersToHandleNodes.get(AOrchCashewOrchestrationFormalism.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchCashewOrchestrationFormalism(node);
        }
        super.caseAOrchCashewOrchestrationFormalism(node); // to continue the tree traversal
    }

    public void inAJoinAnykeyword(AJoinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AJoinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAJoinAnykeyword(node);
        }
        super.inAJoinAnykeyword(node); // to continue the tree traversal
    }

    public void outAJoinAnykeyword(AJoinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AJoinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAJoinAnykeyword(node);
        }
        super.outAJoinAnykeyword(node); // to continue the tree traversal
    }

    public void caseAJoinAnykeyword(AJoinAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AJoinAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAJoinAnykeyword(node);
        }
        super.caseAJoinAnykeyword(node); // to continue the tree traversal
    }

    public void inAMultMathOp(AMultMathOp node) {
        Object adapter = adaptersToHandleNodes.get(AMultMathOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMultMathOp(node);
        }
        super.inAMultMathOp(node); // to continue the tree traversal
    }

    public void outAMultMathOp(AMultMathOp node) {
        Object adapter = adaptersToHandleNodes.get(AMultMathOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMultMathOp(node);
        }
        super.outAMultMathOp(node); // to continue the tree traversal
    }

    public void caseAMultMathOp(AMultMathOp node) {
        Object adapter = adaptersToHandleNodes.get(AMultMathOp.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMultMathOp(node);
        }
        super.caseAMultMathOp(node); // to continue the tree traversal
    }

    public void inAGeneralactionNode(AGeneralactionNode node) {
        Object adapter = adaptersToHandleNodes.get(AGeneralactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAGeneralactionNode(node);
        }
        super.inAGeneralactionNode(node); // to continue the tree traversal
    }

    public void outAGeneralactionNode(AGeneralactionNode node) {
        Object adapter = adaptersToHandleNodes.get(AGeneralactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAGeneralactionNode(node);
        }
        super.outAGeneralactionNode(node); // to continue the tree traversal
    }

    public void caseAGeneralactionNode(AGeneralactionNode node) {
        Object adapter = adaptersToHandleNodes.get(AGeneralactionNode.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAGeneralactionNode(node);
        }
        super.caseAGeneralactionNode(node); // to continue the tree traversal
    }

    public void inAAtomSimple(AAtomSimple node) {
        Object adapter = adaptersToHandleNodes.get(AAtomSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAAtomSimple(node);
        }
        super.inAAtomSimple(node); // to continue the tree traversal
    }

    public void outAAtomSimple(AAtomSimple node) {
        Object adapter = adaptersToHandleNodes.get(AAtomSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAAtomSimple(node);
        }
        super.outAAtomSimple(node); // to continue the tree traversal
    }

    public void caseAAtomSimple(AAtomSimple node) {
        Object adapter = adaptersToHandleNodes.get(AAtomSimple.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAAtomSimple(node);
        }
        super.caseAAtomSimple(node); // to continue the tree traversal
    }

    public void inATransitiveAttributefeature(ATransitiveAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(ATransitiveAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inATransitiveAttributefeature(node);
        }
        super.inATransitiveAttributefeature(node); // to continue the tree traversal
    }

    public void outATransitiveAttributefeature(ATransitiveAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(ATransitiveAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outATransitiveAttributefeature(node);
        }
        super.outATransitiveAttributefeature(node); // to continue the tree traversal
    }

    public void caseATransitiveAttributefeature(ATransitiveAttributefeature node) {
        Object adapter = adaptersToHandleNodes.get(ATransitiveAttributefeature.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseATransitiveAttributefeature(node);
        }
        super.caseATransitiveAttributefeature(node); // to continue the tree traversal
    }

    public void inAWgmediator(AWgmediator node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAWgmediator(node);
        }
        super.inAWgmediator(node); // to continue the tree traversal
    }

    public void outAWgmediator(AWgmediator node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAWgmediator(node);
        }
        super.outAWgmediator(node); // to continue the tree traversal
    }

    public void caseAWgmediator(AWgmediator node) {
        Object adapter = adaptersToHandleNodes.get(AWgmediator.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAWgmediator(node);
        }
        super.caseAWgmediator(node); // to continue the tree traversal
    }

    public void inAInModeId(AInModeId node) {
        Object adapter = adaptersToHandleNodes.get(AInModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAInModeId(node);
        }
        super.inAInModeId(node); // to continue the tree traversal
    }

    public void outAInModeId(AInModeId node) {
        Object adapter = adaptersToHandleNodes.get(AInModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAInModeId(node);
        }
        super.outAInModeId(node); // to continue the tree traversal
    }

    public void caseAInModeId(AInModeId node) {
        Object adapter = adaptersToHandleNodes.get(AInModeId.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAInModeId(node);
        }
        super.caseAInModeId(node); // to continue the tree traversal
    }

    public void inASharedvardef(ASharedvardef node) {
        Object adapter = adaptersToHandleNodes.get(ASharedvardef.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inASharedvardef(node);
        }
        super.inASharedvardef(node); // to continue the tree traversal
    }

    public void outASharedvardef(ASharedvardef node) {
        Object adapter = adaptersToHandleNodes.get(ASharedvardef.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outASharedvardef(node);
        }
        super.outASharedvardef(node); // to continue the tree traversal
    }

    public void caseASharedvardef(ASharedvardef node) {
        Object adapter = adaptersToHandleNodes.get(ASharedvardef.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseASharedvardef(node);
        }
        super.caseASharedvardef(node); // to continue the tree traversal
    }

    public void inAOntology(AOntology node) {
        Object adapter = adaptersToHandleNodes.get(AOntology.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOntology(node);
        }
        super.inAOntology(node); // to continue the tree traversal
    }

    public void outAOntology(AOntology node) {
        Object adapter = adaptersToHandleNodes.get(AOntology.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOntology(node);
        }
        super.outAOntology(node); // to continue the tree traversal
    }

    public void caseAOntology(AOntology node) {
        Object adapter = adaptersToHandleNodes.get(AOntology.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOntology(node);
        }
        super.caseAOntology(node); // to continue the tree traversal
    }

    public void inANotAnykeyword(ANotAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANotAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inANotAnykeyword(node);
        }
        super.inANotAnykeyword(node); // to continue the tree traversal
    }

    public void outANotAnykeyword(ANotAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANotAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outANotAnykeyword(node);
        }
        super.outANotAnykeyword(node); // to continue the tree traversal
    }

    public void caseANotAnykeyword(ANotAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(ANotAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseANotAnykeyword(node);
        }
        super.caseANotAnykeyword(node); // to continue the tree traversal
    }

    public void inAApplymediationAnykeyword(AApplymediationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AApplymediationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAApplymediationAnykeyword(node);
        }
        super.inAApplymediationAnykeyword(node); // to continue the tree traversal
    }

    public void outAApplymediationAnykeyword(AApplymediationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AApplymediationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAApplymediationAnykeyword(node);
        }
        super.outAApplymediationAnykeyword(node); // to continue the tree traversal
    }

    public void caseAApplymediationAnykeyword(AApplymediationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AApplymediationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAApplymediationAnykeyword(node);
        }
        super.caseAApplymediationAnykeyword(node); // to continue the tree traversal
    }

    public void inAPartnerlink(APartnerlink node) {
        Object adapter = adaptersToHandleNodes.get(APartnerlink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAPartnerlink(node);
        }
        super.inAPartnerlink(node); // to continue the tree traversal
    }

    public void outAPartnerlink(APartnerlink node) {
        Object adapter = adaptersToHandleNodes.get(APartnerlink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAPartnerlink(node);
        }
        super.outAPartnerlink(node); // to continue the tree traversal
    }

    public void caseAPartnerlink(APartnerlink node) {
        Object adapter = adaptersToHandleNodes.get(APartnerlink.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAPartnerlink(node);
        }
        super.caseAPartnerlink(node); // to continue the tree traversal
    }

    public void inAConceptModeModeEntry(AConceptModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(AConceptModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAConceptModeModeEntry(node);
        }
        super.inAConceptModeModeEntry(node); // to continue the tree traversal
    }

    public void outAConceptModeModeEntry(AConceptModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(AConceptModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAConceptModeModeEntry(node);
        }
        super.outAConceptModeModeEntry(node); // to continue the tree traversal
    }

    public void caseAConceptModeModeEntry(AConceptModeModeEntry node) {
        Object adapter = adaptersToHandleNodes.get(AConceptModeModeEntry.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAConceptModeModeEntry(node);
        }
        super.caseAConceptModeModeEntry(node); // to continue the tree traversal
    }

    public void inAMoreprefixdefinitions(AMoreprefixdefinitions node) {
        Object adapter = adaptersToHandleNodes.get(AMoreprefixdefinitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAMoreprefixdefinitions(node);
        }
        super.inAMoreprefixdefinitions(node); // to continue the tree traversal
    }

    public void outAMoreprefixdefinitions(AMoreprefixdefinitions node) {
        Object adapter = adaptersToHandleNodes.get(AMoreprefixdefinitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAMoreprefixdefinitions(node);
        }
        super.outAMoreprefixdefinitions(node); // to continue the tree traversal
    }

    public void caseAMoreprefixdefinitions(AMoreprefixdefinitions node) {
        Object adapter = adaptersToHandleNodes.get(AMoreprefixdefinitions.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAMoreprefixdefinitions(node);
        }
        super.caseAMoreprefixdefinitions(node); // to continue the tree traversal
    }

    public void inAComplexSubexpr(AComplexSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(AComplexSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAComplexSubexpr(node);
        }
        super.inAComplexSubexpr(node); // to continue the tree traversal
    }

    public void outAComplexSubexpr(AComplexSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(AComplexSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAComplexSubexpr(node);
        }
        super.outAComplexSubexpr(node); // to continue the tree traversal
    }

    public void caseAComplexSubexpr(AComplexSubexpr node) {
        Object adapter = adaptersToHandleNodes.get(AComplexSubexpr.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAComplexSubexpr(node);
        }
        super.caseAComplexSubexpr(node); // to continue the tree traversal
    }

    public void inAFlowfinalAnykeyword(AFlowfinalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AFlowfinalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAFlowfinalAnykeyword(node);
        }
        super.inAFlowfinalAnykeyword(node); // to continue the tree traversal
    }

    public void outAFlowfinalAnykeyword(AFlowfinalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AFlowfinalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAFlowfinalAnykeyword(node);
        }
        super.outAFlowfinalAnykeyword(node); // to continue the tree traversal
    }

    public void caseAFlowfinalAnykeyword(AFlowfinalAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AFlowfinalAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAFlowfinalAnykeyword(node);
        }
        super.caseAFlowfinalAnykeyword(node); // to continue the tree traversal
    }

    public void inAEffectAnykeyword(AEffectAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEffectAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAEffectAnykeyword(node);
        }
        super.inAEffectAnykeyword(node); // to continue the tree traversal
    }

    public void outAEffectAnykeyword(AEffectAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEffectAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAEffectAnykeyword(node);
        }
        super.outAEffectAnykeyword(node); // to continue the tree traversal
    }

    public void caseAEffectAnykeyword(AEffectAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AEffectAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAEffectAnykeyword(node);
        }
        super.caseAEffectAnykeyword(node); // to continue the tree traversal
    }

    public void inAOrchestrationAnykeyword(AOrchestrationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestrationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).inAOrchestrationAnykeyword(node);
        }
        super.inAOrchestrationAnykeyword(node); // to continue the tree traversal
    }

    public void outAOrchestrationAnykeyword(AOrchestrationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestrationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).outAOrchestrationAnykeyword(node);
        }
        super.outAOrchestrationAnykeyword(node); // to continue the tree traversal
    }

    public void caseAOrchestrationAnykeyword(AOrchestrationAnykeyword node) {
        Object adapter = adaptersToHandleNodes.get(AOrchestrationAnykeyword.class);
        if (adapter != null && adapter instanceof ASTAnalysis) {
            ((ASTAnalysis) adapter).caseAOrchestrationAnykeyword(node);
        }
        super.caseAOrchestrationAnykeyword(node); // to continue the tree traversal
    }

    public final static String[] WSML_TOKENS = new String[] {"in", ":-", "choose", "deferredWhile", "invokeService", "ontology", "mediation", "perform", "importsOntology", "with", ":=:", "memberOf", "wsmlVariant", "and", "wwMediator", "inverseOf", "(", "stateSignature", "while", "ggMediator", "assumption", "generalAction", "unless", "precondition", "capability", "outputPin", "}", "sendEventAction", "reflexive", "!=", "controlFlow", "relationInstance", "postcondition", "controlled", "extraction", "achieveGoal", "subRelationOf", "startNode", "deferredUntil", "endForall", "interface", "xor", "=<", "dataFlow", "do", "#", ">=", "]", "<", "axiom", "aggregation", "dataflowMediators", "ooMediator", "flowStart", "else", "until", "usesService", "static", "instance", "usesMediator", "wgMediator", "choreography", "repeat", "+", "delete", "|", "forall", "defines", "send", "source", "interruptibleRegion", "relation", "definedBy", "workflow", "=>", "namespace", "partnerLink", "carriesConcept", "ssLink", "shared", "objectNode", "sequential", "concept", "endIf", ">", "hasCapability", "acceptEventAction", "*", "_#", "true", "pfMediator", "-", "symmetric", "interrupts", "merge", "impliesType", ")", "hasValue", "subConceptOf", "guard", "join", "inputPin", "add", "fork", "sharedVariables", "appliesChoreography", "false", "then", "transitionRules", "endCapability", "out", "orchestration", "concurrent", "activityDiagram", "goal", "update", "webService", ",", "interleaved", "effect", "=", "operation", "endChoose", "ppMediator", "receive", "enables", "activityFinal", "activityGroup", "target", "flowFinal", "{", "if", "withGrounding", "decision", "cashewWorkflow", "!-", "/", "deferredChoice", "[", "@", "or", "applyMediation", "ofType", "mediator", "transitive", "abstractStateMachine", "exists"};

}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.wsmo.wsml.compiler.lexer;

import java.io.*;
import java.util.*;
import org.wsmo.wsml.compiler.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 86:
                        {
                            Token token = new86(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 87:
                        {
                            Token token = new87(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 88:
                        {
                            Token token = new88(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 89:
                        {
                            Token token = new89(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 90:
                        {
                            Token token = new90(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 91:
                        {
                            Token token = new91(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 92:
                        {
                            Token token = new92(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 93:
                        {
                            Token token = new93(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 94:
                        {
                            Token token = new94(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 95:
                        {
                            Token token = new95(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 96:
                        {
                            Token token = new96(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 97:
                        {
                            Token token = new97(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 98:
                        {
                            Token token = new98(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 99:
                        {
                            Token token = new99(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 100:
                        {
                            Token token = new100(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 101:
                        {
                            Token token = new101(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 102:
                        {
                            Token token = new102(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 103:
                        {
                            Token token = new103(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 104:
                        {
                            Token token = new104(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 105:
                        {
                            Token token = new105(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 106:
                        {
                            Token token = new106(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 107:
                        {
                            Token token = new107(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 108:
                        {
                            Token token = new108(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 109:
                        {
                            Token token = new109(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 110:
                        {
                            Token token = new110(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 111:
                        {
                            Token token = new111(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 112:
                        {
                            Token token = new112(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 113:
                        {
                            Token token = new113(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 114:
                        {
                            Token token = new114(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 115:
                        {
                            Token token = new115(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 116:
                        {
                            Token token = new116(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 117:
                        {
                            Token token = new117(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 118:
                        {
                            Token token = new118(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 119:
                        {
                            Token token = new119(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 120:
                        {
                            Token token = new120(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 121:
                        {
                            Token token = new121(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 122:
                        {
                            Token token = new122(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 123:
                        {
                            Token token = new123(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 124:
                        {
                            Token token = new124(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 125:
                        {
                            Token token = new125(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 126:
                        {
                            Token token = new126(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 127:
                        {
                            Token token = new127(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 128:
                        {
                            Token token = new128(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 129:
                        {
                            Token token = new129(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 130:
                        {
                            Token token = new130(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 131:
                        {
                            Token token = new131(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 132:
                        {
                            Token token = new132(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 133:
                        {
                            Token token = new133(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 134:
                        {
                            Token token = new134(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 135:
                        {
                            Token token = new135(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 136:
                        {
                            Token token = new136(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 137:
                        {
                            Token token = new137(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 138:
                        {
                            Token token = new138(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 139:
                        {
                            Token token = new139(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 140:
                        {
                            Token token = new140(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 141:
                        {
                            Token token = new141(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 142:
                        {
                            Token token = new142(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 143:
                        {
                            Token token = new143(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 144:
                        {
                            Token token = new144(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 145:
                        {
                            Token token = new145(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 146:
                        {
                            Token token = new146(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 147:
                        {
                            Token token = new147(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 148:
                        {
                            Token token = new148(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 149:
                        {
                            Token token = new149(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 150:
                        {
                            Token token = new150(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 151:
                        {
                            Token token = new151(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 152:
                        {
                            Token token = new152(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 153:
                        {
                            Token token = new153(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 154:
                        {
                            Token token = new154(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 155:
                        {
                            Token token = new155(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 156:
                        {
                            Token token = new156(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 157:
                        {
                            Token token = new157(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 158:
                        {
                            Token token = new158(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 159:
                        {
                            Token token = new159(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 160:
                        {
                            Token token = new160(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 161:
                        {
                            Token token = new161(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 162:
                        {
                            Token token = new162(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TTBlank(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TTComment(text, line, pos); }
    Token new2(int line, int pos) { return new TComma(line, pos); }
    Token new3(String text, int line, int pos) { return new TEndpoint(text, line, pos); }
    Token new4(int line, int pos) { return new TLpar(line, pos); }
    Token new5(int line, int pos) { return new TRpar(line, pos); }
    Token new6(int line, int pos) { return new TLbracket(line, pos); }
    Token new7(int line, int pos) { return new TRbracket(line, pos); }
    Token new8(int line, int pos) { return new TLbrace(line, pos); }
    Token new9(int line, int pos) { return new TRbrace(line, pos); }
    Token new10(int line, int pos) { return new THash(line, pos); }
    Token new11(int line, int pos) { return new TTAnd(line, pos); }
    Token new12(int line, int pos) { return new TTOr(line, pos); }
    Token new13(String text, int line, int pos) { return new TTImplies(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TTImpliedBy(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TTEquivalent(text, line, pos); }
    Token new16(int line, int pos) { return new TTImpliedByLp(line, pos); }
    Token new17(int line, int pos) { return new TTConstraint(line, pos); }
    Token new18(String text, int line, int pos) { return new TTNot(text, line, pos); }
    Token new19(int line, int pos) { return new TTExists(line, pos); }
    Token new20(int line, int pos) { return new TTForall(line, pos); }
    Token new21(int line, int pos) { return new TTUnivfalse(line, pos); }
    Token new22(int line, int pos) { return new TTUnivtrue(line, pos); }
    Token new23(int line, int pos) { return new TGt(line, pos); }
    Token new24(int line, int pos) { return new TLt(line, pos); }
    Token new25(int line, int pos) { return new TGte(line, pos); }
    Token new26(int line, int pos) { return new TLte(line, pos); }
    Token new27(int line, int pos) { return new TEqual(line, pos); }
    Token new28(int line, int pos) { return new TStrongEqual(line, pos); }
    Token new29(int line, int pos) { return new TUnequal(line, pos); }
    Token new30(int line, int pos) { return new TAddOp(line, pos); }
    Token new31(int line, int pos) { return new TSubOp(line, pos); }
    Token new32(int line, int pos) { return new TStar(line, pos); }
    Token new33(int line, int pos) { return new TDivOp(line, pos); }
    Token new34(int line, int pos) { return new TTAssumption(line, pos); }
    Token new35(int line, int pos) { return new TTAxiom(line, pos); }
    Token new36(int line, int pos) { return new TTCapability(line, pos); }
    Token new37(int line, int pos) { return new TTChoreography(line, pos); }
    Token new38(int line, int pos) { return new TTConcept(line, pos); }
    Token new39(int line, int pos) { return new TTDefinedby(line, pos); }
    Token new40(int line, int pos) { return new TTEffect(line, pos); }
    Token new41(String text, int line, int pos) { return new TTEndnfp(text, line, pos); }
    Token new42(int line, int pos) { return new TTGgmediator(line, pos); }
    Token new43(int line, int pos) { return new TTGoal(line, pos); }
    Token new44(int line, int pos) { return new TTHasvalue(line, pos); }
    Token new45(int line, int pos) { return new TTImpliestype(line, pos); }
    Token new46(int line, int pos) { return new TTImportontology(line, pos); }
    Token new47(int line, int pos) { return new TTInstance(line, pos); }
    Token new48(int line, int pos) { return new TTInterface(line, pos); }
    Token new49(int line, int pos) { return new TTInverseof(line, pos); }
    Token new50(int line, int pos) { return new TTMemberof(line, pos); }
    Token new51(int line, int pos) { return new TTNamespace(line, pos); }
    Token new52(String text, int line, int pos) { return new TTNfp(text, line, pos); }
    Token new53(int line, int pos) { return new TTOftype(line, pos); }
    Token new54(int line, int pos) { return new TTOntology(line, pos); }
    Token new55(int line, int pos) { return new TTOomediator(line, pos); }
    Token new56(int line, int pos) { return new TTOrchestration(line, pos); }
    Token new57(int line, int pos) { return new TTPostcondition(line, pos); }
    Token new58(int line, int pos) { return new TTPrecondition(line, pos); }
    Token new59(int line, int pos) { return new TTReflexive(line, pos); }
    Token new60(int line, int pos) { return new TTRelation(line, pos); }
    Token new61(int line, int pos) { return new TTRelationInstance(line, pos); }
    Token new62(int line, int pos) { return new TTSharedvariable(line, pos); }
    Token new63(int line, int pos) { return new TTSource(line, pos); }
    Token new64(int line, int pos) { return new TTSubconcept(line, pos); }
    Token new65(int line, int pos) { return new TTSubrelation(line, pos); }
    Token new66(int line, int pos) { return new TTSymmetric(line, pos); }
    Token new67(int line, int pos) { return new TTTarget(line, pos); }
    Token new68(int line, int pos) { return new TTTransitive(line, pos); }
    Token new69(int line, int pos) { return new TTUsemediator(line, pos); }
    Token new70(int line, int pos) { return new TTUseservice(line, pos); }
    Token new71(int line, int pos) { return new TTWebservice(line, pos); }
    Token new72(int line, int pos) { return new TTWgmediator(line, pos); }
    Token new73(int line, int pos) { return new TTWsmlvariant(line, pos); }
    Token new74(int line, int pos) { return new TTWwmediator(line, pos); }
    Token new75(int line, int pos) { return new TTPerform(line, pos); }
    Token new76(int line, int pos) { return new TTAchievegoal(line, pos); }
    Token new77(int line, int pos) { return new TTMediation(line, pos); }
    Token new78(int line, int pos) { return new TTReceive(line, pos); }
    Token new79(int line, int pos) { return new TTSend(line, pos); }
    Token new80(int line, int pos) { return new TTWorkflow(line, pos); }
    Token new81(int line, int pos) { return new TTPpmediator(line, pos); }
    Token new82(int line, int pos) { return new TTPfmediator(line, pos); }
    Token new83(int line, int pos) { return new TTAdd(line, pos); }
    Token new84(int line, int pos) { return new TTAt(line, pos); }
    Token new85(int line, int pos) { return new TTAsm(line, pos); }
    Token new86(int line, int pos) { return new TTChoose(line, pos); }
    Token new87(int line, int pos) { return new TTControlled(line, pos); }
    Token new88(int line, int pos) { return new TTDelete(line, pos); }
    Token new89(int line, int pos) { return new TTDo(line, pos); }
    Token new90(int line, int pos) { return new TTEndcapability(line, pos); }
    Token new91(int line, int pos) { return new TTEndchoose(line, pos); }
    Token new92(int line, int pos) { return new TTEndforall(line, pos); }
    Token new93(int line, int pos) { return new TTEndif(line, pos); }
    Token new94(int line, int pos) { return new TTHascapability(line, pos); }
    Token new95(int line, int pos) { return new TTTransitions(line, pos); }
    Token new96(int line, int pos) { return new TTIf(line, pos); }
    Token new97(int line, int pos) { return new TTIn(line, pos); }
    Token new98(int line, int pos) { return new TTMoveto(line, pos); }
    Token new99(int line, int pos) { return new TTOut(line, pos); }
    Token new100(int line, int pos) { return new TTPipe(line, pos); }
    Token new101(int line, int pos) { return new TTShared(line, pos); }
    Token new102(int line, int pos) { return new TTStateSignature(line, pos); }
    Token new103(int line, int pos) { return new TTStatic(line, pos); }
    Token new104(int line, int pos) { return new TTThen(line, pos); }
    Token new105(int line, int pos) { return new TTUpdate(line, pos); }
    Token new106(int line, int pos) { return new TTWith(line, pos); }
    Token new107(int line, int pos) { return new TTWithGrounding(line, pos); }
    Token new108(int line, int pos) { return new TTApplieschoreography(line, pos); }
    Token new109(int line, int pos) { return new TTInvokeservice(line, pos); }
    Token new110(int line, int pos) { return new TTApplymediation(line, pos); }
    Token new111(int line, int pos) { return new TTActivitygroup(line, pos); }
    Token new112(int line, int pos) { return new TTActivitydiagram(line, pos); }
    Token new113(int line, int pos) { return new TTGeneralaction(line, pos); }
    Token new114(int line, int pos) { return new TTAdmediator(line, pos); }
    Token new115(int line, int pos) { return new TTAggregation(line, pos); }
    Token new116(int line, int pos) { return new TTFlowstart(line, pos); }
    Token new117(int line, int pos) { return new TTFlowfinal(line, pos); }
    Token new118(int line, int pos) { return new TTActivityfinal(line, pos); }
    Token new119(int line, int pos) { return new TTExtraction(line, pos); }
    Token new120(int line, int pos) { return new TTFork(line, pos); }
    Token new121(int line, int pos) { return new TTJoin(line, pos); }
    Token new122(int line, int pos) { return new TTDecision(line, pos); }
    Token new123(int line, int pos) { return new TTMerge(line, pos); }
    Token new124(int line, int pos) { return new TTSendeventaction(line, pos); }
    Token new125(int line, int pos) { return new TTAccepteventaction(line, pos); }
    Token new126(int line, int pos) { return new TTInputpin(line, pos); }
    Token new127(int line, int pos) { return new TTInterruptibleregion(line, pos); }
    Token new128(int line, int pos) { return new TTObjectnode(line, pos); }
    Token new129(int line, int pos) { return new TTOutputpin(line, pos); }
    Token new130(int line, int pos) { return new TTOperation(line, pos); }
    Token new131(int line, int pos) { return new TTControlflow(line, pos); }
    Token new132(int line, int pos) { return new TTDataflow(line, pos); }
    Token new133(int line, int pos) { return new TTGuard(line, pos); }
    Token new134(int line, int pos) { return new TTElse(line, pos); }
    Token new135(int line, int pos) { return new TTStartnode(line, pos); }
    Token new136(int line, int pos) { return new TTInterrupts(line, pos); }
    Token new137(int line, int pos) { return new TTSslink(line, pos); }
    Token new138(int line, int pos) { return new TTCarriesconcept(line, pos); }
    Token new139(int line, int pos) { return new TTPartnerlink(line, pos); }
    Token new140(int line, int pos) { return new TTEnables(line, pos); }
    Token new141(int line, int pos) { return new TTCashewworkflow(line, pos); }
    Token new142(int line, int pos) { return new TTDefines(line, pos); }
    Token new143(int line, int pos) { return new TTSequential(line, pos); }
    Token new144(int line, int pos) { return new TTConcurrent(line, pos); }
    Token new145(int line, int pos) { return new TTInterleaved(line, pos); }
    Token new146(int line, int pos) { return new TTXor(line, pos); }
    Token new147(int line, int pos) { return new TTWhile(line, pos); }
    Token new148(int line, int pos) { return new TTUntil(line, pos); }
    Token new149(int line, int pos) { return new TTDeferredchoice(line, pos); }
    Token new150(int line, int pos) { return new TTDeferredwhile(line, pos); }
    Token new151(int line, int pos) { return new TTDeferreduntil(line, pos); }
    Token new152(int line, int pos) { return new TTUnless(line, pos); }
    Token new153(int line, int pos) { return new TTRepeat(line, pos); }
    Token new154(int line, int pos) { return new TTDataflowmediators(line, pos); }
    Token new155(String text, int line, int pos) { return new TVariable(text, line, pos); }
    Token new156(int line, int pos) { return new TAnonymous(line, pos); }
    Token new157(String text, int line, int pos) { return new TNbAnonymous(text, line, pos); }
    Token new158(String text, int line, int pos) { return new TPosInteger(text, line, pos); }
    Token new159(String text, int line, int pos) { return new TPosDecimal(text, line, pos); }
    Token new160(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new161(String text, int line, int pos) { return new TFullIri(text, line, pos); }
    Token new162(String text, int line, int pos) { return new TName(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {40, 40, 8}, {41, 41, 9}, {42, 42, 10}, {43, 43, 11}, {44, 44, 12}, {45, 45, 13}, {46, 46, 14}, {47, 47, 15}, {48, 57, 16}, {58, 58, 17}, {60, 60, 18}, {61, 61, 19}, {62, 62, 20}, {63, 63, 21}, {64, 64, 22}, {65, 90, 23}, {91, 91, 24}, {93, 93, 25}, {95, 95, 26}, {97, 97, 27}, {98, 98, 28}, {99, 99, 29}, {100, 100, 30}, {101, 101, 31}, {102, 102, 32}, {103, 103, 33}, {104, 104, 34}, {105, 105, 35}, {106, 106, 36}, {107, 108, 28}, {109, 109, 37}, {110, 110, 38}, {111, 111, 39}, {112, 112, 40}, {113, 113, 28}, {114, 114, 41}, {115, 115, 42}, {116, 116, 43}, {117, 117, 44}, {118, 118, 28}, {119, 119, 45}, {120, 120, 46}, {121, 122, 28}, {123, 123, 47}, {124, 124, 48}, {125, 125, 49}, {192, 214, 50}, {216, 246, 51}, {248, 255, 52}, {256, 305, 53}, {308, 318, 54}, {321, 328, 55}, {330, 382, 56}, {384, 451, 57}, {461, 496, 58}, {500, 501, 59}, {506, 535, 60}, {592, 680, 61}, {699, 705, 62}, {902, 902, 63}, {904, 906, 64}, {908, 908, 65}, {910, 929, 66}, {931, 974, 67}, {976, 982, 68}, {986, 986, 69}, {988, 988, 70}, {990, 990, 71}, {992, 992, 72}, {994, 1011, 73}, {1025, 1036, 74}, {1038, 1103, 75}, {1105, 1116, 76}, {1118, 1153, 77}, {1168, 1220, 78}, {1223, 1224, 79}, {1227, 1228, 80}, {1232, 1259, 81}, {1262, 1269, 82}, {1272, 1273, 83}, {1329, 1366, 84}, {1369, 1369, 85}, {1377, 1414, 86}, {1488, 1514, 87}, {1520, 1522, 88}, {1569, 1594, 89}, {1601, 1610, 90}, {1649, 1719, 91}, {1722, 1726, 92}, {1728, 1742, 93}, {1744, 1747, 94}, {1749, 1749, 95}, {1765, 1766, 96}, {12295, 12295, 97}, {12321, 12329, 98}, {19968, 40869, 99}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 100}, {13, 32, -2}, },
            {{9, 32, -2}, },
            {{45, 45, 101}, {61, 61, 102}, },
            {{0, 33, 103}, {34, 34, 104}, {35, 91, 103}, {92, 92, 105}, {93, 65535, 103}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{62, 62, 106}, },
            {{9, 9, 107}, {10, 10, 108}, {13, 13, 109}, {32, 32, 110}, },
            {{42, 42, 111}, {47, 47, 112}, },
            {{46, 46, 113}, {48, 57, 16}, },
            {{45, 45, 114}, {61, 61, 115}, },
            {{45, 45, 116}, },
            {{60, 60, 117}, {62, 62, 118}, },
            {{61, 61, 119}, },
            {{48, 57, 120}, {65, 90, 121}, {97, 122, 122}, {192, 214, 123}, {216, 246, 124}, {248, 255, 125}, {256, 305, 126}, {308, 318, 127}, {321, 328, 128}, {330, 382, 129}, {384, 451, 130}, {461, 496, 131}, {500, 501, 132}, {506, 535, 133}, {592, 680, 134}, {699, 705, 135}, {902, 902, 136}, {904, 906, 137}, {908, 908, 138}, {910, 929, 139}, {931, 974, 140}, {976, 982, 141}, {986, 986, 142}, {988, 988, 143}, {990, 990, 144}, {992, 992, 145}, {994, 1011, 146}, {1025, 1036, 147}, {1038, 1103, 148}, {1105, 1116, 149}, {1118, 1153, 150}, {1168, 1220, 151}, {1223, 1224, 152}, {1227, 1228, 153}, {1232, 1259, 154}, {1262, 1269, 155}, {1272, 1273, 156}, {1329, 1366, 157}, {1369, 1369, 158}, {1377, 1414, 159}, {1488, 1514, 160}, {1520, 1522, 161}, {1569, 1594, 162}, {1601, 1610, 163}, {1649, 1719, 164}, {1722, 1726, 165}, {1728, 1742, 166}, {1744, 1747, 167}, {1749, 1749, 168}, {1765, 1766, 169}, {12295, 12295, 170}, {12321, 12329, 171}, {19968, 40869, 172}, },
            {},
            {{48, 57, 173}, {65, 90, 174}, {92, 92, 175}, {95, 95, 176}, {97, 122, 177}, {183, 183, 178}, {192, 214, 179}, {216, 246, 180}, {248, 255, 181}, {256, 305, 182}, {308, 318, 183}, {321, 328, 184}, {330, 382, 185}, {384, 451, 186}, {461, 496, 187}, {500, 501, 188}, {506, 535, 189}, {592, 680, 190}, {699, 705, 191}, {720, 720, 192}, {721, 721, 193}, {768, 837, 194}, {864, 865, 195}, {902, 902, 196}, {903, 903, 197}, {904, 906, 198}, {908, 908, 199}, {910, 929, 200}, {931, 974, 201}, {976, 982, 202}, {986, 986, 203}, {988, 988, 204}, {990, 990, 205}, {992, 992, 206}, {994, 1011, 207}, {1025, 1036, 208}, {1038, 1103, 209}, {1105, 1116, 210}, {1118, 1153, 211}, {1155, 1158, 212}, {1168, 1220, 213}, {1223, 1224, 214}, {1227, 1228, 215}, {1232, 1259, 216}, {1262, 1269, 217}, {1272, 1273, 218}, {1329, 1366, 219}, {1369, 1369, 220}, {1377, 1414, 221}, {1425, 1441, 222}, {1443, 1465, 223}, {1467, 1469, 224}, {1471, 1471, 225}, {1473, 1474, 226}, {1476, 1476, 227}, {1488, 1514, 228}, {1520, 1522, 229}, {1569, 1594, 230}, {1600, 1600, 231}, {1601, 1610, 232}, {1611, 1618, 233}, {1648, 1648, 234}, {1649, 1719, 235}, {1722, 1726, 236}, {1728, 1742, 237}, {1744, 1747, 238}, {1749, 1749, 239}, {1750, 1756, 240}, {1757, 1759, 241}, {1760, 1764, 242}, {1765, 1766, 243}, {1767, 1768, 244}, {1770, 1773, 245}, {3654, 3654, 246}, {3782, 3782, 247}, {12293, 12293, 248}, {12295, 12295, 249}, {12321, 12329, 250}, {12337, 12341, 251}, {12445, 12446, 252}, {12540, 12542, 253}, {19968, 40869, 254}, },
            {},
            {},
            {{34, 34, 255}, {35, 35, 256}, {48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 177}, {98, 98, 257}, {99, 99, 258}, {100, 100, 259}, {101, 102, 177}, {103, 103, 260}, {104, 109, 177}, {110, 110, 261}, {111, 111, 177}, {112, 112, 262}, {113, 114, 177}, {115, 115, 263}, {116, 119, 177}, {120, 120, 264}, {121, 122, 177}, {183, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 265}, {98, 103, 177}, {104, 104, 266}, {105, 110, 177}, {111, 111, 267}, {112, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 268}, {98, 100, 177}, {101, 101, 269}, {102, 110, 177}, {111, 111, 270}, {112, 40869, -31}, },
            {{48, 95, -25}, {97, 101, 177}, {102, 102, 271}, {103, 107, 177}, {108, 108, 272}, {109, 109, 177}, {110, 110, 273}, {111, 112, 177}, {113, 113, 274}, {114, 119, 177}, {120, 120, 275}, {121, 40869, -29}, },
            {{48, 95, -25}, {97, 97, 276}, {98, 107, 177}, {108, 108, 277}, {109, 110, 177}, {111, 111, 278}, {112, 40869, -31}, },
            {{48, 95, -25}, {97, 100, 177}, {101, 101, 279}, {102, 102, 177}, {103, 103, 280}, {104, 110, 177}, {111, 111, 281}, {112, 116, 177}, {117, 117, 282}, {118, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 283}, {98, 122, 177}, {183, 40869, -25}, },
            {{48, 101, -33}, {102, 102, 284}, {103, 108, 177}, {109, 109, 285}, {110, 110, 286}, {111, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 110, 177}, {111, 111, 287}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 288}, {102, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 289}, {98, 100, 177}, {101, 101, 290}, {102, 102, 291}, {103, 110, 177}, {111, 111, 292}, {112, 40869, -31}, },
            {{48, 97, -29}, {98, 98, 293}, {99, 101, 177}, {102, 102, 294}, {103, 109, 177}, {110, 110, 295}, {111, 111, 296}, {112, 112, 297}, {113, 113, 177}, {114, 114, 298}, {115, 116, 177}, {117, 117, 299}, {118, 40869, -35}, },
            {{48, 95, -25}, {97, 97, 300}, {98, 100, 177}, {101, 101, 301}, {102, 102, 302}, {103, 110, 177}, {111, 111, 303}, {112, 112, 304}, {113, 113, 177}, {114, 114, 305}, {115, 122, 177}, {183, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 306}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 307}, {102, 103, 177}, {104, 104, 308}, {105, 110, 177}, {111, 111, 309}, {112, 114, 177}, {115, 115, 310}, {116, 116, 311}, {117, 117, 312}, {118, 120, 177}, {121, 121, 313}, {122, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 314}, {98, 103, 177}, {104, 104, 315}, {105, 113, 177}, {114, 114, 316}, {115, 40869, -42}, },
            {{48, 95, -25}, {97, 109, 177}, {110, 110, 317}, {111, 111, 177}, {112, 112, 318}, {113, 114, 177}, {115, 115, 319}, {116, 122, 177}, {183, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 320}, {102, 102, 177}, {103, 103, 321}, {104, 104, 322}, {105, 105, 323}, {106, 110, 177}, {111, 111, 324}, {112, 114, 177}, {115, 115, 325}, {116, 118, 177}, {119, 119, 326}, {120, 122, 177}, {183, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 327}, {112, 40869, -31}, },
            {},
            {},
            {},
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{9, 32, -2}, },
            {},
            {},
            {{0, 65535, -8}, },
            {},
            {{0, 65535, 328}, },
            {},
            {{9, 32, -16}, },
            {{9, 32, -16}, },
            {{9, 9, 107}, {10, 10, 329}, {13, 32, -16}, },
            {{9, 32, -16}, },
            {{0, 41, 330}, {42, 42, 331}, {43, 46, 330}, {47, 47, 332}, {48, 65535, 330}, },
            {{0, 9, 333}, {10, 10, 334}, {11, 12, 333}, {13, 13, 335}, {14, 65535, 333}, },
            {{48, 57, 336}, },
            {},
            {{58, 58, 337}, },
            {{62, 62, 338}, },
            {},
            {},
            {},
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -23}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{45, 45, 339}, {46, 46, 340}, {48, 57, 341}, {65, 90, 342}, {95, 95, 343}, {97, 122, 344}, {183, 183, 345}, {192, 214, 346}, {216, 246, 347}, {248, 255, 348}, {256, 305, 349}, {308, 318, 350}, {321, 328, 351}, {330, 382, 352}, {384, 451, 353}, {461, 496, 354}, {500, 501, 355}, {506, 535, 356}, {592, 680, 357}, {699, 705, 358}, {720, 720, 359}, {721, 721, 360}, {768, 837, 361}, {864, 865, 362}, {902, 902, 363}, {903, 903, 364}, {904, 906, 365}, {908, 908, 366}, {910, 929, 367}, {931, 974, 368}, {976, 982, 369}, {986, 986, 370}, {988, 988, 371}, {990, 990, 372}, {992, 992, 373}, {994, 1011, 374}, {1025, 1036, 375}, {1038, 1103, 376}, {1105, 1116, 377}, {1118, 1153, 378}, {1155, 1158, 379}, {1168, 1220, 380}, {1223, 1224, 381}, {1227, 1228, 382}, {1232, 1259, 383}, {1262, 1269, 384}, {1272, 1273, 385}, {1329, 1366, 386}, {1369, 1369, 387}, {1377, 1414, 388}, {1425, 1441, 389}, {1443, 1465, 390}, {1467, 1469, 391}, {1471, 1471, 392}, {1473, 1474, 393}, {1476, 1476, 394}, {1488, 1514, 395}, {1520, 1522, 396}, {1569, 1594, 397}, {1600, 1600, 398}, {1601, 1610, 399}, {1611, 1618, 400}, {1648, 1648, 401}, {1649, 1719, 402}, {1722, 1726, 403}, {1728, 1742, 404}, {1744, 1747, 405}, {1749, 1749, 406}, {1750, 1756, 407}, {1757, 1759, 408}, {1760, 1764, 409}, {1765, 1766, 410}, {1767, 1768, 411}, {1770, 1773, 412}, {3654, 3654, 413}, {3782, 3782, 414}, {12293, 12293, 415}, {12295, 12295, 416}, {12321, 12329, 417}, {12337, 12341, 418}, {12445, 12446, 419}, {12540, 12542, 420}, {19968, 40869, 421}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{65, 90, 422}, {97, 122, 423}, {192, 214, 424}, {216, 246, 425}, {248, 255, 426}, {256, 305, 427}, {308, 318, 428}, {321, 328, 429}, {330, 382, 430}, {384, 451, 431}, {461, 496, 432}, {500, 501, 433}, {506, 535, 434}, {592, 680, 435}, {699, 705, 436}, {902, 902, 437}, {904, 906, 438}, {908, 908, 439}, {910, 929, 440}, {931, 974, 441}, {976, 982, 442}, {986, 986, 443}, {988, 988, 444}, {990, 990, 445}, {992, 992, 446}, {994, 1011, 447}, {1025, 1036, 448}, {1038, 1103, 449}, {1105, 1116, 450}, {1118, 1153, 451}, {1168, 1220, 452}, {1223, 1224, 453}, {1227, 1228, 454}, {1232, 1259, 455}, {1262, 1269, 456}, {1272, 1273, 457}, {1329, 1366, 458}, {1369, 1369, 459}, {1377, 1414, 460}, {1488, 1514, 461}, {1520, 1522, 462}, {1569, 1594, 463}, {1601, 1610, 464}, {1649, 1719, 465}, {1722, 1726, 466}, {1728, 1742, 467}, {1744, 1747, 468}, {1749, 1749, 469}, {1765, 1766, 470}, {12295, 12295, 471}, {12321, 12329, 472}, {19968, 40869, 473}, },
            {{48, 57, 474}, },
            {{48, 95, -25}, {97, 114, 177}, {115, 115, 475}, {116, 40869, -46}, },
            {{48, 95, -25}, {97, 98, 177}, {99, 99, 476}, {100, 103, 177}, {104, 104, 477}, {105, 115, 177}, {116, 116, 478}, {117, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 99, 177}, {100, 100, 479}, {101, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 102, 177}, {103, 103, 480}, {104, 122, 177}, {183, 40869, -25}, },
            {{48, 99, -261}, {100, 100, 481}, {101, 40869, -261}, },
            {{48, 95, -25}, {97, 111, 177}, {112, 112, 482}, {113, 122, 177}, {183, 40869, -25}, },
            {{48, 114, -259}, {115, 115, 483}, {116, 40869, -46}, },
            {{48, 95, -25}, {97, 104, 177}, {105, 105, 484}, {106, 122, 177}, {183, 40869, -25}, },
            {{48, 111, -264}, {112, 112, 485}, {113, 113, 177}, {114, 114, 486}, {115, 115, 487}, {116, 40869, -46}, },
            {{48, 110, -38}, {111, 111, 488}, {112, 40869, -31}, },
            {{48, 95, -25}, {97, 108, 177}, {109, 109, 489}, {110, 110, 490}, {111, 40869, -37}, },
            {{48, 95, -25}, {97, 115, 177}, {116, 116, 491}, {117, 40869, -260}, },
            {{48, 98, -260}, {99, 99, 492}, {100, 101, 177}, {102, 102, 493}, {103, 107, 177}, {108, 108, 494}, {109, 122, 177}, {183, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 101, -33}, {102, 102, 495}, {103, 122, 177}, {183, 40869, -25}, },
            {{48, 114, -259}, {115, 115, 496}, {116, 40869, -46}, },
            {{48, 95, -25}, {97, 97, 497}, {98, 99, 177}, {100, 100, 498}, {101, 40869, -261}, },
            {{48, 95, -25}, {97, 116, 177}, {117, 117, 499}, {118, 40869, -35}, },
            {{48, 104, -266}, {105, 105, 500}, {106, 115, 177}, {116, 116, 501}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 107, 177}, {108, 108, 502}, {109, 40869, -271}, },
            {{48, 110, -38}, {111, 111, 503}, {112, 40869, -31}, },
            {{48, 95, -25}, {97, 113, 177}, {114, 114, 504}, {115, 40869, -42}, },
            {{48, 109, -46}, {110, 110, 505}, {111, 40869, -37}, },
            {{48, 57, 173}, {65, 76, 174}, {77, 77, 506}, {78, 90, 174}, {92, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 507}, {98, 40869, -36}, },
            {{48, 95, -25}, {97, 97, 508}, {98, 40869, -36}, },
            {{48, 114, -259}, {115, 115, 509}, {116, 40869, -46}, },
            {{48, 40869, -25}, },
            {{48, 111, -264}, {112, 112, 510}, {113, 40869, -264}, },
            {{48, 111, -264}, {112, 112, 511}, {113, 114, 177}, {115, 115, 512}, {116, 116, 513}, {117, 117, 177}, {118, 118, 514}, {119, 122, 177}, {183, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 515}, {106, 40869, -266}, },
            {{48, 99, -261}, {100, 100, 516}, {101, 108, 177}, {109, 109, 517}, {110, 113, 177}, {114, 114, 518}, {115, 40869, -42}, },
            {{48, 101, -33}, {102, 102, 519}, {103, 108, 177}, {109, 109, 520}, {110, 122, 177}, {183, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 521}, {104, 40869, -262}, },
            {{48, 111, -264}, {112, 112, 522}, {113, 40869, -264}, },
            {{48, 109, -46}, {110, 110, 523}, {111, 40869, -37}, },
            {{48, 95, -25}, {97, 105, 177}, {106, 106, 524}, {107, 122, 177}, {183, 40869, -25}, },
            {{48, 57, 173}, {65, 83, 174}, {84, 84, 525}, {85, 90, 174}, {92, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 526}, {117, 40869, -260}, },
            {{48, 76, -282}, {77, 77, 527}, {78, 40869, -282}, },
            {{48, 100, -35}, {101, 101, 528}, {102, 40869, -39}, },
            {{48, 98, -260}, {99, 99, 529}, {100, 122, 177}, {183, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 530}, {117, 40869, -260}, },
            {{48, 113, -280}, {114, 114, 531}, {115, 40869, -42}, },
            {{48, 113, -280}, {114, 114, 532}, {115, 40869, -42}, },
            {{48, 76, -282}, {77, 77, 533}, {78, 40869, -282}, },
            {{48, 114, -259}, {115, 115, 534}, {116, 40869, -46}, },
            {{48, 76, -282}, {77, 77, 535}, {78, 40869, -282}, },
            {{48, 100, -35}, {101, 101, 536}, {102, 40869, -39}, },
            {{48, 98, -260}, {99, 99, 537}, {100, 101, 177}, {102, 102, 538}, {103, 107, 177}, {108, 108, 539}, {109, 111, 177}, {112, 112, 540}, {113, 40869, -264}, },
            {{48, 109, -46}, {110, 110, 541}, {111, 112, 177}, {113, 113, 542}, {114, 122, 177}, {183, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 543}, {98, 40869, -36}, },
            {{48, 116, -276}, {117, 117, 544}, {118, 40869, -35}, },
            {{48, 57, 173}, {65, 75, 174}, {76, 76, 545}, {77, 90, 174}, {92, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 546}, {98, 40869, -36}, },
            {{48, 97, -29}, {98, 98, 547}, {99, 122, 177}, {183, 40869, -25}, },
            {{48, 108, -269}, {109, 109, 548}, {110, 40869, -291}, },
            {{48, 113, -280}, {114, 114, 549}, {115, 40869, -42}, },
            {{48, 100, -35}, {101, 101, 550}, {102, 40869, -39}, },
            {{48, 95, -25}, {97, 97, 551}, {98, 116, 177}, {117, 117, 552}, {118, 40869, -35}, },
            {{48, 107, -278}, {108, 108, 553}, {109, 115, 177}, {116, 116, 554}, {117, 40869, -260}, },
            {{48, 99, -261}, {100, 100, 555}, {101, 40869, -261}, },
            {{48, 100, -35}, {101, 101, 556}, {102, 40869, -39}, },
            {{48, 97, -29}, {98, 98, 557}, {99, 40869, -314}, },
            {{48, 76, -282}, {77, 77, 558}, {78, 40869, -282}, },
            {{48, 104, -266}, {105, 105, 559}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 560}, {117, 40869, -260}, },
            {{48, 113, -280}, {114, 114, 561}, {115, 40869, -42}, },
            {{48, 108, -269}, {109, 109, 562}, {110, 40869, -291}, },
            {{48, 76, -282}, {77, 77, 563}, {78, 40869, -282}, },
            {{48, 113, -280}, {114, 114, 564}, {115, 40869, -42}, },
            {{0, 65535, -8}, },
            {{9, 32, -16}, },
            {{0, 46, -113}, {47, 47, 565}, {48, 65535, 330}, },
            {{0, 46, -113}, {47, 47, 566}, {48, 65535, 330}, },
            {{47, 47, 567}, },
            {{0, 65535, -114}, },
            {},
            {{10, 10, 568}, },
            {{48, 57, 336}, },
            {},
            {},
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{43, 43, 569}, {45, 45, 570}, {46, 46, 571}, {48, 57, 572}, {58, 58, 573}, {65, 90, 574}, {97, 122, 575}, {192, 214, 576}, {216, 246, 577}, {248, 255, 578}, {256, 305, 579}, {308, 318, 580}, {321, 328, 581}, {330, 382, 582}, {384, 451, 583}, {461, 496, 584}, {500, 501, 585}, {506, 535, 586}, {592, 680, 587}, {699, 705, 588}, {902, 902, 589}, {904, 906, 590}, {908, 908, 591}, {910, 929, 592}, {931, 974, 593}, {976, 982, 594}, {986, 986, 595}, {988, 988, 596}, {990, 990, 597}, {992, 992, 598}, {994, 1011, 599}, {1025, 1036, 600}, {1038, 1103, 601}, {1105, 1116, 602}, {1118, 1153, 603}, {1168, 1220, 604}, {1223, 1224, 605}, {1227, 1228, 606}, {1232, 1259, 607}, {1262, 1269, 608}, {1272, 1273, 609}, {1329, 1366, 610}, {1369, 1369, 611}, {1377, 1414, 612}, {1488, 1514, 613}, {1520, 1522, 614}, {1569, 1594, 615}, {1601, 1610, 616}, {1649, 1719, 617}, {1722, 1726, 618}, {1728, 1742, 619}, {1744, 1747, 620}, {1749, 1749, 621}, {1765, 1766, 622}, {12295, 12295, 623}, {12321, 12329, 624}, {19968, 40869, 625}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{48, 57, 474}, },
            {{48, 115, -270}, {116, 116, 626}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 627}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 628}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 629}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 113, -280}, {114, 114, 630}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 631}, {109, 40869, -271}, },
            {{48, 116, -276}, {117, 117, 632}, {118, 40869, -35}, },
            {{48, 110, -38}, {111, 111, 633}, {112, 40869, -31}, },
            {{48, 95, -25}, {97, 97, 634}, {98, 40869, -36}, },
            {{48, 113, -280}, {114, 114, 635}, {115, 40869, -42}, },
            {{48, 95, -25}, {97, 103, 177}, {104, 104, 636}, {105, 122, 177}, {183, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 637}, {112, 113, 177}, {114, 114, 638}, {115, 40869, -42}, },
            {{48, 108, -269}, {109, 109, 639}, {110, 40869, -291}, },
            {{48, 98, -260}, {99, 99, 640}, {100, 115, 177}, {116, 116, 641}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 97, 642}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 643}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 644}, {102, 104, 177}, {105, 105, 645}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 646}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 647}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 648}, {102, 40869, -39}, },
            {{48, 97, -29}, {98, 98, 649}, {99, 40869, -314}, },
            {{48, 57, 173}, {65, 66, 174}, {67, 67, 650}, {68, 69, 174}, {70, 70, 651}, {71, 72, 174}, {73, 73, 652}, {74, 77, 174}, {78, 78, 653}, {79, 90, 174}, {92, 109, -46}, {110, 110, 654}, {111, 40869, -37}, },
            {{48, 104, -266}, {105, 105, 655}, {106, 40869, -266}, },
            {{48, 114, -259}, {115, 115, 656}, {116, 40869, -46}, },
            {{48, 113, -280}, {114, 114, 657}, {115, 40869, -42}, },
            {{48, 114, -259}, {115, 115, 658}, {116, 40869, -46}, },
            {{48, 95, -25}, {97, 118, 177}, {119, 119, 659}, {120, 40869, -47}, },
            {{48, 95, -25}, {97, 97, 660}, {98, 106, 177}, {107, 107, 661}, {108, 122, 177}, {183, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 662}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 663}, {102, 40869, -39}, },
            {{48, 107, -278}, {108, 108, 664}, {109, 40869, -271}, },
            {{48, 113, -280}, {114, 114, 665}, {115, 40869, -42}, },
            {{48, 66, -500}, {67, 67, 666}, {68, 85, 174}, {86, 86, 667}, {87, 90, 174}, {92, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 668}, {109, 110, 177}, {111, 111, 669}, {112, 40869, -31}, },
            {{48, 116, -276}, {117, 117, 670}, {118, 40869, -35}, },
            {{48, 115, -270}, {116, 116, 671}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 672}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 673}, {102, 110, 177}, {111, 111, 674}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 675}, {111, 40869, -37}, },
            {{48, 104, -266}, {105, 105, 676}, {106, 40869, -266}, },
            {{48, 97, -29}, {98, 98, 677}, {99, 40869, -314}, },
            {{48, 102, -262}, {103, 103, 678}, {104, 40869, -262}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 679}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 57, 173}, {65, 69, 174}, {70, 70, 680}, {71, 90, 174}, {92, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 681}, {102, 40869, -39}, },
            {{48, 95, -25}, {97, 120, 177}, {121, 121, 682}, {122, 40869, -44}, },
            {{48, 110, -38}, {111, 111, 683}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 684}, {102, 40869, -39}, },
            {{48, 113, -280}, {114, 114, 685}, {115, 40869, -42}, },
            {{48, 103, -489}, {104, 104, 686}, {105, 40869, -489}, },
            {{48, 111, -264}, {112, 112, 687}, {113, 40869, -264}, },
            {{48, 115, -270}, {116, 116, 688}, {117, 40869, -260}, },
            {{48, 101, -33}, {102, 102, 689}, {103, 40869, -273}, },
            {{48, 100, -35}, {101, 101, 690}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 691}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 692}, {102, 40869, -39}, },
            {{48, 98, -260}, {99, 99, 693}, {100, 40869, -300}, },
            {{48, 100, -35}, {101, 101, 694}, {102, 40869, -39}, },
            {{48, 107, -278}, {108, 108, 695}, {109, 40869, -271}, },
            {{48, 95, -25}, {97, 97, 696}, {98, 40869, -36}, },
            {{48, 100, -35}, {101, 101, 697}, {102, 40869, -39}, },
            {{48, 99, -261}, {100, 100, 698}, {101, 40869, -261}, },
            {{48, 116, -276}, {117, 117, 699}, {118, 40869, -35}, },
            {{48, 113, -280}, {114, 114, 700}, {115, 40869, -42}, },
            {{48, 113, -280}, {114, 114, 701}, {115, 40869, -42}, },
            {{48, 104, -266}, {105, 105, 702}, {106, 40869, -266}, },
            {{48, 113, -280}, {114, 114, 703}, {115, 115, 177}, {116, 116, 704}, {117, 40869, -260}, },
            {{48, 66, -500}, {67, 67, 705}, {68, 81, 174}, {82, 82, 706}, {83, 90, 174}, {92, 40869, -25}, },
            {{48, 108, -269}, {109, 109, 707}, {110, 40869, -291}, },
            {{48, 102, -262}, {103, 103, 708}, {104, 40869, -262}, },
            {{48, 109, -46}, {110, 110, 709}, {111, 40869, -37}, },
            {{48, 109, -46}, {110, 110, 710}, {111, 40869, -37}, },
            {{48, 100, -35}, {101, 101, 711}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 712}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 713}, {106, 40869, -266}, },
            {{48, 95, -25}, {97, 97, 714}, {98, 40869, -36}, },
            {{48, 114, -259}, {115, 115, 715}, {116, 40869, -46}, },
            {{48, 57, 173}, {65, 82, 174}, {83, 83, 716}, {84, 90, 174}, {92, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 717}, {102, 40869, -39}, },
            {{48, 107, -278}, {108, 108, 718}, {109, 40869, -271}, },
            {{48, 103, -489}, {104, 104, 719}, {105, 40869, -489}, },
            {{48, 95, -25}, {97, 106, 177}, {107, 107, 720}, {108, 40869, -506}, },
            {{48, 107, -278}, {108, 108, 721}, {109, 40869, -271}, },
            {{48, 100, -35}, {101, 101, 722}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{0, 65535, -332}, },
            {{47, 47, 567}, },
            {{0, 65535, -113}, },
            {},
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{33, 33, 723}, {34, 34, 724}, {35, 35, 725}, {36, 36, 726}, {37, 37, 727}, {38, 38, 728}, {39, 39, 729}, {40, 40, 730}, {41, 41, 731}, {42, 42, 732}, {43, 43, 733}, {44, 44, 734}, {45, 45, 735}, {46, 46, 736}, {47, 47, 737}, {48, 57, 738}, {58, 58, 739}, {59, 59, 740}, {61, 61, 741}, {63, 63, 742}, {64, 64, 743}, {65, 90, 744}, {95, 95, 745}, {97, 122, 746}, {126, 126, 747}, {160, 191, 748}, {192, 214, 749}, {215, 215, 748}, {216, 246, 750}, {247, 247, 748}, {248, 255, 751}, {256, 305, 752}, {306, 307, 748}, {308, 318, 753}, {319, 320, 748}, {321, 328, 754}, {329, 329, 748}, {330, 382, 755}, {383, 383, 748}, {384, 451, 756}, {452, 460, 748}, {461, 496, 757}, {497, 499, 748}, {500, 501, 758}, {502, 505, 748}, {506, 535, 759}, {536, 591, 748}, {592, 680, 760}, {681, 698, 748}, {699, 705, 761}, {706, 901, 748}, {902, 902, 762}, {903, 903, 748}, {904, 906, 763}, {907, 907, 748}, {908, 908, 764}, {909, 909, 748}, {910, 929, 765}, {930, 930, 748}, {931, 974, 766}, {975, 975, 748}, {976, 982, 767}, {983, 985, 748}, {986, 986, 768}, {987, 987, 748}, {988, 988, 769}, {989, 989, 748}, {990, 990, 770}, {991, 991, 748}, {992, 992, 771}, {993, 993, 748}, {994, 1011, 772}, {1012, 1024, 748}, {1025, 1036, 773}, {1037, 1037, 748}, {1038, 1103, 774}, {1104, 1104, 748}, {1105, 1116, 775}, {1117, 1117, 748}, {1118, 1153, 776}, {1154, 1167, 748}, {1168, 1220, 777}, {1221, 1222, 748}, {1223, 1224, 778}, {1225, 1226, 748}, {1227, 1228, 779}, {1229, 1231, 748}, {1232, 1259, 780}, {1260, 1261, 748}, {1262, 1269, 781}, {1270, 1271, 748}, {1272, 1273, 782}, {1274, 1328, 748}, {1329, 1366, 783}, {1367, 1368, 748}, {1369, 1369, 784}, {1370, 1376, 748}, {1377, 1414, 785}, {1415, 1487, 748}, {1488, 1514, 786}, {1515, 1519, 748}, {1520, 1522, 787}, {1523, 1568, 748}, {1569, 1594, 788}, {1595, 1600, 748}, {1601, 1610, 789}, {1611, 1648, 748}, {1649, 1719, 790}, {1720, 1721, 748}, {1722, 1726, 791}, {1727, 1727, 748}, {1728, 1742, 792}, {1743, 1743, 748}, {1744, 1747, 793}, {1748, 1748, 748}, {1749, 1749, 794}, {1750, 1764, 748}, {1765, 1766, 795}, {1767, 12294, 748}, {12295, 12295, 796}, {12296, 12320, 748}, {12321, 12329, 797}, {12330, 19967, 748}, {19968, 40869, 798}, {40870, 55295, 748}, {63744, 64975, 799}, {65008, 65519, 800}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{43, 40869, -424}, },
            {{48, 113, -280}, {114, 114, 801}, {115, 40869, -42}, },
            {{48, 111, -264}, {112, 112, 802}, {113, 40869, -264}, },
            {{48, 100, -35}, {101, 101, 803}, {102, 40869, -39}, },
            {{48, 95, -25}, {97, 117, 177}, {118, 118, 804}, {119, 40869, -288}, },
            {{48, 100, -35}, {101, 101, 805}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 806}, {106, 120, 177}, {121, 121, 807}, {122, 40869, -44}, },
            {{48, 108, -269}, {109, 109, 808}, {110, 40869, -291}, },
            {{48, 108, -269}, {109, 109, 809}, {110, 40869, -291}, },
            {{48, 97, -29}, {98, 98, 810}, {99, 40869, -314}, },
            {{48, 104, -266}, {105, 105, 811}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 812}, {102, 40869, -39}, },
            {{48, 114, -259}, {115, 115, 813}, {116, 40869, -46}, },
            {{48, 100, -35}, {101, 101, 814}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 815}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 816}, {102, 116, 177}, {117, 117, 817}, {118, 40869, -35}, },
            {{48, 113, -280}, {114, 114, 818}, {115, 40869, -42}, },
            {{48, 69, -525}, {70, 70, 819}, {71, 95, -525}, {97, 101, 177}, {102, 102, 820}, {103, 40869, -273}, },
            {{48, 114, -259}, {115, 115, 821}, {116, 40869, -46}, },
            {{48, 113, -280}, {114, 114, 822}, {115, 40869, -42}, },
            {{48, 109, -46}, {110, 110, 823}, {111, 40869, -37}, },
            {{48, 115, -270}, {116, 116, 824}, {117, 40869, -260}, },
            {{48, 98, -260}, {99, 99, 825}, {100, 40869, -300}, },
            {{48, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 826}, {109, 40869, -271}, },
            {{48, 95, -25}, {97, 97, 827}, {98, 103, 177}, {104, 104, 828}, {105, 40869, -489}, },
            {{48, 110, -38}, {111, 111, 829}, {112, 40869, -31}, },
            {{48, 101, -33}, {102, 102, 830}, {103, 40869, -273}, },
            {{48, 110, -38}, {111, 111, 831}, {112, 40869, -31}, },
            {{48, 101, -33}, {102, 102, 832}, {103, 40869, -273}, },
            {{48, 117, -631}, {118, 118, 833}, {119, 40869, -288}, },
            {{48, 115, -270}, {116, 116, 834}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 97, 835}, {98, 40869, -36}, },
            {{48, 100, -35}, {101, 101, 836}, {102, 40869, -39}, },
            {{48, 69, -525}, {70, 70, 837}, {71, 82, 174}, {83, 83, 838}, {84, 40869, -559}, },
            {{48, 107, -278}, {108, 108, 839}, {109, 40869, -271}, },
            {{48, 40869, -25}, },
            {{48, 113, -280}, {114, 114, 840}, {115, 40869, -42}, },
            {{48, 99, -261}, {100, 100, 841}, {101, 40869, -261}, },
            {{48, 40869, -25}, },
            {{48, 99, -261}, {100, 100, 842}, {101, 40869, -261}, },
            {{48, 95, -25}, {97, 97, 843}, {98, 40869, -36}, },
            {{48, 95, -25}, {97, 97, 844}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 845}, {106, 40869, -266}, },
            {{48, 113, -280}, {114, 114, 846}, {115, 40869, -42}, },
            {{48, 115, -270}, {116, 116, 847}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 97, 848}, {98, 40869, -36}, },
            {{48, 113, -280}, {114, 114, 849}, {115, 40869, -42}, },
            {{48, 113, -280}, {114, 114, 850}, {115, 40869, -42}, },
            {{48, 106, -563}, {107, 107, 851}, {108, 40869, -506}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 852}, {98, 40869, -36}, },
            {{48, 100, -35}, {101, 101, 853}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 854}, {102, 40869, -39}, },
            {{48, 114, -259}, {115, 115, 855}, {116, 40869, -46}, },
            {{48, 116, -276}, {117, 117, 856}, {118, 40869, -35}, },
            {{48, 98, -260}, {99, 99, 857}, {100, 40869, -300}, },
            {{48, 111, -264}, {112, 112, 858}, {113, 40869, -264}, },
            {{48, 107, -278}, {108, 108, 859}, {109, 40869, -271}, },
            {{48, 99, -261}, {100, 100, 860}, {101, 40869, -261}, },
            {{48, 95, -25}, {97, 97, 861}, {98, 40869, -36}, },
            {{48, 100, -35}, {101, 101, 862}, {102, 40869, -39}, },
            {{48, 116, -276}, {117, 117, 863}, {118, 40869, -35}, },
            {{48, 109, -46}, {110, 110, 864}, {111, 40869, -37}, },
            {{48, 110, -38}, {111, 111, 865}, {112, 40869, -31}, },
            {{48, 99, -261}, {100, 100, 866}, {101, 40869, -261}, },
            {{48, 98, -260}, {99, 99, 867}, {100, 40869, -300}, },
            {{48, 99, -261}, {100, 100, 868}, {101, 40869, -261}, },
            {{48, 110, -38}, {111, 111, 869}, {112, 40869, -31}, },
            {{48, 104, -266}, {105, 105, 870}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 871}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 872}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 97, 873}, {98, 40869, -36}, },
            {{48, 57, 173}, {65, 68, 174}, {69, 69, 874}, {70, 90, 174}, {92, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 875}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 876}, {102, 40869, -39}, },
            {{48, 98, -260}, {99, 99, 877}, {100, 40869, -300}, },
            {{48, 109, -46}, {110, 110, 878}, {111, 40869, -37}, },
            {{48, 115, -270}, {116, 116, 879}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 880}, {102, 104, 177}, {105, 105, 881}, {106, 40869, -266}, },
            {{48, 110, -38}, {111, 111, 882}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 883}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 884}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 885}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 114, -259}, {115, 115, 886}, {116, 40869, -46}, },
            {{48, 40869, -25}, },
            {{48, 114, -259}, {115, 115, 887}, {116, 40869, -46}, },
            {{48, 107, -278}, {108, 108, 888}, {109, 40869, -271}, },
            {{48, 115, -270}, {116, 116, 889}, {117, 40869, -260}, },
            {{48, 76, -282}, {77, 77, 890}, {78, 82, 174}, {83, 83, 891}, {84, 40869, -559}, },
            {{48, 100, -35}, {101, 101, 892}, {102, 40869, -39}, },
            {{48, 99, -261}, {100, 100, 893}, {101, 40869, -261}, },
            {{48, 100, -35}, {101, 101, 894}, {102, 40869, -39}, },
            {{48, 57, 173}, {65, 70, 174}, {71, 71, 895}, {72, 90, 174}, {92, 40869, -25}, },
            {{48, 101, -33}, {102, 102, 896}, {103, 40869, -273}, },
            {{48, 57, 173}, {65, 85, 174}, {86, 86, 897}, {87, 40869, -511}, },
            {{48, 99, -261}, {100, 100, 898}, {101, 40869, -261}, },
            {{33, 46, -575}, {47, 47, 899}, {48, 65519, -575}, },
            {},
            {{33, 33, 900}, {34, 34, 724}, {36, 36, 901}, {37, 37, 902}, {38, 38, 903}, {39, 39, 904}, {40, 40, 905}, {41, 41, 906}, {42, 42, 907}, {43, 43, 908}, {44, 44, 909}, {45, 45, 910}, {46, 46, 911}, {47, 47, 912}, {48, 57, 913}, {58, 58, 914}, {59, 59, 915}, {61, 61, 916}, {63, 63, 917}, {64, 64, 918}, {65, 90, 919}, {95, 95, 920}, {97, 122, 921}, {126, 126, 922}, {160, 191, 923}, {192, 214, 924}, {215, 215, 923}, {216, 246, 925}, {247, 247, 923}, {248, 255, 926}, {256, 305, 927}, {306, 307, 923}, {308, 318, 928}, {319, 320, 923}, {321, 328, 929}, {329, 329, 923}, {330, 382, 930}, {383, 383, 923}, {384, 451, 931}, {452, 460, 923}, {461, 496, 932}, {497, 499, 923}, {500, 501, 933}, {502, 505, 923}, {506, 535, 934}, {536, 591, 923}, {592, 680, 935}, {681, 698, 923}, {699, 705, 936}, {706, 901, 923}, {902, 902, 937}, {903, 903, 923}, {904, 906, 938}, {907, 907, 923}, {908, 908, 939}, {909, 909, 923}, {910, 929, 940}, {930, 930, 923}, {931, 974, 941}, {975, 975, 923}, {976, 982, 942}, {983, 985, 923}, {986, 986, 943}, {987, 987, 923}, {988, 988, 944}, {989, 989, 923}, {990, 990, 945}, {991, 991, 923}, {992, 992, 946}, {993, 993, 923}, {994, 1011, 947}, {1012, 1024, 923}, {1025, 1036, 948}, {1037, 1037, 923}, {1038, 1103, 949}, {1104, 1104, 923}, {1105, 1116, 950}, {1117, 1117, 923}, {1118, 1153, 951}, {1154, 1167, 923}, {1168, 1220, 952}, {1221, 1222, 923}, {1223, 1224, 953}, {1225, 1226, 923}, {1227, 1228, 954}, {1229, 1231, 923}, {1232, 1259, 955}, {1260, 1261, 923}, {1262, 1269, 956}, {1270, 1271, 923}, {1272, 1273, 957}, {1274, 1328, 923}, {1329, 1366, 958}, {1367, 1368, 923}, {1369, 1369, 959}, {1370, 1376, 923}, {1377, 1414, 960}, {1415, 1487, 923}, {1488, 1514, 961}, {1515, 1519, 923}, {1520, 1522, 962}, {1523, 1568, 923}, {1569, 1594, 963}, {1595, 1600, 923}, {1601, 1610, 964}, {1611, 1648, 923}, {1649, 1719, 965}, {1720, 1721, 923}, {1722, 1726, 966}, {1727, 1727, 923}, {1728, 1742, 967}, {1743, 1743, 923}, {1744, 1747, 968}, {1748, 1748, 923}, {1749, 1749, 969}, {1750, 1764, 923}, {1765, 1766, 970}, {1767, 12294, 923}, {12295, 12295, 971}, {12296, 12320, 923}, {12321, 12329, 972}, {12330, 19967, 923}, {19968, 40869, 973}, {40870, 55295, 923}, {63744, 64975, 974}, {65008, 65519, 975}, },
            {{33, 65519, -725}, },
            {{48, 57, 976}, {65, 70, 977}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 33, 978}, {34, 35, -575}, {36, 36, 979}, {37, 37, 980}, {38, 38, 981}, {39, 39, 982}, {40, 40, 983}, {41, 41, 984}, {42, 42, 985}, {43, 43, 986}, {44, 44, 987}, {45, 45, 988}, {46, 46, 989}, {47, 47, 990}, {48, 57, 991}, {58, 58, 992}, {59, 59, 993}, {61, 61, 994}, {63, 63, 742}, {64, 64, 995}, {65, 90, 996}, {95, 95, 997}, {97, 122, 998}, {126, 126, 999}, {160, 191, 1000}, {192, 214, 1001}, {215, 215, 1000}, {216, 246, 1002}, {247, 247, 1000}, {248, 255, 1003}, {256, 305, 1004}, {306, 307, 1000}, {308, 318, 1005}, {319, 320, 1000}, {321, 328, 1006}, {329, 329, 1000}, {330, 382, 1007}, {383, 383, 1000}, {384, 451, 1008}, {452, 460, 1000}, {461, 496, 1009}, {497, 499, 1000}, {500, 501, 1010}, {502, 505, 1000}, {506, 535, 1011}, {536, 591, 1000}, {592, 680, 1012}, {681, 698, 1000}, {699, 705, 1013}, {706, 901, 1000}, {902, 902, 1014}, {903, 903, 1000}, {904, 906, 1015}, {907, 907, 1000}, {908, 908, 1016}, {909, 909, 1000}, {910, 929, 1017}, {930, 930, 1000}, {931, 974, 1018}, {975, 975, 1000}, {976, 982, 1019}, {983, 985, 1000}, {986, 986, 1020}, {987, 987, 1000}, {988, 988, 1021}, {989, 989, 1000}, {990, 990, 1022}, {991, 991, 1000}, {992, 992, 1023}, {993, 993, 1000}, {994, 1011, 1024}, {1012, 1024, 1000}, {1025, 1036, 1025}, {1037, 1037, 1000}, {1038, 1103, 1026}, {1104, 1104, 1000}, {1105, 1116, 1027}, {1117, 1117, 1000}, {1118, 1153, 1028}, {1154, 1167, 1000}, {1168, 1220, 1029}, {1221, 1222, 1000}, {1223, 1224, 1030}, {1225, 1226, 1000}, {1227, 1228, 1031}, {1229, 1231, 1000}, {1232, 1259, 1032}, {1260, 1261, 1000}, {1262, 1269, 1033}, {1270, 1271, 1000}, {1272, 1273, 1034}, {1274, 1328, 1000}, {1329, 1366, 1035}, {1367, 1368, 1000}, {1369, 1369, 1036}, {1370, 1376, 1000}, {1377, 1414, 1037}, {1415, 1487, 1000}, {1488, 1514, 1038}, {1515, 1519, 1000}, {1520, 1522, 1039}, {1523, 1568, 1000}, {1569, 1594, 1040}, {1595, 1600, 1000}, {1601, 1610, 1041}, {1611, 1648, 1000}, {1649, 1719, 1042}, {1720, 1721, 1000}, {1722, 1726, 1043}, {1727, 1727, 1000}, {1728, 1742, 1044}, {1743, 1743, 1000}, {1744, 1747, 1045}, {1748, 1748, 1000}, {1749, 1749, 1046}, {1750, 1764, 1000}, {1765, 1766, 1047}, {1767, 12294, 1000}, {12295, 12295, 1048}, {12296, 12320, 1000}, {12321, 12329, 1049}, {12330, 19967, 1000}, {19968, 40869, 1050}, {40870, 55295, 1000}, {63744, 64975, 1051}, {65008, 65519, 1052}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 33, 1053}, {34, 35, -575}, {36, 36, 1054}, {37, 37, 1055}, {38, 38, 1056}, {39, 39, 1057}, {40, 40, 1058}, {41, 41, 1059}, {42, 42, 1060}, {43, 43, 1061}, {44, 44, 1062}, {45, 45, 1063}, {46, 46, 1064}, {47, 47, 1065}, {48, 57, 1066}, {58, 58, 1067}, {59, 59, 1068}, {61, 61, 1069}, {63, 63, 1070}, {64, 64, 1071}, {65, 90, 1072}, {95, 95, 1073}, {97, 122, 1074}, {126, 126, 1075}, {160, 191, 1076}, {192, 214, 1077}, {215, 215, 1076}, {216, 246, 1078}, {247, 247, 1076}, {248, 255, 1079}, {256, 305, 1080}, {306, 307, 1076}, {308, 318, 1081}, {319, 320, 1076}, {321, 328, 1082}, {329, 329, 1076}, {330, 382, 1083}, {383, 383, 1076}, {384, 451, 1084}, {452, 460, 1076}, {461, 496, 1085}, {497, 499, 1076}, {500, 501, 1086}, {502, 505, 1076}, {506, 535, 1087}, {536, 591, 1076}, {592, 680, 1088}, {681, 698, 1076}, {699, 705, 1089}, {706, 901, 1076}, {902, 902, 1090}, {903, 903, 1076}, {904, 906, 1091}, {907, 907, 1076}, {908, 908, 1092}, {909, 909, 1076}, {910, 929, 1093}, {930, 930, 1076}, {931, 974, 1094}, {975, 975, 1076}, {976, 982, 1095}, {983, 985, 1076}, {986, 986, 1096}, {987, 987, 1076}, {988, 988, 1097}, {989, 989, 1076}, {990, 990, 1098}, {991, 991, 1076}, {992, 992, 1099}, {993, 993, 1076}, {994, 1011, 1100}, {1012, 1024, 1076}, {1025, 1036, 1101}, {1037, 1037, 1076}, {1038, 1103, 1102}, {1104, 1104, 1076}, {1105, 1116, 1103}, {1117, 1117, 1076}, {1118, 1153, 1104}, {1154, 1167, 1076}, {1168, 1220, 1105}, {1221, 1222, 1076}, {1223, 1224, 1106}, {1225, 1226, 1076}, {1227, 1228, 1107}, {1229, 1231, 1076}, {1232, 1259, 1108}, {1260, 1261, 1076}, {1262, 1269, 1109}, {1270, 1271, 1076}, {1272, 1273, 1110}, {1274, 1328, 1076}, {1329, 1366, 1111}, {1367, 1368, 1076}, {1369, 1369, 1112}, {1370, 1376, 1076}, {1377, 1414, 1113}, {1415, 1487, 1076}, {1488, 1514, 1114}, {1515, 1519, 1076}, {1520, 1522, 1115}, {1523, 1568, 1076}, {1569, 1594, 1116}, {1595, 1600, 1076}, {1601, 1610, 1117}, {1611, 1648, 1076}, {1649, 1719, 1118}, {1720, 1721, 1076}, {1722, 1726, 1119}, {1727, 1727, 1076}, {1728, 1742, 1120}, {1743, 1743, 1076}, {1744, 1747, 1121}, {1748, 1748, 1076}, {1749, 1749, 1122}, {1750, 1764, 1076}, {1765, 1766, 1123}, {1767, 12294, 1076}, {12295, 12295, 1124}, {12296, 12320, 1076}, {12321, 12329, 1125}, {12330, 19967, 1076}, {19968, 40869, 1126}, {40870, 55295, 1076}, {57344, 63743, 1127}, {63744, 64975, 1128}, {65008, 65519, 1129}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{48, 95, -25}, {97, 97, 1130}, {98, 40869, -36}, },
            {{48, 115, -270}, {116, 116, 1131}, {117, 40869, -260}, },
            {{48, 117, -631}, {118, 118, 1132}, {119, 40869, -288}, },
            {{48, 104, -266}, {105, 105, 1133}, {106, 40869, -266}, },
            {{48, 102, -262}, {103, 103, 1134}, {104, 40869, -262}, },
            {{48, 100, -35}, {101, 101, 1135}, {102, 40869, -39}, },
            {{48, 76, -282}, {77, 77, 1136}, {78, 40869, -282}, },
            {{48, 111, -264}, {112, 112, 1137}, {113, 40869, -264}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 1138}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 1139}, {102, 40869, -39}, },
            {{48, 118, -505}, {119, 119, 1140}, {120, 40869, -47}, },
            {{48, 100, -35}, {101, 101, 1141}, {102, 40869, -39}, },
            {{48, 110, -38}, {111, 111, 1142}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 1143}, {111, 40869, -37}, },
            {{48, 111, -264}, {112, 112, 1144}, {113, 40869, -264}, },
            {{48, 113, -280}, {114, 114, 1145}, {115, 40869, -42}, },
            {{48, 110, -38}, {111, 111, 1146}, {112, 40869, -31}, },
            {{48, 107, -278}, {108, 108, 1147}, {109, 40869, -271}, },
            {{48, 107, -278}, {108, 108, 1148}, {109, 40869, -271}, },
            {{48, 104, -266}, {105, 105, 1149}, {106, 40869, -266}, },
            {{48, 113, -280}, {114, 114, 1150}, {115, 40869, -42}, },
            {{48, 100, -35}, {101, 101, 1151}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 1152}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 1153}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 1154}, {102, 40869, -39}, },
            {{48, 111, -264}, {112, 112, 1155}, {113, 40869, -264}, },
            {{48, 110, -38}, {111, 111, 1156}, {112, 40869, -31}, },
            {{48, 113, -280}, {114, 114, 1157}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 1158}, {111, 40869, -37}, },
            {{48, 111, -264}, {112, 112, 1159}, {113, 40869, -264}, },
            {{48, 95, -25}, {97, 97, 1160}, {98, 40869, -36}, },
            {{48, 114, -259}, {115, 115, 1161}, {116, 40869, -46}, },
            {{48, 98, -260}, {99, 99, 1162}, {100, 40869, -300}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 1163}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 1164}, {117, 40869, -260}, },
            {{48, 107, -278}, {108, 108, 1165}, {109, 40869, -271}, },
            {{48, 95, -25}, {97, 97, 1166}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 1167}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 111, -264}, {112, 112, 1168}, {113, 40869, -264}, },
            {{48, 107, -278}, {108, 108, 1169}, {109, 40869, -271}, },
            {{48, 100, -35}, {101, 101, 1170}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 1171}, {117, 40869, -260}, },
            {{48, 57, 173}, {65, 79, 174}, {80, 80, 1172}, {81, 90, 174}, {92, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 1173}, {111, 40869, -37}, },
            {{48, 101, -33}, {102, 102, 1174}, {103, 107, 177}, {108, 108, 1175}, {109, 113, 177}, {114, 114, 1176}, {115, 40869, -42}, },
            {{48, 114, -259}, {115, 115, 1177}, {116, 40869, -46}, },
            {{48, 100, -35}, {101, 101, 1178}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 1179}, {117, 40869, -260}, },
            {{48, 113, -280}, {114, 114, 1180}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 111, -264}, {112, 112, 1181}, {113, 40869, -264}, },
            {{48, 109, -46}, {110, 110, 1182}, {111, 40869, -37}, },
            {{48, 115, -270}, {116, 116, 1183}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 1184}, {102, 40869, -39}, },
            {{48, 110, -38}, {111, 111, 1185}, {112, 40869, -31}, },
            {{48, 104, -266}, {105, 105, 1186}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 1187}, {117, 40869, -260}, },
            {{48, 114, -259}, {115, 115, 1188}, {116, 40869, -46}, },
            {{48, 115, -270}, {116, 116, 1189}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 1190}, {102, 40869, -39}, },
            {{48, 113, -280}, {114, 114, 1191}, {115, 40869, -42}, },
            {{48, 104, -266}, {105, 105, 1192}, {106, 40869, -266}, },
            {{48, 110, -38}, {111, 111, 1193}, {112, 40869, -31}, },
            {{48, 104, -266}, {105, 105, 1194}, {106, 40869, -266}, },
            {{48, 109, -46}, {110, 110, 1195}, {111, 40869, -37}, },
            {{48, 117, -631}, {118, 118, 1196}, {119, 40869, -288}, },
            {{48, 95, -25}, {97, 119, 177}, {120, 120, 1197}, {121, 40869, -29}, },
            {{48, 104, -266}, {105, 105, 1198}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 1199}, {117, 40869, -260}, },
            {{48, 117, -631}, {118, 118, 1200}, {119, 40869, -288}, },
            {{48, 109, -46}, {110, 110, 1201}, {111, 40869, -37}, },
            {{48, 99, -261}, {100, 100, 1202}, {101, 40869, -261}, },
            {{48, 100, -35}, {101, 101, 1203}, {102, 40869, -39}, },
            {{48, 106, -563}, {107, 107, 1204}, {108, 40869, -506}, },
            {{48, 57, 173}, {65, 77, 174}, {78, 78, 1205}, {79, 95, -500}, {97, 40869, -25}, },
            {{48, 82, -559}, {83, 83, 1206}, {84, 40869, -559}, },
            {{48, 98, -260}, {99, 99, 1207}, {100, 40869, -300}, },
            {{48, 109, -46}, {110, 110, 1208}, {111, 40869, -37}, },
            {{48, 107, -278}, {108, 108, 1209}, {109, 40869, -271}, },
            {{48, 115, -270}, {116, 116, 1210}, {117, 40869, -260}, },
            {{48, 115, -270}, {116, 116, 1211}, {117, 40869, -260}, },
            {{48, 104, -266}, {105, 105, 1212}, {106, 40869, -266}, },
            {{48, 114, -259}, {115, 115, 1213}, {116, 40869, -46}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 1214}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 1215}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 1216}, {102, 40869, -39}, },
            {{48, 113, -280}, {114, 114, 1217}, {115, 40869, -42}, },
            {{48, 104, -266}, {105, 105, 1218}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 113, -280}, {114, 114, 1219}, {115, 40869, -42}, },
            {{48, 107, -278}, {108, 108, 1220}, {109, 40869, -271}, },
            {{48, 95, -25}, {97, 97, 1221}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 1222}, {106, 40869, -266}, },
            {{33, 33, 1223}, {34, 35, -575}, {36, 36, 1224}, {37, 37, 1225}, {38, 38, 1226}, {39, 39, 1227}, {40, 40, 1228}, {41, 41, 1229}, {42, 42, 1230}, {43, 43, 1231}, {44, 44, 1232}, {45, 45, 1233}, {46, 46, 1234}, {47, 47, 899}, {48, 57, 1235}, {58, 58, 1236}, {59, 59, 1237}, {61, 61, 1238}, {63, 63, 742}, {64, 64, 1239}, {65, 90, 1240}, {95, 95, 1241}, {97, 122, 1242}, {126, 126, 1243}, {160, 191, 1244}, {192, 214, 1245}, {215, 215, 1244}, {216, 246, 1246}, {247, 247, 1244}, {248, 255, 1247}, {256, 305, 1248}, {306, 307, 1244}, {308, 318, 1249}, {319, 320, 1244}, {321, 328, 1250}, {329, 329, 1244}, {330, 382, 1251}, {383, 383, 1244}, {384, 451, 1252}, {452, 460, 1244}, {461, 496, 1253}, {497, 499, 1244}, {500, 501, 1254}, {502, 505, 1244}, {506, 535, 1255}, {536, 591, 1244}, {592, 680, 1256}, {681, 698, 1244}, {699, 705, 1257}, {706, 901, 1244}, {902, 902, 1258}, {903, 903, 1244}, {904, 906, 1259}, {907, 907, 1244}, {908, 908, 1260}, {909, 909, 1244}, {910, 929, 1261}, {930, 930, 1244}, {931, 974, 1262}, {975, 975, 1244}, {976, 982, 1263}, {983, 985, 1244}, {986, 986, 1264}, {987, 987, 1244}, {988, 988, 1265}, {989, 989, 1244}, {990, 990, 1266}, {991, 991, 1244}, {992, 992, 1267}, {993, 993, 1244}, {994, 1011, 1268}, {1012, 1024, 1244}, {1025, 1036, 1269}, {1037, 1037, 1244}, {1038, 1103, 1270}, {1104, 1104, 1244}, {1105, 1116, 1271}, {1117, 1117, 1244}, {1118, 1153, 1272}, {1154, 1167, 1244}, {1168, 1220, 1273}, {1221, 1222, 1244}, {1223, 1224, 1274}, {1225, 1226, 1244}, {1227, 1228, 1275}, {1229, 1231, 1244}, {1232, 1259, 1276}, {1260, 1261, 1244}, {1262, 1269, 1277}, {1270, 1271, 1244}, {1272, 1273, 1278}, {1274, 1328, 1244}, {1329, 1366, 1279}, {1367, 1368, 1244}, {1369, 1369, 1280}, {1370, 1376, 1244}, {1377, 1414, 1281}, {1415, 1487, 1244}, {1488, 1514, 1282}, {1515, 1519, 1244}, {1520, 1522, 1283}, {1523, 1568, 1244}, {1569, 1594, 1284}, {1595, 1600, 1244}, {1601, 1610, 1285}, {1611, 1648, 1244}, {1649, 1719, 1286}, {1720, 1721, 1244}, {1722, 1726, 1287}, {1727, 1727, 1244}, {1728, 1742, 1288}, {1743, 1743, 1244}, {1744, 1747, 1289}, {1748, 1748, 1244}, {1749, 1749, 1290}, {1750, 1764, 1244}, {1765, 1766, 1291}, {1767, 12294, 1244}, {12295, 12295, 1292}, {12296, 12320, 1244}, {12321, 12329, 1293}, {12330, 19967, 1244}, {19968, 40869, 1294}, {40870, 55295, 1244}, {63744, 64975, 1295}, {65008, 65519, 1296}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{48, 57, 1297}, {65, 70, 1298}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{48, 57, 1299}, {65, 70, 1300}, },
            {{48, 70, -978}, },
            {{33, 46, -739}, {47, 47, 1301}, {48, 65519, -739}, },
            {{33, 65519, -980}, },
            {{48, 57, 1302}, {65, 70, 1303}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 33, 1304}, {34, 35, -575}, {36, 36, 1305}, {37, 37, 1306}, {38, 38, 1307}, {39, 39, 1308}, {40, 40, 1309}, {41, 41, 1310}, {42, 42, 1311}, {43, 43, 1312}, {44, 44, 1313}, {45, 45, 1314}, {46, 46, 1315}, {47, 47, 1316}, {48, 48, 1317}, {49, 49, 1318}, {50, 50, 1319}, {51, 57, 1320}, {58, 58, 1321}, {59, 59, 1322}, {61, 61, 1323}, {63, 63, 742}, {64, 64, 1324}, {65, 90, 1325}, {91, 91, 1326}, {95, 95, 1327}, {97, 122, 1328}, {126, 126, 1329}, {160, 191, 1330}, {192, 214, 1331}, {215, 215, 1330}, {216, 246, 1332}, {247, 247, 1330}, {248, 255, 1333}, {256, 305, 1334}, {306, 307, 1330}, {308, 318, 1335}, {319, 320, 1330}, {321, 328, 1336}, {329, 329, 1330}, {330, 382, 1337}, {383, 383, 1330}, {384, 451, 1338}, {452, 460, 1330}, {461, 496, 1339}, {497, 499, 1330}, {500, 501, 1340}, {502, 505, 1330}, {506, 535, 1341}, {536, 591, 1330}, {592, 680, 1342}, {681, 698, 1330}, {699, 705, 1343}, {706, 901, 1330}, {902, 902, 1344}, {903, 903, 1330}, {904, 906, 1345}, {907, 907, 1330}, {908, 908, 1346}, {909, 909, 1330}, {910, 929, 1347}, {930, 930, 1330}, {931, 974, 1348}, {975, 975, 1330}, {976, 982, 1349}, {983, 985, 1330}, {986, 986, 1350}, {987, 987, 1330}, {988, 988, 1351}, {989, 989, 1330}, {990, 990, 1352}, {991, 991, 1330}, {992, 992, 1353}, {993, 993, 1330}, {994, 1011, 1354}, {1012, 1024, 1330}, {1025, 1036, 1355}, {1037, 1037, 1330}, {1038, 1103, 1356}, {1104, 1104, 1330}, {1105, 1116, 1357}, {1117, 1117, 1330}, {1118, 1153, 1358}, {1154, 1167, 1330}, {1168, 1220, 1359}, {1221, 1222, 1330}, {1223, 1224, 1360}, {1225, 1226, 1330}, {1227, 1228, 1361}, {1229, 1231, 1330}, {1232, 1259, 1362}, {1260, 1261, 1330}, {1262, 1269, 1363}, {1270, 1271, 1330}, {1272, 1273, 1364}, {1274, 1328, 1330}, {1329, 1366, 1365}, {1367, 1368, 1330}, {1369, 1369, 1366}, {1370, 1376, 1330}, {1377, 1414, 1367}, {1415, 1487, 1330}, {1488, 1514, 1368}, {1515, 1519, 1330}, {1520, 1522, 1369}, {1523, 1568, 1330}, {1569, 1594, 1370}, {1595, 1600, 1330}, {1601, 1610, 1371}, {1611, 1648, 1330}, {1649, 1719, 1372}, {1720, 1721, 1330}, {1722, 1726, 1373}, {1727, 1727, 1330}, {1728, 1742, 1374}, {1743, 1743, 1330}, {1744, 1747, 1375}, {1748, 1748, 1330}, {1749, 1749, 1376}, {1750, 1764, 1330}, {1765, 1766, 1377}, {1767, 12294, 1330}, {12295, 12295, 1378}, {12296, 12320, 1330}, {12321, 12329, 1379}, {12330, 19967, 1330}, {19968, 40869, 1380}, {40870, 55295, 1330}, {63744, 64975, 1381}, {65008, 65519, 1382}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{48, 57, 1383}, {65, 70, 1384}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{48, 98, -260}, {99, 99, 1385}, {100, 40869, -300}, },
            {{48, 68, -700}, {69, 69, 1386}, {70, 40869, -700}, },
            {{48, 100, -35}, {101, 101, 1387}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 1388}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 97, 1389}, {98, 40869, -36}, },
            {{48, 114, -259}, {115, 115, 1390}, {116, 40869, -46}, },
            {{48, 100, -35}, {101, 101, 1391}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 1392}, {117, 40869, -260}, },
            {{48, 107, -278}, {108, 108, 1393}, {109, 40869, -271}, },
            {{48, 114, -259}, {115, 115, 1394}, {116, 40869, -46}, },
            {{48, 57, 173}, {65, 86, 174}, {87, 87, 1395}, {88, 90, 174}, {92, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 1396}, {104, 40869, -262}, },
            {{48, 115, -270}, {116, 116, 1397}, {117, 40869, -260}, },
            {{48, 115, -270}, {116, 116, 1398}, {117, 40869, -260}, },
            {{48, 113, -280}, {114, 114, 1399}, {115, 40869, -42}, },
            {{48, 107, -278}, {108, 108, 1400}, {109, 40869, -271}, },
            {{48, 110, -38}, {111, 111, 1401}, {112, 40869, -31}, },
            {{48, 110, -38}, {111, 111, 1402}, {112, 40869, -31}, },
            {{48, 110, -38}, {111, 111, 1403}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 1404}, {102, 40869, -39}, },
            {{48, 99, -261}, {100, 100, 1405}, {101, 114, 177}, {115, 115, 1406}, {116, 40869, -46}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 114, -259}, {115, 115, 1407}, {116, 40869, -46}, },
            {{48, 95, -25}, {97, 97, 1408}, {98, 40869, -36}, },
            {{48, 110, -38}, {111, 111, 1409}, {112, 40869, -31}, },
            {{48, 95, -25}, {97, 97, 1410}, {98, 40869, -36}, },
            {{48, 69, -525}, {70, 70, 1411}, {71, 40869, -525}, },
            {{48, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 1412}, {109, 40869, -271}, },
            {{48, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 1413}, {117, 40869, -260}, },
            {{48, 109, -46}, {110, 110, 1414}, {111, 40869, -37}, },
            {{48, 95, -25}, {97, 97, 1415}, {98, 40869, -36}, },
            {{48, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 1416}, {109, 40869, -271}, },
            {{48, 95, -25}, {97, 97, 1417}, {98, 40869, -36}, },
            {{48, 95, -25}, {97, 97, 1418}, {98, 40869, -36}, },
            {{48, 116, -276}, {117, 117, 1419}, {118, 40869, -35}, },
            {{48, 99, -261}, {100, 100, 1420}, {101, 114, 177}, {115, 115, 1421}, {116, 40869, -46}, },
            {{48, 114, -259}, {115, 115, 1422}, {116, 40869, -46}, },
            {{48, 104, -266}, {105, 105, 1423}, {106, 40869, -266}, },
            {{48, 98, -260}, {99, 99, 1424}, {100, 40869, -300}, },
            {{48, 95, -25}, {97, 97, 1425}, {98, 40869, -36}, },
            {{48, 100, -35}, {101, 101, 1426}, {102, 40869, -39}, },
            {{48, 116, -276}, {117, 117, 1427}, {118, 40869, -35}, },
            {{48, 100, -35}, {101, 101, 1428}, {102, 40869, -39}, },
            {{48, 82, -559}, {83, 83, 1429}, {84, 40869, -559}, },
            {{48, 104, -266}, {105, 105, 1430}, {106, 110, 177}, {111, 111, 1431}, {112, 40869, -31}, },
            {{48, 57, 173}, {65, 78, 174}, {79, 79, 1432}, {80, 90, 174}, {92, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 1433}, {98, 40869, -36}, },
            {{48, 98, -260}, {99, 99, 1434}, {100, 40869, -300}, },
            {{48, 77, -881}, {78, 78, 1435}, {79, 40869, -881}, },
            {{48, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 1436}, {104, 40869, -262}, },
            {{48, 95, -25}, {97, 97, 1437}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 1438}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 1439}, {117, 40869, -260}, },
            {{48, 79, -849}, {80, 80, 1440}, {81, 40869, -849}, },
            {{48, 113, -280}, {114, 114, 1441}, {115, 40869, -42}, },
            {{48, 108, -269}, {109, 109, 1442}, {110, 40869, -291}, },
            {{48, 95, -25}, {97, 97, 1443}, {98, 40869, -36}, },
            {{48, 109, -46}, {110, 110, 1444}, {111, 40869, -37}, },
            {{48, 95, -25}, {97, 97, 1445}, {98, 40869, -36}, },
            {{48, 99, -261}, {100, 100, 1446}, {101, 40869, -261}, },
            {{48, 100, -35}, {101, 101, 1447}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 1448}, {106, 40869, -266}, },
            {{48, 110, -38}, {111, 111, 1449}, {112, 40869, -31}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 1450}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 1451}, {117, 40869, -260}, },
            {{48, 85, -723}, {86, 86, 1452}, {87, 40869, -511}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 1453}, {112, 40869, -31}, },
            {{48, 104, -266}, {105, 105, 1454}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 98, -260}, {99, 99, 1455}, {100, 40869, -300}, },
            {{48, 95, -25}, {97, 97, 1456}, {98, 40869, -36}, },
            {{48, 113, -280}, {114, 114, 1457}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 1458}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 99, -261}, {100, 100, 1459}, {101, 40869, -261}, },
            {{48, 113, -280}, {114, 114, 1460}, {115, 40869, -42}, },
            {{48, 117, -631}, {118, 118, 1461}, {119, 40869, -288}, },
            {{48, 95, -25}, {97, 97, 1462}, {98, 40869, -36}, },
            {{48, 110, -38}, {111, 111, 1463}, {112, 40869, -31}, },
            {{48, 110, -38}, {111, 111, 1464}, {112, 40869, -31}, },
            {{48, 113, -280}, {114, 114, 1465}, {115, 40869, -42}, },
            {{48, 95, -25}, {97, 97, 1466}, {98, 40869, -36}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{48, 57, 1467}, {65, 70, 1468}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{48, 57, 1469}, {65, 70, 1470}, },
            {{48, 70, -1299}, },
            {{33, 65519, -725}, },
            {{33, 65519, -725}, },
            {{33, 33, 1471}, {34, 35, -575}, {36, 36, 1472}, {37, 37, 1473}, {38, 38, 1474}, {39, 39, 1475}, {40, 40, 1476}, {41, 41, 1477}, {42, 42, 1478}, {43, 43, 1479}, {44, 44, 1480}, {45, 45, 1481}, {46, 46, 1482}, {47, 47, 1301}, {48, 57, 1483}, {58, 58, 1484}, {59, 59, 1485}, {61, 61, 1486}, {63, 63, 742}, {64, 64, 1487}, {65, 90, 1488}, {95, 95, 1489}, {97, 122, 1490}, {126, 126, 1491}, {160, 191, 1492}, {192, 214, 1493}, {215, 215, 1492}, {216, 246, 1494}, {247, 247, 1492}, {248, 255, 1495}, {256, 305, 1496}, {306, 307, 1492}, {308, 318, 1497}, {319, 320, 1492}, {321, 328, 1498}, {329, 329, 1492}, {330, 382, 1499}, {383, 383, 1492}, {384, 451, 1500}, {452, 460, 1492}, {461, 496, 1501}, {497, 499, 1492}, {500, 501, 1502}, {502, 505, 1492}, {506, 535, 1503}, {536, 591, 1492}, {592, 680, 1504}, {681, 698, 1492}, {699, 705, 1505}, {706, 901, 1492}, {902, 902, 1506}, {903, 903, 1492}, {904, 906, 1507}, {907, 907, 1492}, {908, 908, 1508}, {909, 909, 1492}, {910, 929, 1509}, {930, 930, 1492}, {931, 974, 1510}, {975, 975, 1492}, {976, 982, 1511}, {983, 985, 1492}, {986, 986, 1512}, {987, 987, 1492}, {988, 988, 1513}, {989, 989, 1492}, {990, 990, 1514}, {991, 991, 1492}, {992, 992, 1515}, {993, 993, 1492}, {994, 1011, 1516}, {1012, 1024, 1492}, {1025, 1036, 1517}, {1037, 1037, 1492}, {1038, 1103, 1518}, {1104, 1104, 1492}, {1105, 1116, 1519}, {1117, 1117, 1492}, {1118, 1153, 1520}, {1154, 1167, 1492}, {1168, 1220, 1521}, {1221, 1222, 1492}, {1223, 1224, 1522}, {1225, 1226, 1492}, {1227, 1228, 1523}, {1229, 1231, 1492}, {1232, 1259, 1524}, {1260, 1261, 1492}, {1262, 1269, 1525}, {1270, 1271, 1492}, {1272, 1273, 1526}, {1274, 1328, 1492}, {1329, 1366, 1527}, {1367, 1368, 1492}, {1369, 1369, 1528}, {1370, 1376, 1492}, {1377, 1414, 1529}, {1415, 1487, 1492}, {1488, 1514, 1530}, {1515, 1519, 1492}, {1520, 1522, 1531}, {1523, 1568, 1492}, {1569, 1594, 1532}, {1595, 1600, 1492}, {1601, 1610, 1533}, {1611, 1648, 1492}, {1649, 1719, 1534}, {1720, 1721, 1492}, {1722, 1726, 1535}, {1727, 1727, 1492}, {1728, 1742, 1536}, {1743, 1743, 1492}, {1744, 1747, 1537}, {1748, 1748, 1492}, {1749, 1749, 1538}, {1750, 1764, 1492}, {1765, 1766, 1539}, {1767, 12294, 1492}, {12295, 12295, 1540}, {12296, 12320, 1492}, {12321, 12329, 1541}, {12330, 19967, 1492}, {19968, 40869, 1542}, {40870, 55295, 1492}, {63744, 64975, 1543}, {65008, 65519, 1544}, },
            {{48, 57, 1545}, {65, 70, 1546}, },
            {{48, 70, -1304}, },
            {{33, 46, -992}, {47, 47, 1301}, {48, 57, 1547}, {58, 58, 1548}, {59, 64, -992}, {65, 90, 1549}, {95, 95, 1327}, {97, 122, 1550}, {126, 191, -992}, {192, 214, 1551}, {215, 215, 1330}, {216, 246, 1552}, {247, 247, 1330}, {248, 255, 1553}, {256, 305, 1554}, {306, 307, 1330}, {308, 318, 1555}, {319, 320, 1330}, {321, 328, 1556}, {329, 329, 1330}, {330, 382, 1557}, {383, 383, 1330}, {384, 451, 1558}, {452, 460, 1330}, {461, 496, 1559}, {497, 499, 1330}, {500, 501, 1560}, {502, 505, 1330}, {506, 535, 1561}, {536, 591, 1330}, {592, 680, 1562}, {681, 698, 1330}, {699, 705, 1563}, {706, 901, 1330}, {902, 902, 1564}, {903, 903, 1330}, {904, 906, 1565}, {907, 907, 1330}, {908, 908, 1566}, {909, 909, 1330}, {910, 929, 1567}, {930, 930, 1330}, {931, 974, 1568}, {975, 975, 1330}, {976, 982, 1569}, {983, 985, 1330}, {986, 986, 1570}, {987, 987, 1330}, {988, 988, 1571}, {989, 989, 1330}, {990, 990, 1572}, {991, 991, 1330}, {992, 992, 1573}, {993, 993, 1330}, {994, 1011, 1574}, {1012, 1024, 1330}, {1025, 1036, 1575}, {1037, 1037, 1330}, {1038, 1103, 1576}, {1104, 1104, 1330}, {1105, 1116, 1577}, {1117, 1117, 1330}, {1118, 1153, 1578}, {1154, 1167, 1330}, {1168, 1220, 1579}, {1221, 1222, 1330}, {1223, 1224, 1580}, {1225, 1226, 1330}, {1227, 1228, 1581}, {1229, 1231, 1330}, {1232, 1259, 1582}, {1260, 1261, 1330}, {1262, 1269, 1583}, {1270, 1271, 1330}, {1272, 1273, 1584}, {1274, 1328, 1330}, {1329, 1366, 1585}, {1367, 1368, 1330}, {1369, 1369, 1586}, {1370, 1376, 1330}, {1377, 1414, 1587}, {1415, 1487, 1330}, {1488, 1514, 1588}, {1515, 1519, 1330}, {1520, 1522, 1589}, {1523, 1568, 1330}, {1569, 1594, 1590}, {1595, 1600, 1330}, {1601, 1610, 1591}, {1611, 1648, 1330}, {1649, 1719, 1592}, {1720, 1721, 1330}, {1722, 1726, 1593}, {1727, 1727, 1330}, {1728, 1742, 1594}, {1743, 1743, 1330}, {1744, 1747, 1595}, {1748, 1748, 1330}, {1749, 1749, 1596}, {1750, 1764, 1330}, {1765, 1766, 1597}, {1767, 12294, 1330}, {12295, 12295, 1598}, {12296, 12320, 1330}, {12321, 12329, 1599}, {12330, 19967, 1330}, {19968, 40869, 1600}, {40870, 65519, -992}, },
            {{33, 65519, -1306}, },
            {{48, 57, 1601}, {65, 70, 1602}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 33, 1603}, {34, 35, -575}, {36, 36, 1604}, {37, 37, 1605}, {38, 38, 1606}, {39, 39, 1607}, {40, 40, 1608}, {41, 41, 1609}, {42, 42, 1610}, {43, 43, 1611}, {44, 44, 1612}, {45, 45, 1613}, {46, 46, 1614}, {47, 47, 1615}, {48, 57, 1616}, {58, 58, 1617}, {59, 59, 1618}, {61, 61, 1619}, {63, 63, 742}, {64, 64, 1620}, {65, 90, 1621}, {95, 95, 1622}, {97, 122, 1623}, {126, 126, 1624}, {160, 191, 1625}, {192, 214, 1626}, {215, 215, 1625}, {216, 246, 1627}, {247, 247, 1625}, {248, 255, 1628}, {256, 305, 1629}, {306, 307, 1625}, {308, 318, 1630}, {319, 320, 1625}, {321, 328, 1631}, {329, 329, 1625}, {330, 382, 1632}, {383, 383, 1625}, {384, 451, 1633}, {452, 460, 1625}, {461, 496, 1634}, {497, 499, 1625}, {500, 501, 1635}, {502, 505, 1625}, {506, 535, 1636}, {536, 591, 1625}, {592, 680, 1637}, {681, 698, 1625}, {699, 705, 1638}, {706, 901, 1625}, {902, 902, 1639}, {903, 903, 1625}, {904, 906, 1640}, {907, 907, 1625}, {908, 908, 1641}, {909, 909, 1625}, {910, 929, 1642}, {930, 930, 1625}, {931, 974, 1643}, {975, 975, 1625}, {976, 982, 1644}, {983, 985, 1625}, {986, 986, 1645}, {987, 987, 1625}, {988, 988, 1646}, {989, 989, 1625}, {990, 990, 1647}, {991, 991, 1625}, {992, 992, 1648}, {993, 993, 1625}, {994, 1011, 1649}, {1012, 1024, 1625}, {1025, 1036, 1650}, {1037, 1037, 1625}, {1038, 1103, 1651}, {1104, 1104, 1625}, {1105, 1116, 1652}, {1117, 1117, 1625}, {1118, 1153, 1653}, {1154, 1167, 1625}, {1168, 1220, 1654}, {1221, 1222, 1625}, {1223, 1224, 1655}, {1225, 1226, 1625}, {1227, 1228, 1656}, {1229, 1231, 1625}, {1232, 1259, 1657}, {1260, 1261, 1625}, {1262, 1269, 1658}, {1270, 1271, 1625}, {1272, 1273, 1659}, {1274, 1328, 1625}, {1329, 1366, 1660}, {1367, 1368, 1625}, {1369, 1369, 1661}, {1370, 1376, 1625}, {1377, 1414, 1662}, {1415, 1487, 1625}, {1488, 1514, 1663}, {1515, 1519, 1625}, {1520, 1522, 1664}, {1523, 1568, 1625}, {1569, 1594, 1665}, {1595, 1600, 1625}, {1601, 1610, 1666}, {1611, 1648, 1625}, {1649, 1719, 1667}, {1720, 1721, 1625}, {1722, 1726, 1668}, {1727, 1727, 1625}, {1728, 1742, 1669}, {1743, 1743, 1625}, {1744, 1747, 1670}, {1748, 1748, 1625}, {1749, 1749, 1671}, {1750, 1764, 1625}, {1765, 1766, 1672}, {1767, 12294, 1625}, {12295, 12295, 1673}, {12296, 12320, 1625}, {12321, 12329, 1674}, {12330, 19967, 1625}, {19968, 40869, 1675}, {40870, 55295, 1625}, {63744, 64975, 1676}, {65008, 65519, 1677}, },
            {{33, 44, -992}, {45, 45, 1678}, {46, 46, 1679}, {47, 47, 1316}, {48, 57, 1680}, {58, 64, -992}, {65, 90, 1681}, {95, 95, 1327}, {97, 122, 1682}, {126, 191, -992}, {192, 214, 1683}, {215, 215, 1330}, {216, 246, 1684}, {247, 247, 1330}, {248, 255, 1685}, {256, 305, 1686}, {306, 307, 1330}, {308, 318, 1687}, {319, 320, 1330}, {321, 328, 1688}, {329, 329, 1330}, {330, 382, 1689}, {383, 383, 1330}, {384, 451, 1690}, {452, 460, 1330}, {461, 496, 1691}, {497, 499, 1330}, {500, 501, 1692}, {502, 505, 1330}, {506, 535, 1693}, {536, 591, 1330}, {592, 680, 1694}, {681, 698, 1330}, {699, 705, 1695}, {706, 901, 1330}, {902, 902, 1696}, {903, 903, 1330}, {904, 906, 1697}, {907, 907, 1330}, {908, 908, 1698}, {909, 909, 1330}, {910, 929, 1699}, {930, 930, 1330}, {931, 974, 1700}, {975, 975, 1330}, {976, 982, 1701}, {983, 985, 1330}, {986, 986, 1702}, {987, 987, 1330}, {988, 988, 1703}, {989, 989, 1330}, {990, 990, 1704}, {991, 991, 1330}, {992, 992, 1705}, {993, 993, 1330}, {994, 1011, 1706}, {1012, 1024, 1330}, {1025, 1036, 1707}, {1037, 1037, 1330}, {1038, 1103, 1708}, {1104, 1104, 1330}, {1105, 1116, 1709}, {1117, 1117, 1330}, {1118, 1153, 1710}, {1154, 1167, 1330}, {1168, 1220, 1711}, {1221, 1222, 1330}, {1223, 1224, 1712}, {1225, 1226, 1330}, {1227, 1228, 1713}, {1229, 1231, 1330}, {1232, 1259, 1714}, {1260, 1261, 1330}, {1262, 1269, 1715}, {1270, 1271, 1330}, {1272, 1273, 1716}, {1274, 1328, 1330}, {1329, 1366, 1717}, {1367, 1368, 1330}, {1369, 1369, 1718}, {1370, 1376, 1330}, {1377, 1414, 1719}, {1415, 1487, 1330}, {1488, 1514, 1720}, {1515, 1519, 1330}, {1520, 1522, 1721}, {1523, 1568, 1330}, {1569, 1594, 1722}, {1595, 1600, 1330}, {1601, 1610, 1723}, {1611, 1648, 1330}, {1649, 1719, 1724}, {1720, 1721, 1330}, {1722, 1726, 1725}, {1727, 1727, 1330}, {1728, 1742, 1726}, {1743, 1743, 1330}, {1744, 1747, 1727}, {1748, 1748, 1330}, {1749, 1749, 1728}, {1750, 1764, 1330}, {1765, 1766, 1729}, {1767, 12294, 1330}, {12295, 12295, 1730}, {12296, 12320, 1330}, {12321, 12329, 1731}, {12330, 19967, 1330}, {19968, 40869, 1732}, {40870, 65519, -992}, },
            {{33, 47, -1319}, {48, 57, 1733}, {58, 65519, -1319}, },
            {{33, 47, -1319}, {48, 52, 1734}, {53, 53, 1735}, {54, 57, 1736}, {58, 65519, -1319}, },
            {{33, 47, -1319}, {48, 57, 1736}, {58, 65519, -1319}, },
            {{33, 47, -992}, {48, 57, 1737}, {58, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 46, -1303}, {47, 47, 1316}, {48, 48, 1738}, {49, 49, 1739}, {50, 50, 1740}, {51, 57, 1741}, {58, 58, 1742}, {59, 64, -1303}, {65, 90, 1743}, {91, 91, 1326}, {95, 95, 1489}, {97, 122, 1744}, {126, 191, -1303}, {192, 214, 1745}, {215, 215, 1492}, {216, 246, 1746}, {247, 247, 1492}, {248, 255, 1747}, {256, 305, 1748}, {306, 307, 1492}, {308, 318, 1749}, {319, 320, 1492}, {321, 328, 1750}, {329, 329, 1492}, {330, 382, 1751}, {383, 383, 1492}, {384, 451, 1752}, {452, 460, 1492}, {461, 496, 1753}, {497, 499, 1492}, {500, 501, 1754}, {502, 505, 1492}, {506, 535, 1755}, {536, 591, 1492}, {592, 680, 1756}, {681, 698, 1492}, {699, 705, 1757}, {706, 901, 1492}, {902, 902, 1758}, {903, 903, 1492}, {904, 906, 1759}, {907, 907, 1492}, {908, 908, 1760}, {909, 909, 1492}, {910, 929, 1761}, {930, 930, 1492}, {931, 974, 1762}, {975, 975, 1492}, {976, 982, 1763}, {983, 985, 1492}, {986, 986, 1764}, {987, 987, 1492}, {988, 988, 1765}, {989, 989, 1492}, {990, 990, 1766}, {991, 991, 1492}, {992, 992, 1767}, {993, 993, 1492}, {994, 1011, 1768}, {1012, 1024, 1492}, {1025, 1036, 1769}, {1037, 1037, 1492}, {1038, 1103, 1770}, {1104, 1104, 1492}, {1105, 1116, 1771}, {1117, 1117, 1492}, {1118, 1153, 1772}, {1154, 1167, 1492}, {1168, 1220, 1773}, {1221, 1222, 1492}, {1223, 1224, 1774}, {1225, 1226, 1492}, {1227, 1228, 1775}, {1229, 1231, 1492}, {1232, 1259, 1776}, {1260, 1261, 1492}, {1262, 1269, 1777}, {1270, 1271, 1492}, {1272, 1273, 1778}, {1274, 1328, 1492}, {1329, 1366, 1779}, {1367, 1368, 1492}, {1369, 1369, 1780}, {1370, 1376, 1492}, {1377, 1414, 1781}, {1415, 1487, 1492}, {1488, 1514, 1782}, {1515, 1519, 1492}, {1520, 1522, 1783}, {1523, 1568, 1492}, {1569, 1594, 1784}, {1595, 1600, 1492}, {1601, 1610, 1785}, {1611, 1648, 1492}, {1649, 1719, 1786}, {1720, 1721, 1492}, {1722, 1726, 1787}, {1727, 1727, 1492}, {1728, 1742, 1788}, {1743, 1743, 1492}, {1744, 1747, 1789}, {1748, 1748, 1492}, {1749, 1749, 1790}, {1750, 1764, 1492}, {1765, 1766, 1791}, {1767, 12294, 1492}, {12295, 12295, 1792}, {12296, 12320, 1492}, {12321, 12329, 1793}, {12330, 19967, 1492}, {19968, 40869, 1794}, {40870, 65519, -1303}, },
            {{33, 45, -1319}, {46, 46, 1795}, {47, 65519, -1319}, },
            {{48, 57, 1796}, {58, 58, 1797}, {65, 70, 1798}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{48, 57, 1799}, {65, 70, 1800}, },
            {{48, 70, -1385}, },
            {{48, 115, -270}, {116, 116, 1801}, {117, 40869, -260}, },
            {{48, 117, -631}, {118, 118, 1802}, {119, 40869, -288}, },
            {{48, 70, -721}, {71, 71, 1803}, {72, 40869, -721}, },
            {{48, 120, -527}, {121, 121, 1804}, {122, 40869, -44}, },
            {{48, 115, -270}, {116, 116, 1805}, {117, 40869, -260}, },
            {{48, 66, -500}, {67, 67, 1806}, {68, 90, 174}, {92, 40869, -25}, },
            {{48, 99, -261}, {100, 100, 1807}, {101, 40869, -261}, },
            {{48, 104, -266}, {105, 105, 1808}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 1809}, {106, 40869, -266}, },
            {{48, 66, -500}, {67, 67, 1810}, {68, 40869, -1392}, },
            {{48, 110, -38}, {111, 111, 1811}, {112, 40869, -31}, },
            {{48, 113, -280}, {114, 114, 1812}, {115, 40869, -42}, },
            {{32, 32, 1813}, {48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 1814}, {102, 40869, -39}, },
            {{48, 69, -525}, {70, 70, 1815}, {71, 95, -525}, {97, 107, 177}, {108, 108, 1816}, {109, 40869, -271}, },
            {{48, 118, -505}, {119, 119, 1817}, {120, 40869, -47}, },
            {{48, 118, -505}, {119, 119, 1818}, {120, 40869, -47}, },
            {{48, 109, -46}, {110, 110, 1819}, {111, 40869, -37}, },
            {{48, 99, -261}, {100, 100, 1820}, {101, 40869, -261}, },
            {{48, 57, 173}, {65, 65, 174}, {66, 66, 1821}, {67, 90, 174}, {92, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 97, -29}, {98, 98, 1822}, {99, 40869, -314}, },
            {{48, 114, -259}, {115, 115, 1823}, {116, 40869, -46}, },
            {{48, 107, -278}, {108, 108, 1824}, {109, 40869, -271}, },
            {{48, 116, -276}, {117, 117, 1825}, {118, 40869, -35}, },
            {{48, 100, -35}, {101, 101, 1826}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 1827}, {106, 40869, -266}, },
            {{48, 95, -25}, {97, 97, 1828}, {98, 40869, -36}, },
            {{48, 113, -280}, {114, 114, 1829}, {115, 40869, -42}, },
            {{48, 57, 173}, {65, 65, 1830}, {66, 90, 174}, {92, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 1831}, {117, 40869, -260}, },
            {{48, 97, -29}, {98, 98, 1832}, {99, 40869, -314}, },
            {{48, 100, -35}, {101, 101, 1833}, {102, 40869, -39}, },
            {{48, 65, -1407}, {66, 66, 1834}, {67, 40869, -1407}, },
            {{48, 83, -296}, {84, 84, 1835}, {85, 40869, -296}, },
            {{48, 78, -1182}, {79, 79, 1836}, {80, 40869, -1182}, },
            {{48, 109, -46}, {110, 110, 1837}, {111, 40869, -37}, },
            {{48, 100, -35}, {101, 101, 1838}, {102, 40869, -39}, },
            {{48, 98, -260}, {99, 99, 1839}, {100, 40869, -300}, },
            {{48, 95, -25}, {97, 97, 1840}, {98, 40869, -36}, },
            {{48, 111, -264}, {112, 112, 1841}, {113, 40869, -264}, },
            {{48, 78, -1182}, {79, 79, 1842}, {80, 40869, -1182}, },
            {{48, 100, -35}, {101, 101, 1843}, {102, 40869, -39}, },
            {{48, 110, -38}, {111, 111, 1844}, {112, 40869, -31}, },
            {{48, 113, -280}, {114, 114, 1845}, {115, 40869, -42}, },
            {{48, 101, -33}, {102, 102, 1846}, {103, 40869, -273}, },
            {{48, 98, -260}, {99, 99, 1847}, {100, 40869, -300}, },
            {{48, 115, -270}, {116, 116, 1848}, {117, 40869, -260}, },
            {{48, 110, -38}, {111, 111, 1849}, {112, 40869, -31}, },
            {{48, 120, -527}, {121, 121, 1850}, {122, 40869, -44}, },
            {{48, 115, -270}, {116, 116, 1851}, {117, 40869, -260}, },
            {{48, 110, -38}, {111, 111, 1852}, {112, 40869, -31}, },
            {{48, 113, -280}, {114, 114, 1853}, {115, 40869, -42}, },
            {{48, 104, -266}, {105, 105, 1854}, {106, 40869, -266}, },
            {{48, 75, -312}, {76, 76, 1855}, {77, 40869, -312}, },
            {{48, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 1856}, {117, 40869, -260}, },
            {{48, 99, -261}, {100, 100, 1857}, {101, 40869, -261}, },
            {{48, 115, -270}, {116, 116, 1858}, {117, 40869, -260}, },
            {{48, 104, -266}, {105, 105, 1859}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 117, -631}, {118, 118, 1860}, {119, 40869, -288}, },
            {{48, 109, -46}, {110, 110, 1861}, {111, 40869, -37}, },
            {{48, 109, -46}, {110, 110, 1862}, {111, 40869, -37}, },
            {{48, 104, -266}, {105, 105, 1863}, {106, 40869, -266}, },
            {{48, 95, -25}, {97, 97, 1864}, {98, 40869, -36}, },
            {{48, 99, -261}, {100, 100, 1865}, {101, 40869, -261}, },
            {{48, 102, -262}, {103, 103, 1866}, {104, 40869, -262}, },
            {{48, 100, -35}, {101, 101, 1867}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 1868}, {117, 40869, -260}, },
            {{48, 104, -266}, {105, 105, 1869}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 1870}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 1871}, {106, 40869, -266}, },
            {{48, 117, -631}, {118, 118, 1872}, {119, 40869, -288}, },
            {{48, 104, -266}, {105, 105, 1873}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 1874}, {117, 40869, -260}, },
            {{48, 116, -276}, {117, 117, 1875}, {118, 40869, -35}, },
            {{48, 118, -505}, {119, 119, 1876}, {120, 40869, -47}, },
            {{48, 104, -266}, {105, 105, 1877}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 1878}, {117, 40869, -260}, },
            {{48, 57, 1879}, {65, 70, 1880}, },
            {{48, 70, -1469}, },
            {{33, 65519, -727}, },
            {{33, 65519, -727}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{48, 57, 1881}, {65, 70, 1882}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -980}, },
            {{33, 65519, -980}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{48, 57, 1883}, {65, 70, 1884}, },
            {{48, 70, -1603}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{48, 57, 1885}, {65, 70, 1886}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 33, 1887}, {34, 35, -575}, {36, 36, 1888}, {37, 37, 1889}, {38, 38, 1890}, {39, 39, 1891}, {40, 40, 1892}, {41, 41, 1893}, {42, 42, 1894}, {43, 43, 1895}, {44, 44, 1896}, {45, 45, 1897}, {46, 46, 1898}, {47, 47, 1615}, {48, 57, 1899}, {58, 58, 1900}, {59, 59, 1901}, {61, 61, 1902}, {63, 63, 742}, {64, 64, 1903}, {65, 90, 1904}, {95, 95, 1905}, {97, 122, 1906}, {126, 126, 1907}, {160, 191, 1908}, {192, 214, 1909}, {215, 215, 1908}, {216, 246, 1910}, {247, 247, 1908}, {248, 255, 1911}, {256, 305, 1912}, {306, 307, 1908}, {308, 318, 1913}, {319, 320, 1908}, {321, 328, 1914}, {329, 329, 1908}, {330, 382, 1915}, {383, 383, 1908}, {384, 451, 1916}, {452, 460, 1908}, {461, 496, 1917}, {497, 499, 1908}, {500, 501, 1918}, {502, 505, 1908}, {506, 535, 1919}, {536, 591, 1908}, {592, 680, 1920}, {681, 698, 1908}, {699, 705, 1921}, {706, 901, 1908}, {902, 902, 1922}, {903, 903, 1908}, {904, 906, 1923}, {907, 907, 1908}, {908, 908, 1924}, {909, 909, 1908}, {910, 929, 1925}, {930, 930, 1908}, {931, 974, 1926}, {975, 975, 1908}, {976, 982, 1927}, {983, 985, 1908}, {986, 986, 1928}, {987, 987, 1908}, {988, 988, 1929}, {989, 989, 1908}, {990, 990, 1930}, {991, 991, 1908}, {992, 992, 1931}, {993, 993, 1908}, {994, 1011, 1932}, {1012, 1024, 1908}, {1025, 1036, 1933}, {1037, 1037, 1908}, {1038, 1103, 1934}, {1104, 1104, 1908}, {1105, 1116, 1935}, {1117, 1117, 1908}, {1118, 1153, 1936}, {1154, 1167, 1908}, {1168, 1220, 1937}, {1221, 1222, 1908}, {1223, 1224, 1938}, {1225, 1226, 1908}, {1227, 1228, 1939}, {1229, 1231, 1908}, {1232, 1259, 1940}, {1260, 1261, 1908}, {1262, 1269, 1941}, {1270, 1271, 1908}, {1272, 1273, 1942}, {1274, 1328, 1908}, {1329, 1366, 1943}, {1367, 1368, 1908}, {1369, 1369, 1944}, {1370, 1376, 1908}, {1377, 1414, 1945}, {1415, 1487, 1908}, {1488, 1514, 1946}, {1515, 1519, 1908}, {1520, 1522, 1947}, {1523, 1568, 1908}, {1569, 1594, 1948}, {1595, 1600, 1908}, {1601, 1610, 1949}, {1611, 1648, 1908}, {1649, 1719, 1950}, {1720, 1721, 1908}, {1722, 1726, 1951}, {1727, 1727, 1908}, {1728, 1742, 1952}, {1743, 1743, 1908}, {1744, 1747, 1953}, {1748, 1748, 1908}, {1749, 1749, 1954}, {1750, 1764, 1908}, {1765, 1766, 1955}, {1767, 12294, 1908}, {12295, 12295, 1956}, {12296, 12320, 1908}, {12321, 12329, 1957}, {12330, 19967, 1908}, {19968, 40869, 1958}, {40870, 55295, 1908}, {63744, 64975, 1959}, {65008, 65519, 1960}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{33, 45, -1319}, {46, 47, -1306}, {48, 57, 1680}, {58, 64, -1306}, {65, 65519, -1319}, },
            {{33, 47, -992}, {48, 48, 1961}, {49, 49, 1962}, {50, 50, 1963}, {51, 57, 1964}, {58, 64, -992}, {65, 90, 1965}, {95, 95, 1327}, {97, 122, 1966}, {126, 191, -992}, {192, 214, 1967}, {215, 215, 1330}, {216, 246, 1968}, {247, 247, 1330}, {248, 255, 1969}, {256, 305, 1970}, {306, 307, 1330}, {308, 318, 1971}, {319, 320, 1330}, {321, 328, 1972}, {329, 329, 1330}, {330, 382, 1973}, {383, 383, 1330}, {384, 451, 1974}, {452, 460, 1330}, {461, 496, 1975}, {497, 499, 1330}, {500, 501, 1976}, {502, 505, 1330}, {506, 535, 1977}, {536, 591, 1330}, {592, 680, 1978}, {681, 698, 1330}, {699, 705, 1979}, {706, 901, 1330}, {902, 902, 1980}, {903, 903, 1330}, {904, 906, 1981}, {907, 907, 1330}, {908, 908, 1982}, {909, 909, 1330}, {910, 929, 1983}, {930, 930, 1330}, {931, 974, 1984}, {975, 975, 1330}, {976, 982, 1985}, {983, 985, 1330}, {986, 986, 1986}, {987, 987, 1330}, {988, 988, 1987}, {989, 989, 1330}, {990, 990, 1988}, {991, 991, 1330}, {992, 992, 1989}, {993, 993, 1330}, {994, 1011, 1990}, {1012, 1024, 1330}, {1025, 1036, 1991}, {1037, 1037, 1330}, {1038, 1103, 1992}, {1104, 1104, 1330}, {1105, 1116, 1993}, {1117, 1117, 1330}, {1118, 1153, 1994}, {1154, 1167, 1330}, {1168, 1220, 1995}, {1221, 1222, 1330}, {1223, 1224, 1996}, {1225, 1226, 1330}, {1227, 1228, 1997}, {1229, 1231, 1330}, {1232, 1259, 1998}, {1260, 1261, 1330}, {1262, 1269, 1999}, {1270, 1271, 1330}, {1272, 1273, 2000}, {1274, 1328, 1330}, {1329, 1366, 2001}, {1367, 1368, 1330}, {1369, 1369, 2002}, {1370, 1376, 1330}, {1377, 1414, 2003}, {1415, 1487, 1330}, {1488, 1514, 2004}, {1515, 1519, 1330}, {1520, 1522, 2005}, {1523, 1568, 1330}, {1569, 1594, 2006}, {1595, 1600, 1330}, {1601, 1610, 2007}, {1611, 1648, 1330}, {1649, 1719, 2008}, {1720, 1721, 1330}, {1722, 1726, 2009}, {1727, 1727, 1330}, {1728, 1742, 2010}, {1743, 1743, 1330}, {1744, 1747, 2011}, {1748, 1748, 1330}, {1749, 1749, 2012}, {1750, 1764, 1330}, {1765, 1766, 2013}, {1767, 12294, 1330}, {12295, 12295, 2014}, {12296, 12320, 1330}, {12321, 12329, 2015}, {12330, 19967, 1330}, {19968, 40869, 2016}, {40870, 65519, -992}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 65519, -1327}, },
            {{33, 47, -1319}, {48, 57, 2017}, {58, 65519, -1319}, },
            {{33, 47, -1319}, {48, 57, 2018}, {58, 65519, -1319}, },
            {{33, 47, -1319}, {48, 53, 2019}, {54, 57, 1680}, {58, 65519, -1319}, },
            {{33, 65519, -1319}, },
            {{33, 65519, -1323}, },
            {{33, 44, -1303}, {45, 45, 2020}, {46, 46, 2021}, {47, 47, 1316}, {48, 57, 2022}, {58, 64, -1326}, {65, 90, 2023}, {95, 95, 1489}, {97, 122, 2024}, {126, 191, -1303}, {192, 214, 2025}, {215, 215, 1492}, {216, 246, 2026}, {247, 247, 1492}, {248, 255, 2027}, {256, 305, 2028}, {306, 307, 1492}, {308, 318, 2029}, {319, 320, 1492}, {321, 328, 2030}, {329, 329, 1492}, {330, 382, 2031}, {383, 383, 1492}, {384, 451, 2032}, {452, 460, 1492}, {461, 496, 2033}, {497, 499, 1492}, {500, 501, 2034}, {502, 505, 1492}, {506, 535, 2035}, {536, 591, 1492}, {592, 680, 2036}, {681, 698, 1492}, {699, 705, 2037}, {706, 901, 1492}, {902, 902, 2038}, {903, 903, 1492}, {904, 906, 2039}, {907, 907, 1492}, {908, 908, 2040}, {909, 909, 1492}, {910, 929, 2041}, {930, 930, 1492}, {931, 974, 2042}, {975, 975, 1492}, {976, 982, 2043}, {983, 985, 1492}, {986, 986, 2044}, {987, 987, 1492}, {988, 988, 2045}, {989, 989, 1492}, {990, 990, 2046}, {991, 991, 1492}, {992, 992, 2047}, {993, 993, 1492}, {994, 1011, 2048}, {1012, 1024, 1492}, {1025, 1036, 2049}, {1037, 1037, 1492}, {1038, 1103, 2050}, {1104, 1104, 1492}, {1105, 1116, 2051}, {1117, 1117, 1492}, {1118, 1153, 2052}, {1154, 1167, 1492}, {1168, 1220, 2053}, {1221, 1222, 1492}, {1223, 1224, 2054}, {1225, 1226, 1492}, {1227, 1228, 2055}, {1229, 1231, 1492}, {1232, 1259, 2056}, {1260, 1261, 1492}, {1262, 1269, 2057}, {1270, 1271, 1492}, {1272, 1273, 2058}, {1274, 1328, 1492}, {1329, 1366, 2059}, {1367, 1368, 1492}, {1369, 1369, 2060}, {1370, 1376, 1492}, {1377, 1414, 2061}, {1415, 1487, 1492}, {1488, 1514, 2062}, {1515, 1519, 1492}, {1520, 1522, 2063}, {1523, 1568, 1492}, {1569, 1594, 2064}, {1595, 1600, 1492}, {1601, 1610, 2065}, {1611, 1648, 1492}, {1649, 1719, 2066}, {1720, 1721, 1492}, {1722, 1726, 2067}, {1727, 1727, 1492}, {1728, 1742, 2068}, {1743, 1743, 1492}, {1744, 1747, 2069}, {1748, 1748, 1492}, {1749, 1749, 2070}, {1750, 1764, 1492}, {1765, 1766, 2071}, {1767, 12294, 1492}, {12295, 12295, 2072}, {12296, 12320, 1492}, {12321, 12329, 2073}, {12330, 19967, 1492}, {19968, 40869, 2074}, {40870, 65519, -1303}, },
            {{33, 47, -1740}, {48, 57, 2075}, {58, 65519, -1740}, },
            {{33, 47, -1740}, {48, 52, 2076}, {53, 53, 2077}, {54, 57, 2078}, {58, 65519, -1740}, },
            {{33, 47, -1740}, {48, 57, 2078}, {58, 65519, -1740}, },
            {{33, 47, -1326}, {48, 57, 2079}, {58, 65519, -1303}, },
            {{33, 45, -1740}, {46, 46, 2080}, {47, 65519, -1740}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 47, -992}, {48, 57, 2081}, {58, 65519, -1681}, },
            {{48, 57, 2082}, {58, 58, 2083}, {65, 70, 2084}, },
            {{58, 58, 2085}, },
            {{48, 70, -1798}, },
            {{33, 65519, -744}, },
            {{33, 65519, -744}, },
            {{48, 82, -559}, {83, 83, 2086}, {84, 40869, -559}, },
            {{48, 100, -35}, {101, 101, 2087}, {102, 40869, -39}, },
            {{48, 110, -38}, {111, 111, 2088}, {112, 40869, -31}, },
            {{48, 57, 173}, {65, 67, 174}, {68, 68, 2089}, {69, 69, 174}, {70, 70, 2090}, {71, 71, 2091}, {72, 40869, -721}, },
            {{48, 104, -266}, {105, 105, 2092}, {106, 40869, -266}, },
            {{48, 103, -489}, {104, 104, 2093}, {105, 40869, -489}, },
            {{48, 104, -266}, {105, 105, 2094}, {106, 40869, -266}, },
            {{48, 110, -38}, {111, 111, 2095}, {112, 40869, -31}, },
            {{48, 115, -270}, {116, 116, 2096}, {117, 40869, -260}, },
            {{48, 110, -38}, {111, 111, 2097}, {112, 40869, -31}, },
            {{48, 113, -280}, {114, 114, 2098}, {115, 40869, -42}, },
            {{48, 95, -25}, {97, 97, 2099}, {98, 40869, -36}, },
            {{0, 65535, -114}, },
            {{48, 109, -46}, {110, 110, 2100}, {111, 40869, -37}, },
            {{48, 107, -278}, {108, 108, 2101}, {109, 40869, -271}, },
            {{48, 100, -35}, {101, 101, 2102}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 76, -282}, {77, 77, 2103}, {78, 40869, -282}, },
            {{48, 40869, -25}, },
            {{48, 66, -500}, {67, 67, 2104}, {68, 84, 174}, {85, 85, 2105}, {86, 86, 174}, {87, 87, 2106}, {88, 40869, -1142}, },
            {{48, 120, -527}, {121, 121, 2107}, {122, 40869, -44}, },
            {{48, 104, -266}, {105, 105, 2108}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 2109}, {102, 40869, -39}, },
            {{48, 107, -278}, {108, 108, 2110}, {109, 40869, -271}, },
            {{48, 109, -46}, {110, 110, 2111}, {111, 40869, -37}, },
            {{48, 109, -46}, {110, 110, 2112}, {111, 40869, -37}, },
            {{48, 110, -38}, {111, 111, 2113}, {112, 40869, -31}, },
            {{48, 107, -278}, {108, 108, 2114}, {109, 40869, -271}, },
            {{48, 115, -270}, {116, 116, 2115}, {117, 40869, -260}, },
            {{48, 98, -260}, {99, 99, 2116}, {100, 40869, -300}, },
            {{48, 110, -38}, {111, 111, 2117}, {112, 40869, -31}, },
            {{48, 104, -266}, {105, 105, 2118}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 120, -527}, {121, 121, 2119}, {122, 40869, -44}, },
            {{48, 120, -527}, {121, 121, 2120}, {122, 40869, -44}, },
            {{48, 109, -46}, {110, 110, 2121}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 2122}, {102, 40869, -39}, },
            {{48, 117, -631}, {118, 118, 2123}, {119, 40869, -288}, },
            {{48, 115, -270}, {116, 116, 2124}, {117, 40869, -260}, },
            {{48, 101, -33}, {102, 102, 2125}, {103, 40869, -273}, },
            {{48, 113, -280}, {114, 114, 2126}, {115, 40869, -42}, },
            {{48, 109, -46}, {110, 110, 2127}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 2128}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 2129}, {106, 40869, -266}, },
            {{48, 99, -261}, {100, 100, 2130}, {101, 40869, -261}, },
            {{48, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 2131}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 2132}, {111, 40869, -37}, },
            {{48, 95, -25}, {97, 97, 2133}, {98, 40869, -36}, },
            {{48, 109, -46}, {110, 110, 2134}, {111, 40869, -37}, },
            {{48, 104, -266}, {105, 105, 2135}, {106, 40869, -266}, },
            {{48, 110, -38}, {111, 111, 2136}, {112, 40869, -31}, },
            {{48, 104, -266}, {105, 105, 2137}, {106, 40869, -266}, },
            {{48, 110, -38}, {111, 111, 2138}, {112, 40869, -31}, },
            {{48, 115, -270}, {116, 116, 2139}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 2140}, {102, 40869, -39}, },
            {{48, 57, 173}, {65, 72, 174}, {73, 73, 2141}, {74, 90, 174}, {92, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 2142}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 97, 2143}, {98, 40869, -36}, },
            {{48, 113, -280}, {114, 114, 2144}, {115, 40869, -42}, },
            {{48, 100, -35}, {101, 101, 2145}, {102, 40869, -39}, },
            {{48, 109, -46}, {110, 110, 2146}, {111, 40869, -37}, },
            {{48, 111, -264}, {112, 112, 2147}, {113, 40869, -264}, },
            {{48, 104, -266}, {105, 105, 2148}, {106, 40869, -266}, },
            {{48, 98, -260}, {99, 99, 2149}, {100, 40869, -300}, },
            {{48, 110, -38}, {111, 111, 2150}, {112, 117, 177}, {118, 118, 2151}, {119, 40869, -288}, },
            {{48, 95, -25}, {97, 97, 2152}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 2153}, {106, 40869, -266}, },
            {{48, 98, -260}, {99, 99, 2154}, {100, 40869, -300}, },
            {{48, 110, -38}, {111, 111, 2155}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 2156}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 2157}, {98, 40869, -36}, },
            {{48, 110, -38}, {111, 111, 2158}, {112, 40869, -31}, },
            {{33, 65519, -901}, },
            {{33, 65519, -901}, },
            {{48, 57, 2159}, {65, 70, 2160}, },
            {{48, 70, -1883}, },
            {{33, 65519, -1306}, },
            {{33, 65519, -1306}, },
            {{48, 57, 2161}, {65, 70, 2162}, },
            {{48, 70, -1887}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{48, 57, 2163}, {65, 70, 2164}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 44, -992}, {45, 45, 2165}, {46, 46, 2166}, {47, 47, 1316}, {48, 57, 2167}, {58, 64, -992}, {65, 90, 2168}, {95, 95, 1327}, {97, 122, 2169}, {126, 191, -992}, {192, 214, 2170}, {215, 215, 1330}, {216, 246, 2171}, {247, 247, 1330}, {248, 255, 2172}, {256, 305, 2173}, {306, 307, 1330}, {308, 318, 2174}, {319, 320, 1330}, {321, 328, 2175}, {329, 329, 1330}, {330, 382, 2176}, {383, 383, 1330}, {384, 451, 2177}, {452, 460, 1330}, {461, 496, 2178}, {497, 499, 1330}, {500, 501, 2179}, {502, 505, 1330}, {506, 535, 2180}, {536, 591, 1330}, {592, 680, 2181}, {681, 698, 1330}, {699, 705, 2182}, {706, 901, 1330}, {902, 902, 2183}, {903, 903, 1330}, {904, 906, 2184}, {907, 907, 1330}, {908, 908, 2185}, {909, 909, 1330}, {910, 929, 2186}, {930, 930, 1330}, {931, 974, 2187}, {975, 975, 1330}, {976, 982, 2188}, {983, 985, 1330}, {986, 986, 2189}, {987, 987, 1330}, {988, 988, 2190}, {989, 989, 1330}, {990, 990, 2191}, {991, 991, 1330}, {992, 992, 2192}, {993, 993, 1330}, {994, 1011, 2193}, {1012, 1024, 1330}, {1025, 1036, 2194}, {1037, 1037, 1330}, {1038, 1103, 2195}, {1104, 1104, 1330}, {1105, 1116, 2196}, {1117, 1117, 1330}, {1118, 1153, 2197}, {1154, 1167, 1330}, {1168, 1220, 2198}, {1221, 1222, 1330}, {1223, 1224, 2199}, {1225, 1226, 1330}, {1227, 1228, 2200}, {1229, 1231, 1330}, {1232, 1259, 2201}, {1260, 1261, 1330}, {1262, 1269, 2202}, {1270, 1271, 1330}, {1272, 1273, 2203}, {1274, 1328, 1330}, {1329, 1366, 2204}, {1367, 1368, 1330}, {1369, 1369, 2205}, {1370, 1376, 1330}, {1377, 1414, 2206}, {1415, 1487, 1330}, {1488, 1514, 2207}, {1515, 1519, 1330}, {1520, 1522, 2208}, {1523, 1568, 1330}, {1569, 1594, 2209}, {1595, 1600, 1330}, {1601, 1610, 2210}, {1611, 1648, 1330}, {1649, 1719, 2211}, {1720, 1721, 1330}, {1722, 1726, 2212}, {1727, 1727, 1330}, {1728, 1742, 2213}, {1743, 1743, 1330}, {1744, 1747, 2214}, {1748, 1748, 1330}, {1749, 1749, 2215}, {1750, 1764, 1330}, {1765, 1766, 2216}, {1767, 12294, 1330}, {12295, 12295, 2217}, {12296, 12320, 1330}, {12321, 12329, 2218}, {12330, 19967, 1330}, {19968, 40869, 2219}, {40870, 65519, -992}, },
            {{33, 47, -1963}, {48, 57, 2220}, {58, 65519, -1963}, },
            {{33, 47, -1963}, {48, 52, 2221}, {53, 53, 2222}, {54, 57, 2223}, {58, 65519, -1963}, },
            {{33, 47, -1963}, {48, 57, 2223}, {58, 65519, -1963}, },
            {{33, 45, -1963}, {46, 47, -1327}, {48, 65519, -1963}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1319}, },
            {{33, 65519, -1319}, },
            {{33, 65519, -1319}, },
            {{33, 45, -1740}, {46, 47, -1303}, {48, 57, 2022}, {58, 64, -1303}, {65, 65519, -1740}, },
            {{33, 47, -1326}, {48, 48, 2224}, {49, 49, 2225}, {50, 50, 2226}, {51, 57, 2227}, {58, 64, -1326}, {65, 90, 2228}, {95, 95, 1489}, {97, 122, 2229}, {126, 191, -1303}, {192, 214, 2230}, {215, 215, 1492}, {216, 246, 2231}, {247, 247, 1492}, {248, 255, 2232}, {256, 305, 2233}, {306, 307, 1492}, {308, 318, 2234}, {319, 320, 1492}, {321, 328, 2235}, {329, 329, 1492}, {330, 382, 2236}, {383, 383, 1492}, {384, 451, 2237}, {452, 460, 1492}, {461, 496, 2238}, {497, 499, 1492}, {500, 501, 2239}, {502, 505, 1492}, {506, 535, 2240}, {536, 591, 1492}, {592, 680, 2241}, {681, 698, 1492}, {699, 705, 2242}, {706, 901, 1492}, {902, 902, 2243}, {903, 903, 1492}, {904, 906, 2244}, {907, 907, 1492}, {908, 908, 2245}, {909, 909, 1492}, {910, 929, 2246}, {930, 930, 1492}, {931, 974, 2247}, {975, 975, 1492}, {976, 982, 2248}, {983, 985, 1492}, {986, 986, 2249}, {987, 987, 1492}, {988, 988, 2250}, {989, 989, 1492}, {990, 990, 2251}, {991, 991, 1492}, {992, 992, 2252}, {993, 993, 1492}, {994, 1011, 2253}, {1012, 1024, 1492}, {1025, 1036, 2254}, {1037, 1037, 1492}, {1038, 1103, 2255}, {1104, 1104, 1492}, {1105, 1116, 2256}, {1117, 1117, 1492}, {1118, 1153, 2257}, {1154, 1167, 1492}, {1168, 1220, 2258}, {1221, 1222, 1492}, {1223, 1224, 2259}, {1225, 1226, 1492}, {1227, 1228, 2260}, {1229, 1231, 1492}, {1232, 1259, 2261}, {1260, 1261, 1492}, {1262, 1269, 2262}, {1270, 1271, 1492}, {1272, 1273, 2263}, {1274, 1328, 1492}, {1329, 1366, 2264}, {1367, 1368, 1492}, {1369, 1369, 2265}, {1370, 1376, 1492}, {1377, 1414, 2266}, {1415, 1487, 1492}, {1488, 1514, 2267}, {1515, 1519, 1492}, {1520, 1522, 2268}, {1523, 1568, 1492}, {1569, 1594, 2269}, {1595, 1600, 1492}, {1601, 1610, 2270}, {1611, 1648, 1492}, {1649, 1719, 2271}, {1720, 1721, 1492}, {1722, 1726, 2272}, {1727, 1727, 1492}, {1728, 1742, 2273}, {1743, 1743, 1492}, {1744, 1747, 2274}, {1748, 1748, 1492}, {1749, 1749, 2275}, {1750, 1764, 1492}, {1765, 1766, 2276}, {1767, 12294, 1492}, {12295, 12295, 2277}, {12296, 12320, 1492}, {12321, 12329, 2278}, {12330, 19967, 1492}, {19968, 40869, 2279}, {40870, 65519, -1303}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 65519, -1745}, },
            {{33, 47, -1740}, {48, 57, 2280}, {58, 65519, -1740}, },
            {{33, 47, -1740}, {48, 57, 2281}, {58, 65519, -1740}, },
            {{33, 47, -1740}, {48, 53, 2282}, {54, 57, 2022}, {58, 65519, -1740}, },
            {{33, 65519, -1740}, },
            {{33, 65519, -1744}, },
            {{33, 47, -1326}, {48, 57, 2283}, {58, 65519, -2023}, },
            {{33, 65519, -1967}, },
            {{48, 57, 2284}, {58, 58, 2083}, {65, 70, 2285}, },
            {{48, 57, 1796}, {58, 58, 2085}, {65, 70, 1798}, },
            {{48, 70, -2084}, },
            {{48, 48, 2286}, {49, 49, 2287}, {50, 50, 2288}, {51, 57, 2289}, {65, 70, 2290}, {93, 93, 2291}, },
            {{48, 115, -270}, {116, 116, 2292}, {117, 40869, -260}, },
            {{48, 109, -46}, {110, 110, 2293}, {111, 40869, -37}, },
            {{48, 95, -25}, {97, 97, 2294}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 2295}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 2296}, {106, 40869, -266}, },
            {{48, 113, -280}, {114, 114, 2297}, {115, 40869, -42}, },
            {{48, 110, -38}, {111, 111, 2298}, {112, 40869, -31}, },
            {{48, 110, -38}, {111, 111, 2299}, {112, 40869, -31}, },
            {{48, 95, -25}, {97, 97, 2300}, {98, 40869, -36}, },
            {{48, 109, -46}, {110, 110, 2301}, {111, 40869, -37}, },
            {{48, 120, -527}, {121, 121, 2302}, {122, 40869, -44}, },
            {{48, 109, -46}, {110, 110, 2303}, {111, 40869, -37}, },
            {{48, 106, -563}, {107, 107, 2304}, {108, 40869, -506}, },
            {{48, 111, -264}, {112, 112, 2305}, {113, 40869, -264}, },
            {{48, 115, -270}, {116, 116, 2306}, {117, 40869, -260}, },
            {{48, 110, -38}, {111, 111, 2307}, {112, 40869, -31}, },
            {{48, 99, -261}, {100, 100, 2308}, {101, 40869, -261}, },
            {{48, 100, -35}, {101, 101, 2309}, {102, 40869, -39}, },
            {{48, 103, -489}, {104, 104, 2310}, {105, 40869, -489}, },
            {{48, 109, -46}, {110, 110, 2311}, {111, 40869, -37}, },
            {{48, 103, -489}, {104, 104, 2312}, {105, 40869, -489}, },
            {{48, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 2313}, {109, 40869, -271}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 98, -260}, {99, 99, 2314}, {100, 40869, -300}, },
            {{48, 115, -270}, {116, 116, 2315}, {117, 40869, -260}, },
            {{48, 109, -46}, {110, 110, 2316}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 2317}, {117, 40869, -260}, },
            {{48, 113, -280}, {114, 114, 2318}, {115, 40869, -42}, },
            {{48, 107, -278}, {108, 108, 2319}, {109, 40869, -271}, },
            {{48, 40869, -25}, },
            {{48, 111, -264}, {112, 112, 2320}, {113, 40869, -264}, },
            {{48, 115, -270}, {116, 116, 2321}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 2322}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 2323}, {106, 114, 177}, {115, 115, 2324}, {116, 40869, -46}, },
            {{48, 40869, -25}, },
            {{48, 117, -631}, {118, 118, 2325}, {119, 40869, -288}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 2326}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 2327}, {102, 40869, -39}, },
            {{48, 113, -280}, {114, 114, 2328}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 2329}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 2330}, {111, 40869, -37}, },
            {{48, 113, -280}, {114, 114, 2331}, {115, 40869, -42}, },
            {{48, 115, -270}, {116, 116, 2332}, {117, 40869, -260}, },
            {{48, 113, -280}, {114, 114, 2333}, {115, 40869, -42}, },
            {{48, 104, -266}, {105, 105, 2334}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 2335}, {111, 40869, -37}, },
            {{48, 57, 173}, {65, 65, 2336}, {66, 40869, -1418}, },
            {{48, 107, -278}, {108, 108, 2337}, {109, 40869, -271}, },
            {{48, 104, -266}, {105, 105, 2338}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 2339}, {98, 40869, -36}, },
            {{48, 115, -270}, {116, 116, 2340}, {117, 40869, -260}, },
            {{48, 110, -38}, {111, 111, 2341}, {112, 40869, -31}, },
            {{48, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 2342}, {111, 40869, -37}, },
            {{48, 100, -35}, {101, 101, 2343}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 2344}, {117, 40869, -260}, },
            {{48, 98, -260}, {99, 99, 2345}, {100, 40869, -300}, },
            {{48, 100, -35}, {101, 101, 2346}, {102, 40869, -39}, },
            {{48, 113, -280}, {114, 114, 2347}, {115, 40869, -42}, },
            {{48, 99, -261}, {100, 100, 2348}, {101, 40869, -261}, },
            {{48, 109, -46}, {110, 110, 2349}, {111, 40869, -37}, },
            {{48, 113, -280}, {114, 114, 2350}, {115, 40869, -42}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1303}, },
            {{33, 65519, -1318}, },
            {{33, 65519, -1318}, },
            {{48, 57, 2351}, {65, 70, 2352}, },
            {{48, 70, -2165}, },
            {{33, 45, -1963}, {46, 47, -1306}, {48, 57, 2167}, {58, 64, -1306}, {65, 65519, -1963}, },
            {{33, 47, -992}, {48, 48, 2353}, {49, 49, 2354}, {50, 50, 2355}, {51, 57, 2356}, {58, 65519, -1681}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 47, -1963}, {48, 57, 2357}, {58, 65519, -1963}, },
            {{33, 47, -1963}, {48, 57, 2358}, {58, 65519, -1963}, },
            {{33, 47, -1963}, {48, 53, 2359}, {54, 57, 2167}, {58, 65519, -1963}, },
            {{33, 65519, -1963}, },
            {{33, 44, -1303}, {45, 45, 2360}, {46, 46, 2361}, {47, 47, 1316}, {48, 57, 2362}, {58, 64, -1326}, {65, 90, 2363}, {95, 95, 1489}, {97, 122, 2364}, {126, 191, -1303}, {192, 214, 2365}, {215, 215, 1492}, {216, 246, 2366}, {247, 247, 1492}, {248, 255, 2367}, {256, 305, 2368}, {306, 307, 1492}, {308, 318, 2369}, {319, 320, 1492}, {321, 328, 2370}, {329, 329, 1492}, {330, 382, 2371}, {383, 383, 1492}, {384, 451, 2372}, {452, 460, 1492}, {461, 496, 2373}, {497, 499, 1492}, {500, 501, 2374}, {502, 505, 1492}, {506, 535, 2375}, {536, 591, 1492}, {592, 680, 2376}, {681, 698, 1492}, {699, 705, 2377}, {706, 901, 1492}, {902, 902, 2378}, {903, 903, 1492}, {904, 906, 2379}, {907, 907, 1492}, {908, 908, 2380}, {909, 909, 1492}, {910, 929, 2381}, {930, 930, 1492}, {931, 974, 2382}, {975, 975, 1492}, {976, 982, 2383}, {983, 985, 1492}, {986, 986, 2384}, {987, 987, 1492}, {988, 988, 2385}, {989, 989, 1492}, {990, 990, 2386}, {991, 991, 1492}, {992, 992, 2387}, {993, 993, 1492}, {994, 1011, 2388}, {1012, 1024, 1492}, {1025, 1036, 2389}, {1037, 1037, 1492}, {1038, 1103, 2390}, {1104, 1104, 1492}, {1105, 1116, 2391}, {1117, 1117, 1492}, {1118, 1153, 2392}, {1154, 1167, 1492}, {1168, 1220, 2393}, {1221, 1222, 1492}, {1223, 1224, 2394}, {1225, 1226, 1492}, {1227, 1228, 2395}, {1229, 1231, 1492}, {1232, 1259, 2396}, {1260, 1261, 1492}, {1262, 1269, 2397}, {1270, 1271, 1492}, {1272, 1273, 2398}, {1274, 1328, 1492}, {1329, 1366, 2399}, {1367, 1368, 1492}, {1369, 1369, 2400}, {1370, 1376, 1492}, {1377, 1414, 2401}, {1415, 1487, 1492}, {1488, 1514, 2402}, {1515, 1519, 1492}, {1520, 1522, 2403}, {1523, 1568, 1492}, {1569, 1594, 2404}, {1595, 1600, 1492}, {1601, 1610, 2405}, {1611, 1648, 1492}, {1649, 1719, 2406}, {1720, 1721, 1492}, {1722, 1726, 2407}, {1727, 1727, 1492}, {1728, 1742, 2408}, {1743, 1743, 1492}, {1744, 1747, 2409}, {1748, 1748, 1492}, {1749, 1749, 2410}, {1750, 1764, 1492}, {1765, 1766, 2411}, {1767, 12294, 1492}, {12295, 12295, 2412}, {12296, 12320, 1492}, {12321, 12329, 2413}, {12330, 19967, 1492}, {19968, 40869, 2414}, {40870, 65519, -1303}, },
            {{33, 47, -2226}, {48, 57, 2415}, {58, 65519, -2226}, },
            {{33, 47, -2226}, {48, 52, 2416}, {53, 53, 2417}, {54, 57, 2418}, {58, 65519, -2226}, },
            {{33, 47, -2226}, {48, 57, 2418}, {58, 65519, -2226}, },
            {{33, 45, -2226}, {46, 47, -1745}, {48, 65519, -2226}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -1740}, },
            {{33, 65519, -1740}, },
            {{33, 65519, -1740}, },
            {{33, 65519, -2230}, },
            {{48, 57, 2419}, {58, 58, 2083}, {65, 70, 2420}, },
            {{48, 70, -2286}, },
            {{46, 46, 2421}, {48, 57, 2422}, {58, 58, 2423}, {65, 70, 2424}, {93, 93, 2291}, },
            {{46, 46, 2421}, {48, 57, 2425}, {58, 93, -2288}, },
            {{46, 46, 2421}, {48, 52, 2426}, {53, 53, 2427}, {54, 57, 2428}, {58, 93, -2288}, },
            {{46, 46, 2421}, {48, 57, 2428}, {58, 93, -2288}, },
            {{48, 93, -2288}, },
            {{34, 35, -575}, {47, 47, 2429}, {58, 58, 2430}, {63, 63, 742}, },
            {{48, 95, -25}, {97, 97, 2431}, {98, 40869, -36}, },
            {{48, 115, -270}, {116, 116, 2432}, {117, 40869, -260}, },
            {{48, 107, -278}, {108, 108, 2433}, {109, 40869, -271}, },
            {{48, 95, -25}, {97, 97, 2434}, {98, 40869, -36}, },
            {{48, 109, -46}, {110, 110, 2435}, {111, 40869, -37}, },
            {{48, 110, -38}, {111, 111, 2436}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 2437}, {111, 40869, -37}, },
            {{48, 113, -280}, {114, 114, 2438}, {115, 40869, -42}, },
            {{48, 115, -270}, {116, 116, 2439}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 98, -260}, {99, 99, 2440}, {100, 40869, -300}, },
            {{48, 101, -33}, {102, 102, 2441}, {103, 40869, -273}, },
            {{48, 103, -489}, {104, 104, 2442}, {105, 40869, -489}, },
            {{48, 40869, -25}, },
            {{48, 118, -505}, {119, 119, 2443}, {120, 40869, -47}, },
            {{48, 40869, -25}, },
            {{48, 99, -261}, {100, 100, 2444}, {101, 40869, -261}, },
            {{48, 110, -38}, {111, 111, 2445}, {112, 40869, -31}, },
            {{48, 115, -270}, {116, 116, 2446}, {117, 40869, -260}, },
            {{48, 104, -266}, {105, 105, 2447}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 2448}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 2449}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 2450}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 2451}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 2452}, {102, 40869, -39}, },
            {{48, 110, -38}, {111, 111, 2453}, {112, 40869, -31}, },
            {{48, 99, -261}, {100, 100, 2454}, {101, 40869, -261}, },
            {{48, 97, -29}, {98, 98, 2455}, {99, 40869, -314}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 2456}, {106, 40869, -266}, },
            {{48, 109, -46}, {110, 110, 2457}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 2458}, {106, 40869, -266}, },
            {{48, 106, -563}, {107, 107, 2459}, {108, 40869, -506}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 2460}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 2461}, {112, 40869, -31}, },
            {{48, 114, -259}, {115, 115, 2462}, {116, 40869, -46}, },
            {{48, 98, -260}, {99, 99, 2463}, {100, 40869, -300}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 2464}, {98, 40869, -36}, },
            {{48, 115, -270}, {116, 116, 2465}, {117, 40869, -260}, },
            {{48, 78, -1182}, {79, 79, 2466}, {80, 40869, -1182}, },
            {{48, 109, -46}, {110, 110, 2467}, {111, 40869, -37}, },
            {{48, 57, 173}, {65, 81, 174}, {82, 82, 2468}, {83, 40869, -549}, },
            {{48, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 2469}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 2470}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 2471}, {106, 40869, -266}, },
            {{48, 115, -270}, {116, 116, 2472}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{33, 65519, -1617}, },
            {{33, 65519, -1617}, },
            {{33, 45, -1963}, {46, 46, 2473}, {47, 65519, -1963}, },
            {{33, 47, -2355}, {48, 57, 2474}, {58, 65519, -1963}, },
            {{33, 47, -2355}, {48, 52, 2475}, {53, 53, 2476}, {54, 57, 2477}, {58, 65519, -1963}, },
            {{33, 47, -2355}, {48, 57, 2477}, {58, 65519, -1963}, },
            {{33, 65519, -1963}, },
            {{33, 65519, -1963}, },
            {{33, 65519, -1963}, },
            {{33, 45, -2226}, {46, 47, -1303}, {48, 57, 2362}, {58, 64, -1303}, {65, 65519, -2226}, },
            {{33, 47, -1326}, {48, 48, 2478}, {49, 49, 2479}, {50, 50, 2480}, {51, 57, 2481}, {58, 65519, -2023}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 47, -2226}, {48, 57, 2482}, {58, 65519, -2226}, },
            {{33, 47, -2226}, {48, 57, 2483}, {58, 65519, -2226}, },
            {{33, 47, -2226}, {48, 53, 2484}, {54, 57, 2362}, {58, 65519, -2226}, },
            {{33, 65519, -2226}, },
            {{58, 58, 2083}, },
            {{58, 58, 2083}, },
            {{48, 48, 2485}, {49, 49, 2486}, {50, 50, 2487}, {51, 57, 2488}, },
            {{48, 57, 2489}, {58, 58, 2423}, {65, 70, 2490}, {93, 93, 2291}, },
            {{48, 48, 2491}, {49, 49, 2492}, {50, 50, 2493}, {51, 57, 2494}, {65, 70, 2495}, },
            {{48, 93, -2424}, },
            {{46, 46, 2421}, {48, 57, 2496}, {58, 93, -2424}, },
            {{46, 46, 2421}, {48, 57, 2497}, {58, 93, -2424}, },
            {{46, 46, 2421}, {48, 53, 2498}, {54, 57, 2489}, {58, 93, -2424}, },
            {{46, 46, 2421}, {48, 93, -2424}, },
            {{33, 33, 2499}, {34, 35, -575}, {36, 36, 2500}, {37, 37, 2501}, {38, 38, 2502}, {39, 39, 2503}, {40, 40, 2504}, {41, 41, 2505}, {42, 42, 2506}, {43, 43, 2507}, {44, 44, 2508}, {45, 45, 2509}, {46, 46, 2510}, {47, 47, 2511}, {48, 57, 2512}, {58, 58, 2513}, {59, 59, 2514}, {61, 61, 2515}, {63, 63, 742}, {64, 64, 2516}, {65, 90, 2517}, {95, 95, 2518}, {97, 122, 2519}, {126, 126, 2520}, {160, 191, 2521}, {192, 214, 2522}, {215, 215, 2521}, {216, 246, 2523}, {247, 247, 2521}, {248, 255, 2524}, {256, 305, 2525}, {306, 307, 2521}, {308, 318, 2526}, {319, 320, 2521}, {321, 328, 2527}, {329, 329, 2521}, {330, 382, 2528}, {383, 383, 2521}, {384, 451, 2529}, {452, 460, 2521}, {461, 496, 2530}, {497, 499, 2521}, {500, 501, 2531}, {502, 505, 2521}, {506, 535, 2532}, {536, 591, 2521}, {592, 680, 2533}, {681, 698, 2521}, {699, 705, 2534}, {706, 901, 2521}, {902, 902, 2535}, {903, 903, 2521}, {904, 906, 2536}, {907, 907, 2521}, {908, 908, 2537}, {909, 909, 2521}, {910, 929, 2538}, {930, 930, 2521}, {931, 974, 2539}, {975, 975, 2521}, {976, 982, 2540}, {983, 985, 2521}, {986, 986, 2541}, {987, 987, 2521}, {988, 988, 2542}, {989, 989, 2521}, {990, 990, 2543}, {991, 991, 2521}, {992, 992, 2544}, {993, 993, 2521}, {994, 1011, 2545}, {1012, 1024, 2521}, {1025, 1036, 2546}, {1037, 1037, 2521}, {1038, 1103, 2547}, {1104, 1104, 2521}, {1105, 1116, 2548}, {1117, 1117, 2521}, {1118, 1153, 2549}, {1154, 1167, 2521}, {1168, 1220, 2550}, {1221, 1222, 2521}, {1223, 1224, 2551}, {1225, 1226, 2521}, {1227, 1228, 2552}, {1229, 1231, 2521}, {1232, 1259, 2553}, {1260, 1261, 2521}, {1262, 1269, 2554}, {1270, 1271, 2521}, {1272, 1273, 2555}, {1274, 1328, 2521}, {1329, 1366, 2556}, {1367, 1368, 2521}, {1369, 1369, 2557}, {1370, 1376, 2521}, {1377, 1414, 2558}, {1415, 1487, 2521}, {1488, 1514, 2559}, {1515, 1519, 2521}, {1520, 1522, 2560}, {1523, 1568, 2521}, {1569, 1594, 2561}, {1595, 1600, 2521}, {1601, 1610, 2562}, {1611, 1648, 2521}, {1649, 1719, 2563}, {1720, 1721, 2521}, {1722, 1726, 2564}, {1727, 1727, 2521}, {1728, 1742, 2565}, {1743, 1743, 2521}, {1744, 1747, 2566}, {1748, 1748, 2521}, {1749, 1749, 2567}, {1750, 1764, 2521}, {1765, 1766, 2568}, {1767, 12294, 2521}, {12295, 12295, 2569}, {12296, 12320, 2521}, {12321, 12329, 2570}, {12330, 19967, 2521}, {19968, 40869, 2571}, {40870, 55295, 2521}, {63744, 64975, 2572}, {65008, 65519, 2573}, },
            {{34, 47, -2293}, {48, 57, 2574}, {63, 63, 742}, },
            {{48, 115, -270}, {116, 116, 2575}, {117, 40869, -260}, },
            {{48, 57, 173}, {65, 65, 2576}, {66, 40869, -1418}, },
            {{48, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 2577}, {104, 40869, -262}, },
            {{48, 95, -25}, {97, 97, 2578}, {98, 40869, -36}, },
            {{48, 116, -276}, {117, 117, 2579}, {118, 40869, -35}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 2580}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 2581}, {106, 40869, -266}, },
            {{48, 100, -35}, {101, 101, 2582}, {102, 40869, -39}, },
            {{48, 107, -278}, {108, 108, 2583}, {109, 40869, -271}, },
            {{48, 120, -527}, {121, 121, 2584}, {122, 40869, -44}, },
            {{48, 40869, -25}, },
            {{48, 104, -266}, {105, 105, 2585}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 2586}, {106, 40869, -266}, },
            {{48, 104, -266}, {105, 105, 2587}, {106, 40869, -266}, },
            {{48, 107, -278}, {108, 108, 2588}, {109, 40869, -271}, },
            {{48, 115, -270}, {116, 116, 2589}, {117, 40869, -260}, },
            {{48, 104, -266}, {105, 105, 2590}, {106, 40869, -266}, },
            {{48, 110, -38}, {111, 111, 2591}, {112, 40869, -31}, },
            {{48, 115, -270}, {116, 116, 2592}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 2593}, {109, 40869, -271}, },
            {{48, 40869, -25}, },
            {{48, 107, -278}, {108, 108, 2594}, {109, 40869, -271}, },
            {{48, 98, -260}, {99, 99, 2595}, {100, 40869, -300}, },
            {{48, 95, -25}, {97, 97, 2596}, {98, 40869, -36}, },
            {{48, 110, -38}, {111, 111, 2597}, {112, 40869, -31}, },
            {{48, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 2598}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 2599}, {111, 40869, -37}, },
            {{48, 115, -270}, {116, 116, 2600}, {117, 40869, -260}, },
            {{48, 115, -270}, {116, 116, 2601}, {117, 40869, -260}, },
            {{48, 97, -29}, {98, 98, 2602}, {99, 40869, -314}, },
            {{48, 116, -276}, {117, 117, 2603}, {118, 40869, -35}, },
            {{48, 101, -33}, {102, 102, 2604}, {103, 40869, -273}, },
            {{48, 78, -1182}, {79, 79, 2605}, {80, 40869, -1182}, },
            {{48, 116, -276}, {117, 117, 2606}, {118, 40869, -35}, },
            {{48, 113, -280}, {114, 114, 2607}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 2608}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{33, 47, -992}, {48, 48, 2609}, {49, 49, 2610}, {50, 50, 2611}, {51, 57, 2612}, {58, 65519, -1681}, },
            {{33, 47, -2355}, {48, 57, 2613}, {58, 65519, -1963}, },
            {{33, 47, -2355}, {48, 57, 2614}, {58, 65519, -1963}, },
            {{33, 47, -2355}, {48, 53, 2615}, {54, 65519, -2224}, },
            {{33, 65519, -2355}, },
            {{33, 45, -2226}, {46, 46, 2616}, {47, 65519, -2226}, },
            {{33, 47, -2480}, {48, 57, 2617}, {58, 65519, -2226}, },
            {{33, 47, -2480}, {48, 52, 2618}, {53, 53, 2619}, {54, 57, 2620}, {58, 65519, -2226}, },
            {{33, 47, -2480}, {48, 57, 2620}, {58, 65519, -2226}, },
            {{33, 65519, -2226}, },
            {{33, 65519, -2226}, },
            {{33, 65519, -2226}, },
            {{46, 46, 2621}, },
            {{46, 46, 2621}, {48, 57, 2622}, },
            {{46, 46, 2621}, {48, 52, 2623}, {53, 53, 2624}, {54, 57, 2625}, },
            {{46, 46, 2621}, {48, 57, 2625}, },
            {{48, 57, 2626}, {58, 58, 2423}, {65, 70, 2627}, {93, 93, 2291}, },
            {{48, 93, -2491}, },
            {{46, 46, 2421}, {48, 57, 2628}, {58, 58, 2423}, {65, 70, 2629}, {93, 93, 2291}, },
            {{46, 46, 2421}, {48, 57, 2630}, {58, 93, -2493}, },
            {{46, 46, 2421}, {48, 52, 2631}, {53, 53, 2632}, {54, 57, 2633}, {58, 93, -2493}, },
            {{46, 46, 2421}, {48, 57, 2633}, {58, 93, -2493}, },
            {{48, 93, -2493}, },
            {{46, 46, 2421}, {48, 93, -2491}, },
            {{46, 93, -2498}, },
            {{46, 93, -2498}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{48, 57, 2634}, {65, 70, 2635}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 33, 2636}, {34, 35, -575}, {36, 36, 2637}, {37, 37, 2638}, {38, 38, 2639}, {39, 39, 2640}, {40, 40, 2641}, {41, 41, 2642}, {42, 42, 2643}, {43, 43, 2644}, {44, 44, 2645}, {45, 45, 2646}, {46, 46, 2647}, {47, 47, 2511}, {48, 57, 2648}, {58, 58, 2649}, {59, 59, 2650}, {61, 61, 2651}, {63, 63, 742}, {64, 64, 2652}, {65, 90, 2653}, {95, 95, 2654}, {97, 122, 2655}, {126, 126, 2656}, {160, 191, 2657}, {192, 214, 2658}, {215, 215, 2657}, {216, 246, 2659}, {247, 247, 2657}, {248, 255, 2660}, {256, 305, 2661}, {306, 307, 2657}, {308, 318, 2662}, {319, 320, 2657}, {321, 328, 2663}, {329, 329, 2657}, {330, 382, 2664}, {383, 383, 2657}, {384, 451, 2665}, {452, 460, 2657}, {461, 496, 2666}, {497, 499, 2657}, {500, 501, 2667}, {502, 505, 2657}, {506, 535, 2668}, {536, 591, 2657}, {592, 680, 2669}, {681, 698, 2657}, {699, 705, 2670}, {706, 901, 2657}, {902, 902, 2671}, {903, 903, 2657}, {904, 906, 2672}, {907, 907, 2657}, {908, 908, 2673}, {909, 909, 2657}, {910, 929, 2674}, {930, 930, 2657}, {931, 974, 2675}, {975, 975, 2657}, {976, 982, 2676}, {983, 985, 2657}, {986, 986, 2677}, {987, 987, 2657}, {988, 988, 2678}, {989, 989, 2657}, {990, 990, 2679}, {991, 991, 2657}, {992, 992, 2680}, {993, 993, 2657}, {994, 1011, 2681}, {1012, 1024, 2657}, {1025, 1036, 2682}, {1037, 1037, 2657}, {1038, 1103, 2683}, {1104, 1104, 2657}, {1105, 1116, 2684}, {1117, 1117, 2657}, {1118, 1153, 2685}, {1154, 1167, 2657}, {1168, 1220, 2686}, {1221, 1222, 2657}, {1223, 1224, 2687}, {1225, 1226, 2657}, {1227, 1228, 2688}, {1229, 1231, 2657}, {1232, 1259, 2689}, {1260, 1261, 2657}, {1262, 1269, 2690}, {1270, 1271, 2657}, {1272, 1273, 2691}, {1274, 1328, 2657}, {1329, 1366, 2692}, {1367, 1368, 2657}, {1369, 1369, 2693}, {1370, 1376, 2657}, {1377, 1414, 2694}, {1415, 1487, 2657}, {1488, 1514, 2695}, {1515, 1519, 2657}, {1520, 1522, 2696}, {1523, 1568, 2657}, {1569, 1594, 2697}, {1595, 1600, 2657}, {1601, 1610, 2698}, {1611, 1648, 2657}, {1649, 1719, 2699}, {1720, 1721, 2657}, {1722, 1726, 2700}, {1727, 1727, 2657}, {1728, 1742, 2701}, {1743, 1743, 2657}, {1744, 1747, 2702}, {1748, 1748, 2657}, {1749, 1749, 2703}, {1750, 1764, 2657}, {1765, 1766, 2704}, {1767, 12294, 2657}, {12295, 12295, 2705}, {12296, 12320, 2657}, {12321, 12329, 2706}, {12330, 19967, 2657}, {19968, 40869, 2707}, {40870, 55295, 2657}, {63744, 64975, 2708}, {65008, 65519, 2709}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{34, 63, -2432}, },
            {{48, 100, -35}, {101, 101, 2710}, {102, 40869, -39}, },
            {{48, 98, -260}, {99, 99, 2711}, {100, 40869, -300}, },
            {{48, 113, -280}, {114, 114, 2712}, {115, 40869, -42}, },
            {{48, 107, -278}, {108, 108, 2713}, {109, 40869, -271}, },
            {{48, 111, -264}, {112, 112, 2714}, {113, 40869, -264}, },
            {{48, 110, -38}, {111, 111, 2715}, {112, 40869, -31}, },
            {{48, 110, -38}, {111, 111, 2716}, {112, 40869, -31}, },
            {{48, 111, -264}, {112, 112, 2717}, {113, 40869, -264}, },
            {{48, 110, -38}, {111, 111, 2718}, {112, 40869, -31}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 2719}, {98, 40869, -36}, },
            {{48, 98, -260}, {99, 99, 2720}, {100, 40869, -300}, },
            {{48, 107, -278}, {108, 108, 2721}, {109, 40869, -271}, },
            {{48, 100, -35}, {101, 101, 2722}, {102, 40869, -39}, },
            {{48, 120, -527}, {121, 121, 2723}, {122, 40869, -44}, },
            {{48, 110, -38}, {111, 111, 2724}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 2725}, {111, 40869, -37}, },
            {{48, 120, -527}, {121, 121, 2726}, {122, 40869, -44}, },
            {{48, 110, -38}, {111, 111, 2727}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 2728}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 2729}, {102, 40869, -39}, },
            {{48, 107, -278}, {108, 108, 2730}, {109, 40869, -271}, },
            {{48, 109, -46}, {110, 110, 2731}, {111, 40869, -37}, },
            {{48, 109, -46}, {110, 110, 2732}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 2733}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 2734}, {106, 40869, -266}, },
            {{48, 107, -278}, {108, 108, 2735}, {109, 40869, -271}, },
            {{48, 113, -280}, {114, 114, 2736}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 101, -33}, {102, 102, 2737}, {103, 40869, -273}, },
            {{48, 107, -278}, {108, 108, 2738}, {109, 40869, -271}, },
            {{48, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 2739}, {104, 40869, -262}, },
            {{33, 65519, -1967}, },
            {{33, 47, -1967}, {48, 57, 2740}, {58, 65519, -1963}, },
            {{33, 47, -1967}, {48, 52, 2741}, {53, 53, 2742}, {54, 57, 2743}, {58, 65519, -1963}, },
            {{33, 47, -1967}, {48, 57, 2743}, {58, 65519, -1963}, },
            {{33, 65519, -2355}, },
            {{33, 65519, -2355}, },
            {{33, 65519, -2355}, },
            {{33, 47, -1326}, {48, 48, 2744}, {49, 49, 2745}, {50, 50, 2746}, {51, 57, 2747}, {58, 65519, -2023}, },
            {{33, 47, -2480}, {48, 57, 2748}, {58, 65519, -2226}, },
            {{33, 47, -2480}, {48, 57, 2749}, {58, 65519, -2226}, },
            {{33, 47, -2480}, {48, 53, 2750}, {54, 65519, -2419}, },
            {{33, 65519, -2480}, },
            {{48, 48, 2751}, {49, 49, 2752}, {50, 50, 2753}, {51, 57, 2754}, },
            {{46, 46, 2621}, {48, 57, 2755}, },
            {{46, 46, 2621}, {48, 57, 2756}, },
            {{46, 46, 2621}, {48, 53, 2757}, },
            {{46, 46, 2621}, },
            {{58, 58, 2423}, {93, 93, 2291}, },
            {{58, 93, -2628}, },
            {{48, 57, 2758}, {58, 58, 2423}, {65, 70, 2759}, {93, 93, 2291}, },
            {{48, 93, -2630}, },
            {{46, 46, 2421}, {48, 57, 2760}, {58, 93, -2630}, },
            {{46, 46, 2421}, {48, 57, 2761}, {58, 93, -2630}, },
            {{46, 46, 2421}, {48, 53, 2762}, {54, 57, 2758}, {58, 93, -2630}, },
            {{46, 46, 2421}, {48, 93, -2630}, },
            {{48, 57, 2763}, {65, 70, 2764}, },
            {{48, 70, -2636}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{48, 57, 2765}, {65, 70, 2766}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{48, 76, -282}, {77, 77, 2767}, {78, 40869, -282}, },
            {{48, 115, -270}, {116, 116, 2768}, {117, 40869, -260}, },
            {{48, 95, -25}, {97, 97, 2769}, {98, 40869, -36}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 2770}, {104, 40869, -262}, },
            {{48, 109, -46}, {110, 110, 2771}, {111, 40869, -37}, },
            {{48, 115, -270}, {116, 116, 2772}, {117, 40869, -260}, },
            {{48, 118, -505}, {119, 119, 2773}, {120, 40869, -47}, },
            {{48, 115, -270}, {116, 116, 2774}, {117, 40869, -260}, },
            {{48, 100, -35}, {101, 101, 2775}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 2776}, {111, 40869, -37}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 2777}, {104, 40869, -262}, },
            {{48, 81, -2344}, {82, 82, 2778}, {83, 40869, -549}, },
            {{48, 40869, -25}, },
            {{48, 79, -849}, {80, 80, 2779}, {81, 40869, -849}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 109, -46}, {110, 110, 2780}, {111, 40869, -37}, },
            {{48, 110, -38}, {111, 111, 2781}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 2782}, {102, 40869, -39}, },
            {{48, 100, -35}, {101, 101, 2783}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 2784}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{33, 47, -1967}, {48, 57, 2785}, {58, 65519, -1963}, },
            {{33, 47, -1967}, {48, 57, 2786}, {58, 65519, -1963}, },
            {{33, 47, -1967}, {48, 53, 2787}, {54, 65519, -2224}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -2230}, },
            {{33, 47, -2230}, {48, 57, 2788}, {58, 65519, -2226}, },
            {{33, 47, -2230}, {48, 52, 2789}, {53, 53, 2790}, {54, 57, 2791}, {58, 65519, -2226}, },
            {{33, 47, -2230}, {48, 57, 2791}, {58, 65519, -2226}, },
            {{33, 65519, -2480}, },
            {{33, 65519, -2480}, },
            {{33, 65519, -2480}, },
            {{46, 46, 2792}, },
            {{46, 46, 2792}, {48, 57, 2793}, },
            {{46, 46, 2792}, {48, 52, 2794}, {53, 53, 2795}, {54, 57, 2796}, },
            {{46, 46, 2792}, {48, 57, 2796}, },
            {{46, 46, 2621}, },
            {{46, 46, 2621}, },
            {{46, 46, 2621}, },
            {{48, 57, 2797}, {58, 58, 2423}, {65, 70, 2798}, {93, 93, 2291}, },
            {{48, 93, -2760}, },
            {{46, 46, 2421}, {48, 93, -2760}, },
            {{46, 93, -2762}, },
            {{46, 93, -2762}, },
            {{33, 65519, -2431}, },
            {{33, 65519, -2431}, },
            {{48, 57, 2799}, {65, 70, 2800}, },
            {{48, 70, -2767}, },
            {{48, 95, -25}, {97, 97, 2801}, {98, 40869, -36}, },
            {{48, 104, -266}, {105, 105, 2802}, {106, 40869, -266}, },
            {{48, 108, -269}, {109, 109, 2803}, {110, 40869, -291}, },
            {{48, 113, -280}, {114, 114, 2804}, {115, 40869, -42}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 110, -38}, {111, 111, 2805}, {112, 40869, -31}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 2806}, {98, 40869, -36}, },
            {{48, 120, -527}, {121, 121, 2807}, {122, 40869, -44}, },
            {{48, 100, -35}, {101, 101, 2808}, {102, 40869, -39}, },
            {{48, 113, -280}, {114, 114, 2809}, {115, 40869, -42}, },
            {{48, 98, -260}, {99, 99, 2810}, {100, 40869, -300}, },
            {{48, 109, -46}, {110, 110, 2811}, {111, 40869, -37}, },
            {{48, 114, -259}, {115, 115, 2812}, {116, 40869, -46}, },
            {{48, 40869, -25}, },
            {{48, 114, -259}, {115, 115, 2813}, {116, 40869, -46}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 65519, -1967}, },
            {{33, 47, -2230}, {48, 57, 2814}, {58, 65519, -2226}, },
            {{33, 47, -2230}, {48, 57, 2815}, {58, 65519, -2226}, },
            {{33, 47, -2230}, {48, 53, 2816}, {54, 65519, -2419}, },
            {{33, 65519, -2230}, },
            {{48, 48, 2817}, {49, 49, 2818}, {50, 50, 2819}, {51, 57, 2820}, },
            {{46, 46, 2792}, {48, 57, 2821}, },
            {{46, 46, 2792}, {48, 57, 2822}, },
            {{46, 46, 2792}, {48, 53, 2823}, },
            {{46, 46, 2792}, },
            {{58, 93, -2628}, },
            {{58, 93, -2628}, },
            {{33, 65519, -2513}, },
            {{33, 65519, -2513}, },
            {{48, 98, -260}, {99, 99, 2824}, {100, 40869, -300}, },
            {{48, 110, -38}, {111, 111, 2825}, {112, 40869, -31}, },
            {{48, 40869, -25}, },
            {{48, 95, -25}, {97, 97, 2826}, {98, 40869, -36}, },
            {{48, 113, -280}, {114, 114, 2827}, {115, 40869, -42}, },
            {{48, 107, -278}, {108, 108, 2828}, {109, 40869, -271}, },
            {{48, 40869, -25}, },
            {{48, 102, -262}, {103, 103, 2829}, {104, 40869, -262}, },
            {{48, 110, -38}, {111, 111, 2830}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 2831}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{48, 40869, -25}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{33, 65519, -2230}, },
            {{93, 93, 2291}, },
            {{48, 57, 2832}, {93, 93, 2291}, },
            {{48, 52, 2833}, {53, 53, 2834}, {54, 57, 2835}, {93, 93, 2291}, },
            {{48, 57, 2835}, {93, 93, 2291}, },
            {{46, 46, 2792}, },
            {{46, 46, 2792}, },
            {{46, 46, 2792}, },
            {{48, 103, -489}, {104, 104, 2836}, {105, 40869, -489}, },
            {{48, 109, -46}, {110, 110, 2837}, {111, 40869, -37}, },
            {{48, 111, -264}, {112, 112, 2838}, {113, 40869, -264}, },
            {{48, 114, -259}, {115, 115, 2839}, {116, 40869, -46}, },
            {{48, 79, -849}, {80, 80, 2840}, {81, 40869, -849}, },
            {{48, 104, -266}, {105, 105, 2841}, {106, 40869, -266}, },
            {{48, 111, -264}, {112, 112, 2842}, {113, 40869, -264}, },
            {{48, 40869, -25}, },
            {{48, 57, 2843}, {93, 93, 2291}, },
            {{48, 57, 2844}, {93, 93, 2291}, },
            {{48, 53, 2845}, {93, 93, 2291}, },
            {{93, 93, 2291}, },
            {{48, 104, -266}, {105, 105, 2846}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 103, -489}, {104, 104, 2847}, {105, 40869, -489}, },
            {{48, 40869, -25}, },
            {{48, 113, -280}, {114, 114, 2848}, {115, 40869, -42}, },
            {{48, 110, -38}, {111, 111, 2849}, {112, 40869, -31}, },
            {{48, 100, -35}, {101, 101, 2850}, {102, 40869, -39}, },
            {{93, 93, 2291}, },
            {{93, 93, 2291}, },
            {{93, 93, 2291}, },
            {{48, 109, -46}, {110, 110, 2851}, {111, 40869, -37}, },
            {{48, 120, -527}, {121, 121, 2852}, {122, 40869, -44}, },
            {{48, 110, -38}, {111, 111, 2853}, {112, 40869, -31}, },
            {{48, 109, -46}, {110, 110, 2854}, {111, 40869, -37}, },
            {{48, 113, -280}, {114, 114, 2855}, {115, 40869, -42}, },
            {{48, 100, -35}, {101, 101, 2856}, {102, 40869, -39}, },
            {{48, 40869, -25}, },
            {{48, 111, -264}, {112, 112, 2857}, {113, 40869, -264}, },
            {{48, 40869, -25}, },
            {{48, 115, -270}, {116, 116, 2858}, {117, 40869, -260}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 2859}, {102, 40869, -39}, },
            {{48, 104, -266}, {105, 105, 2860}, {106, 40869, -266}, },
            {{48, 113, -280}, {114, 114, 2861}, {115, 40869, -42}, },
            {{48, 100, -35}, {101, 101, 2862}, {102, 40869, -39}, },
            {{48, 115, -270}, {116, 116, 2863}, {117, 40869, -260}, },
            {{48, 114, -259}, {115, 115, 2864}, {116, 40869, -46}, },
            {{48, 104, -266}, {105, 105, 2865}, {106, 40869, -266}, },
            {{48, 40869, -25}, },
            {{48, 100, -35}, {101, 101, 2866}, {102, 40869, -39}, },
            {{48, 114, -259}, {115, 115, 2867}, {116, 40869, -46}, },
            {{48, 40869, -25}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 0, -1, -1, 10, 4, 5, 32, 30, 2, 31, -1, 33, 158, -1, 24, 27, 23, -1, 84, 162, 6, 7, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 8, 100, 9, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 0, 17, 29, -1, 160, -1, 13, 3, 3, 3, 3, -1, -1, -1, 16, -1, 14, 26, 98, 25, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 162, 162, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, -1, 156, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 89, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 96, 162, 97, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 12, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, -1, 3, -1, -1, -1, -1, 1, 1, 159, 28, 15, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157, 162, 162, 162, 162, 83, 162, 11, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 18, 162, 18, 52, 162, 162, 162, 162, 162, 162, 162, 99, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 146, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 134, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 120, 162, 162, 43, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 121, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 79, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 104, 162, 22, 162, 162, 162, 162, 162, 162, 162, 106, 162, 162, 162, -1, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 35, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 93, 162, 162, 162, 162, 162, 21, 162, 162, 162, 162, 162, 133, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 123, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 148, 162, 162, 162, 162, 162, 147, 162, 162, 162, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 86, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 88, 40, 162, 162, 162, 162, 162, 41, 162, 19, 162, 162, 162, 20, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 53, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 153, 162, 162, 101, 63, 137, 162, 162, 103, 162, 162, 162, 67, 162, 152, 105, 162, 162, 162, 162, 162, 162, 162, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 38, 162, 162, 162, 162, 162, 162, 162, 142, 140, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 13, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 75, 162, 162, 162, 162, 78, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, -1, 162, 162, 162, 132, 162, 122, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 44, 162, 162, 162, 126, 47, 162, 162, 162, 162, 162, 162, 114, 50, 162, 162, 162, 54, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 60, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 80, 162, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 39, 162, 91, 92, 162, 162, 162, 117, 116, 162, 162, 162, 14, 162, 162, 48, 162, 162, 49, 162, 77, 51, 162, 162, 162, 130, 162, 129, 162, 162, 162, 162, 162, 59, 162, 162, 162, 162, 135, 162, 162, 162, 66, 162, 162, 162, 162, 162, 162, 162, 162, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 34, 36, 162, 162, 162, 144, 162, 87, 162, 162, 162, 162, 162, 162, 15, 119, 162, 42, 162, 162, 162, 162, 162, 136, 162, 162, 128, 55, 162, 162, 82, 162, 81, 162, 162, 162, 143, 162, 162, 162, 162, 162, 68, 162, 162, 71, 72, 162, 162, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 76, 162, 162, 162, 115, 162, 162, 162, 162, 162, 131, 162, 162, 162, 162, 162, 162, 162, 162, 45, 162, 145, 162, 162, 162, 162, 139, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 70, 162, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 37, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 58, 162, 162, 162, 162, 64, 162, 162, 69, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 118, 111, 162, 162, 162, 162, 162, 162, 151, 150, 90, 162, 113, 94, 162, 162, 109, 162, 56, 57, 162, 162, 162, 162, 65, 162, 107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 110, 138, 141, 162, 149, 162, 162, 162, 162, 162, 162, 162, 102, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 112, 162, 162, 162, 46, 162, 162, 162, 124, 62, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 162, 162, 162, 162, 162, 162, 61, -1, -1, -1, -1, 162, 125, 162, 154, 162, 162, 162, -1, -1, -1, 162, 162, 162, 162, 162, 162, 108, 162, 127, 162, 85, 162, 162, 162, 162, 162, 162, 162, 52, 162, 162, 41, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}

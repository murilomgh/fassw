/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.wsmo.wsml.compiler.analysis;

import org.wsmo.wsml.compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPWsml().apply(this);
        outStart(node);
    }

    public void inAWsml(AWsml node)
    {
        defaultIn(node);
    }

    public void outAWsml(AWsml node)
    {
        defaultOut(node);
    }

    public void caseAWsml(AWsml node)
    {
        inAWsml(node);
        {
            Object temp[] = node.getDefinition().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDefinition) temp[i]).apply(this);
            }
        }
        if(node.getNamespace() != null)
        {
            node.getNamespace().apply(this);
        }
        if(node.getWsmlvariant() != null)
        {
            node.getWsmlvariant().apply(this);
        }
        outAWsml(node);
    }

    public void inAWsmlvariant(AWsmlvariant node)
    {
        defaultIn(node);
    }

    public void outAWsmlvariant(AWsmlvariant node)
    {
        defaultOut(node);
    }

    public void caseAWsmlvariant(AWsmlvariant node)
    {
        inAWsmlvariant(node);
        if(node.getFullIri() != null)
        {
            node.getFullIri().apply(this);
        }
        if(node.getTWsmlvariant() != null)
        {
            node.getTWsmlvariant().apply(this);
        }
        outAWsmlvariant(node);
    }

    public void inANamespace(ANamespace node)
    {
        defaultIn(node);
    }

    public void outANamespace(ANamespace node)
    {
        defaultOut(node);
    }

    public void caseANamespace(ANamespace node)
    {
        inANamespace(node);
        if(node.getPrefixdefinitionlist() != null)
        {
            node.getPrefixdefinitionlist().apply(this);
        }
        if(node.getTNamespace() != null)
        {
            node.getTNamespace().apply(this);
        }
        outANamespace(node);
    }

    public void inADefaultnsPrefixdefinitionlist(ADefaultnsPrefixdefinitionlist node)
    {
        defaultIn(node);
    }

    public void outADefaultnsPrefixdefinitionlist(ADefaultnsPrefixdefinitionlist node)
    {
        defaultOut(node);
    }

    public void caseADefaultnsPrefixdefinitionlist(ADefaultnsPrefixdefinitionlist node)
    {
        inADefaultnsPrefixdefinitionlist(node);
        if(node.getFullIri() != null)
        {
            node.getFullIri().apply(this);
        }
        outADefaultnsPrefixdefinitionlist(node);
    }

    public void inAPrefixdefinitionlistPrefixdefinitionlist(APrefixdefinitionlistPrefixdefinitionlist node)
    {
        defaultIn(node);
    }

    public void outAPrefixdefinitionlistPrefixdefinitionlist(APrefixdefinitionlistPrefixdefinitionlist node)
    {
        defaultOut(node);
    }

    public void caseAPrefixdefinitionlistPrefixdefinitionlist(APrefixdefinitionlistPrefixdefinitionlist node)
    {
        inAPrefixdefinitionlistPrefixdefinitionlist(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getMoreprefixdefinitions().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreprefixdefinitions) temp[i]).apply(this);
            }
        }
        if(node.getPrefixdefinition() != null)
        {
            node.getPrefixdefinition().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAPrefixdefinitionlistPrefixdefinitionlist(node);
    }

    public void inANamespacedefPrefixdefinition(ANamespacedefPrefixdefinition node)
    {
        defaultIn(node);
    }

    public void outANamespacedefPrefixdefinition(ANamespacedefPrefixdefinition node)
    {
        defaultOut(node);
    }

    public void caseANamespacedefPrefixdefinition(ANamespacedefPrefixdefinition node)
    {
        inANamespacedefPrefixdefinition(node);
        if(node.getFullIri() != null)
        {
            node.getFullIri().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamespacedefPrefixdefinition(node);
    }

    public void inADefaultPrefixdefinition(ADefaultPrefixdefinition node)
    {
        defaultIn(node);
    }

    public void outADefaultPrefixdefinition(ADefaultPrefixdefinition node)
    {
        defaultOut(node);
    }

    public void caseADefaultPrefixdefinition(ADefaultPrefixdefinition node)
    {
        inADefaultPrefixdefinition(node);
        if(node.getFullIri() != null)
        {
            node.getFullIri().apply(this);
        }
        outADefaultPrefixdefinition(node);
    }

    public void inAMoreprefixdefinitions(AMoreprefixdefinitions node)
    {
        defaultIn(node);
    }

    public void outAMoreprefixdefinitions(AMoreprefixdefinitions node)
    {
        defaultOut(node);
    }

    public void caseAMoreprefixdefinitions(AMoreprefixdefinitions node)
    {
        inAMoreprefixdefinitions(node);
        if(node.getPrefixdefinition() != null)
        {
            node.getPrefixdefinition().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMoreprefixdefinitions(node);
    }

    public void inAGoalDefinition(AGoalDefinition node)
    {
        defaultIn(node);
    }

    public void outAGoalDefinition(AGoalDefinition node)
    {
        defaultOut(node);
    }

    public void caseAGoalDefinition(AGoalDefinition node)
    {
        inAGoalDefinition(node);
        if(node.getGoal() != null)
        {
            node.getGoal().apply(this);
        }
        outAGoalDefinition(node);
    }

    public void inAOntologyDefinition(AOntologyDefinition node)
    {
        defaultIn(node);
    }

    public void outAOntologyDefinition(AOntologyDefinition node)
    {
        defaultOut(node);
    }

    public void caseAOntologyDefinition(AOntologyDefinition node)
    {
        inAOntologyDefinition(node);
        if(node.getOntology() != null)
        {
            node.getOntology().apply(this);
        }
        outAOntologyDefinition(node);
    }

    public void inAWebserviceDefinition(AWebserviceDefinition node)
    {
        defaultIn(node);
    }

    public void outAWebserviceDefinition(AWebserviceDefinition node)
    {
        defaultOut(node);
    }

    public void caseAWebserviceDefinition(AWebserviceDefinition node)
    {
        inAWebserviceDefinition(node);
        if(node.getWebservice() != null)
        {
            node.getWebservice().apply(this);
        }
        outAWebserviceDefinition(node);
    }

    public void inAMediatorDefinition(AMediatorDefinition node)
    {
        defaultIn(node);
    }

    public void outAMediatorDefinition(AMediatorDefinition node)
    {
        defaultOut(node);
    }

    public void caseAMediatorDefinition(AMediatorDefinition node)
    {
        inAMediatorDefinition(node);
        if(node.getMediator() != null)
        {
            node.getMediator().apply(this);
        }
        outAMediatorDefinition(node);
    }

    public void inANfpHeader(ANfpHeader node)
    {
        defaultIn(node);
    }

    public void outANfpHeader(ANfpHeader node)
    {
        defaultOut(node);
    }

    public void caseANfpHeader(ANfpHeader node)
    {
        inANfpHeader(node);
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        outANfpHeader(node);
    }

    public void inAUsesmediatorHeader(AUsesmediatorHeader node)
    {
        defaultIn(node);
    }

    public void outAUsesmediatorHeader(AUsesmediatorHeader node)
    {
        defaultOut(node);
    }

    public void caseAUsesmediatorHeader(AUsesmediatorHeader node)
    {
        inAUsesmediatorHeader(node);
        if(node.getUsesmediator() != null)
        {
            node.getUsesmediator().apply(this);
        }
        outAUsesmediatorHeader(node);
    }

    public void inAImportsontologyHeader(AImportsontologyHeader node)
    {
        defaultIn(node);
    }

    public void outAImportsontologyHeader(AImportsontologyHeader node)
    {
        defaultOut(node);
    }

    public void caseAImportsontologyHeader(AImportsontologyHeader node)
    {
        inAImportsontologyHeader(node);
        if(node.getImportsontology() != null)
        {
            node.getImportsontology().apply(this);
        }
        outAImportsontologyHeader(node);
    }

    public void inAUsesmediator(AUsesmediator node)
    {
        defaultIn(node);
    }

    public void outAUsesmediator(AUsesmediator node)
    {
        defaultOut(node);
    }

    public void caseAUsesmediator(AUsesmediator node)
    {
        inAUsesmediator(node);
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getTUsemediator() != null)
        {
            node.getTUsemediator().apply(this);
        }
        outAUsesmediator(node);
    }

    public void inAImportsontology(AImportsontology node)
    {
        defaultIn(node);
    }

    public void outAImportsontology(AImportsontology node)
    {
        defaultOut(node);
    }

    public void caseAImportsontology(AImportsontology node)
    {
        inAImportsontology(node);
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getTImportontology() != null)
        {
            node.getTImportontology().apply(this);
        }
        outAImportsontology(node);
    }

    public void inANfp(ANfp node)
    {
        defaultIn(node);
    }

    public void outANfp(ANfp node)
    {
        defaultOut(node);
    }

    public void caseANfp(ANfp node)
    {
        inANfp(node);
        if(node.getTEndnfp() != null)
        {
            node.getTEndnfp().apply(this);
        }
        {
            Object temp[] = node.getAttributevalue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAttributevalue) temp[i]).apply(this);
            }
        }
        if(node.getTNfp() != null)
        {
            node.getTNfp().apply(this);
        }
        outANfp(node);
    }

    public void inAOomediatorMediator(AOomediatorMediator node)
    {
        defaultIn(node);
    }

    public void outAOomediatorMediator(AOomediatorMediator node)
    {
        defaultOut(node);
    }

    public void caseAOomediatorMediator(AOomediatorMediator node)
    {
        inAOomediatorMediator(node);
        if(node.getOomediator() != null)
        {
            node.getOomediator().apply(this);
        }
        outAOomediatorMediator(node);
    }

    public void inAGgmediatorMediator(AGgmediatorMediator node)
    {
        defaultIn(node);
    }

    public void outAGgmediatorMediator(AGgmediatorMediator node)
    {
        defaultOut(node);
    }

    public void caseAGgmediatorMediator(AGgmediatorMediator node)
    {
        inAGgmediatorMediator(node);
        if(node.getGgmediator() != null)
        {
            node.getGgmediator().apply(this);
        }
        outAGgmediatorMediator(node);
    }

    public void inAWgmediatorMediator(AWgmediatorMediator node)
    {
        defaultIn(node);
    }

    public void outAWgmediatorMediator(AWgmediatorMediator node)
    {
        defaultOut(node);
    }

    public void caseAWgmediatorMediator(AWgmediatorMediator node)
    {
        inAWgmediatorMediator(node);
        if(node.getWgmediator() != null)
        {
            node.getWgmediator().apply(this);
        }
        outAWgmediatorMediator(node);
    }

    public void inAWwmediatorMediator(AWwmediatorMediator node)
    {
        defaultIn(node);
    }

    public void outAWwmediatorMediator(AWwmediatorMediator node)
    {
        defaultOut(node);
    }

    public void caseAWwmediatorMediator(AWwmediatorMediator node)
    {
        inAWwmediatorMediator(node);
        if(node.getWwmediator() != null)
        {
            node.getWwmediator().apply(this);
        }
        outAWwmediatorMediator(node);
    }

    public void inAPpmediatorMediator(APpmediatorMediator node)
    {
        defaultIn(node);
    }

    public void outAPpmediatorMediator(APpmediatorMediator node)
    {
        defaultOut(node);
    }

    public void caseAPpmediatorMediator(APpmediatorMediator node)
    {
        inAPpmediatorMediator(node);
        if(node.getPpmediator() != null)
        {
            node.getPpmediator().apply(this);
        }
        outAPpmediatorMediator(node);
    }

    public void inAPfmediatorMediator(APfmediatorMediator node)
    {
        defaultIn(node);
    }

    public void outAPfmediatorMediator(APfmediatorMediator node)
    {
        defaultOut(node);
    }

    public void caseAPfmediatorMediator(APfmediatorMediator node)
    {
        inAPfmediatorMediator(node);
        if(node.getPfmediator() != null)
        {
            node.getPfmediator().apply(this);
        }
        outAPfmediatorMediator(node);
    }

    public void inAOomediator(AOomediator node)
    {
        defaultIn(node);
    }

    public void outAOomediator(AOomediator node)
    {
        defaultOut(node);
    }

    public void caseAOomediator(AOomediator node)
    {
        inAOomediator(node);
        if(node.getUseService() != null)
        {
            node.getUseService().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSources() != null)
        {
            node.getSources().apply(this);
        }
        if(node.getImportsontology() != null)
        {
            node.getImportsontology().apply(this);
        }
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTOomediator() != null)
        {
            node.getTOomediator().apply(this);
        }
        outAOomediator(node);
    }

    public void inAGgmediator(AGgmediator node)
    {
        defaultIn(node);
    }

    public void outAGgmediator(AGgmediator node)
    {
        defaultOut(node);
    }

    public void caseAGgmediator(AGgmediator node)
    {
        inAGgmediator(node);
        if(node.getUseService() != null)
        {
            node.getUseService().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSources() != null)
        {
            node.getSources().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTGgmediator() != null)
        {
            node.getTGgmediator().apply(this);
        }
        outAGgmediator(node);
    }

    public void inAWgmediator(AWgmediator node)
    {
        defaultIn(node);
    }

    public void outAWgmediator(AWgmediator node)
    {
        defaultOut(node);
    }

    public void caseAWgmediator(AWgmediator node)
    {
        inAWgmediator(node);
        if(node.getUseService() != null)
        {
            node.getUseService().apply(this);
        }
        if(node.getClientChoreography() != null)
        {
            node.getClientChoreography().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSource() != null)
        {
            node.getSource().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTWgmediator() != null)
        {
            node.getTWgmediator().apply(this);
        }
        outAWgmediator(node);
    }

    public void inAWwmediator(AWwmediator node)
    {
        defaultIn(node);
    }

    public void outAWwmediator(AWwmediator node)
    {
        defaultOut(node);
    }

    public void caseAWwmediator(AWwmediator node)
    {
        inAWwmediator(node);
        if(node.getUseService() != null)
        {
            node.getUseService().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSource() != null)
        {
            node.getSource().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTWwmediator() != null)
        {
            node.getTWwmediator().apply(this);
        }
        outAWwmediator(node);
    }

    public void inAPpmediator(APpmediator node)
    {
        defaultIn(node);
    }

    public void outAPpmediator(APpmediator node)
    {
        defaultOut(node);
    }

    public void caseAPpmediator(APpmediator node)
    {
        inAPpmediator(node);
        if(node.getUseService() != null)
        {
            node.getUseService().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSource() != null)
        {
            node.getSource().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTPpmediator() != null)
        {
            node.getTPpmediator().apply(this);
        }
        outAPpmediator(node);
    }

    public void inAPfmediator(APfmediator node)
    {
        defaultIn(node);
    }

    public void outAPfmediator(APfmediator node)
    {
        defaultOut(node);
    }

    public void caseAPfmediator(APfmediator node)
    {
        inAPfmediator(node);
        if(node.getUseService() != null)
        {
            node.getUseService().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        if(node.getSource() != null)
        {
            node.getSource().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTPfmediator() != null)
        {
            node.getTPfmediator().apply(this);
        }
        outAPfmediator(node);
    }

    public void inAUseService(AUseService node)
    {
        defaultIn(node);
    }

    public void outAUseService(AUseService node)
    {
        defaultOut(node);
    }

    public void caseAUseService(AUseService node)
    {
        inAUseService(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTUseservice() != null)
        {
            node.getTUseservice().apply(this);
        }
        outAUseService(node);
    }

    public void inASource(ASource node)
    {
        defaultIn(node);
    }

    public void outASource(ASource node)
    {
        defaultOut(node);
    }

    public void caseASource(ASource node)
    {
        inASource(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTSource() != null)
        {
            node.getTSource().apply(this);
        }
        outASource(node);
    }

    public void inAMsources(AMsources node)
    {
        defaultIn(node);
    }

    public void outAMsources(AMsources node)
    {
        defaultOut(node);
    }

    public void caseAMsources(AMsources node)
    {
        inAMsources(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getMoreids().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreids) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getTSource() != null)
        {
            node.getTSource().apply(this);
        }
        outAMsources(node);
    }

    public void inASingleSources(ASingleSources node)
    {
        defaultIn(node);
    }

    public void outASingleSources(ASingleSources node)
    {
        defaultOut(node);
    }

    public void caseASingleSources(ASingleSources node)
    {
        inASingleSources(node);
        if(node.getSource() != null)
        {
            node.getSource().apply(this);
        }
        outASingleSources(node);
    }

    public void inAMultipleSources(AMultipleSources node)
    {
        defaultIn(node);
    }

    public void outAMultipleSources(AMultipleSources node)
    {
        defaultOut(node);
    }

    public void caseAMultipleSources(AMultipleSources node)
    {
        inAMultipleSources(node);
        if(node.getMsources() != null)
        {
            node.getMsources().apply(this);
        }
        outAMultipleSources(node);
    }

    public void inATarget(ATarget node)
    {
        defaultIn(node);
    }

    public void outATarget(ATarget node)
    {
        defaultOut(node);
    }

    public void caseATarget(ATarget node)
    {
        inATarget(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTTarget() != null)
        {
            node.getTTarget().apply(this);
        }
        outATarget(node);
    }

    public void inAClientChoreography(AClientChoreography node)
    {
        defaultIn(node);
    }

    public void outAClientChoreography(AClientChoreography node)
    {
        defaultOut(node);
    }

    public void caseAClientChoreography(AClientChoreography node)
    {
        inAClientChoreography(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTApplieschoreography() != null)
        {
            node.getTApplieschoreography().apply(this);
        }
        outAClientChoreography(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getInterfaces().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PInterfaces) temp[i]).apply(this);
            }
        }
        if(node.getCapability() != null)
        {
            node.getCapability().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTGoal() != null)
        {
            node.getTGoal().apply(this);
        }
        outAGoal(node);
    }

    public void inAWebservice(AWebservice node)
    {
        defaultIn(node);
    }

    public void outAWebservice(AWebservice node)
    {
        defaultOut(node);
    }

    public void caseAWebservice(AWebservice node)
    {
        inAWebservice(node);
        {
            Object temp[] = node.getInterfaces().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PInterfaces) temp[i]).apply(this);
            }
        }
        if(node.getCapability() != null)
        {
            node.getCapability().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTWebservice() != null)
        {
            node.getTWebservice().apply(this);
        }
        outAWebservice(node);
    }

    public void inACapability(ACapability node)
    {
        defaultIn(node);
    }

    public void outACapability(ACapability node)
    {
        defaultOut(node);
    }

    public void caseACapability(ACapability node)
    {
        inACapability(node);
        {
            Object temp[] = node.getPrePostAssOrEff().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PPrePostAssOrEff) temp[i]).apply(this);
            }
        }
        if(node.getSharedvardef() != null)
        {
            node.getSharedvardef().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTCapability() != null)
        {
            node.getTCapability().apply(this);
        }
        outACapability(node);
    }

    public void inASharedvardef(ASharedvardef node)
    {
        defaultIn(node);
    }

    public void outASharedvardef(ASharedvardef node)
    {
        defaultOut(node);
    }

    public void caseASharedvardef(ASharedvardef node)
    {
        inASharedvardef(node);
        if(node.getVariablelist() != null)
        {
            node.getVariablelist().apply(this);
        }
        if(node.getTSharedvariable() != null)
        {
            node.getTSharedvariable().apply(this);
        }
        outASharedvardef(node);
    }

    public void inAPreconditionPrePostAssOrEff(APreconditionPrePostAssOrEff node)
    {
        defaultIn(node);
    }

    public void outAPreconditionPrePostAssOrEff(APreconditionPrePostAssOrEff node)
    {
        defaultOut(node);
    }

    public void caseAPreconditionPrePostAssOrEff(APreconditionPrePostAssOrEff node)
    {
        inAPreconditionPrePostAssOrEff(node);
        if(node.getAxiomdefinition() != null)
        {
            node.getAxiomdefinition().apply(this);
        }
        if(node.getTPrecondition() != null)
        {
            node.getTPrecondition().apply(this);
        }
        outAPreconditionPrePostAssOrEff(node);
    }

    public void inAPostconditionPrePostAssOrEff(APostconditionPrePostAssOrEff node)
    {
        defaultIn(node);
    }

    public void outAPostconditionPrePostAssOrEff(APostconditionPrePostAssOrEff node)
    {
        defaultOut(node);
    }

    public void caseAPostconditionPrePostAssOrEff(APostconditionPrePostAssOrEff node)
    {
        inAPostconditionPrePostAssOrEff(node);
        if(node.getAxiomdefinition() != null)
        {
            node.getAxiomdefinition().apply(this);
        }
        if(node.getTPostcondition() != null)
        {
            node.getTPostcondition().apply(this);
        }
        outAPostconditionPrePostAssOrEff(node);
    }

    public void inAAssumptionPrePostAssOrEff(AAssumptionPrePostAssOrEff node)
    {
        defaultIn(node);
    }

    public void outAAssumptionPrePostAssOrEff(AAssumptionPrePostAssOrEff node)
    {
        defaultOut(node);
    }

    public void caseAAssumptionPrePostAssOrEff(AAssumptionPrePostAssOrEff node)
    {
        inAAssumptionPrePostAssOrEff(node);
        if(node.getAxiomdefinition() != null)
        {
            node.getAxiomdefinition().apply(this);
        }
        if(node.getTAssumption() != null)
        {
            node.getTAssumption().apply(this);
        }
        outAAssumptionPrePostAssOrEff(node);
    }

    public void inAEffectPrePostAssOrEff(AEffectPrePostAssOrEff node)
    {
        defaultIn(node);
    }

    public void outAEffectPrePostAssOrEff(AEffectPrePostAssOrEff node)
    {
        defaultOut(node);
    }

    public void caseAEffectPrePostAssOrEff(AEffectPrePostAssOrEff node)
    {
        inAEffectPrePostAssOrEff(node);
        if(node.getAxiomdefinition() != null)
        {
            node.getAxiomdefinition().apply(this);
        }
        if(node.getTEffect() != null)
        {
            node.getTEffect().apply(this);
        }
        outAEffectPrePostAssOrEff(node);
    }

    public void inASingleInterfaces(ASingleInterfaces node)
    {
        defaultIn(node);
    }

    public void outASingleInterfaces(ASingleInterfaces node)
    {
        defaultOut(node);
    }

    public void caseASingleInterfaces(ASingleInterfaces node)
    {
        inASingleInterfaces(node);
        if(node.getInterface() != null)
        {
            node.getInterface().apply(this);
        }
        outASingleInterfaces(node);
    }

    public void inAMultipleInterfaces(AMultipleInterfaces node)
    {
        defaultIn(node);
    }

    public void outAMultipleInterfaces(AMultipleInterfaces node)
    {
        defaultOut(node);
    }

    public void caseAMultipleInterfaces(AMultipleInterfaces node)
    {
        inAMultipleInterfaces(node);
        if(node.getMinterfaces() != null)
        {
            node.getMinterfaces().apply(this);
        }
        outAMultipleInterfaces(node);
    }

    public void inAMinterfaces(AMinterfaces node)
    {
        defaultIn(node);
    }

    public void outAMinterfaces(AMinterfaces node)
    {
        defaultOut(node);
    }

    public void caseAMinterfaces(AMinterfaces node)
    {
        inAMinterfaces(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getMoreids().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreids) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getTInterface() != null)
        {
            node.getTInterface().apply(this);
        }
        outAMinterfaces(node);
    }

    public void inAInterface(AInterface node)
    {
        defaultIn(node);
    }

    public void outAInterface(AInterface node)
    {
        defaultOut(node);
    }

    public void caseAInterface(AInterface node)
    {
        inAInterface(node);
        if(node.getOrchestration() != null)
        {
            node.getOrchestration().apply(this);
        }
        if(node.getChoreography() != null)
        {
            node.getChoreography().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTInterface() != null)
        {
            node.getTInterface().apply(this);
        }
        outAInterface(node);
    }

    public void inAChoreography(AChoreography node)
    {
        defaultIn(node);
    }

    public void outAChoreography(AChoreography node)
    {
        defaultOut(node);
    }

    public void caseAChoreography(AChoreography node)
    {
        inAChoreography(node);
        if(node.getChoreographyFormalism() != null)
        {
            node.getChoreographyFormalism().apply(this);
        }
        if(node.getStateSignature() != null)
        {
            node.getStateSignature().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTChoreography() != null)
        {
            node.getTChoreography().apply(this);
        }
        outAChoreography(node);
    }

    public void inAOrchestration(AOrchestration node)
    {
        defaultIn(node);
    }

    public void outAOrchestration(AOrchestration node)
    {
        defaultOut(node);
    }

    public void caseAOrchestration(AOrchestration node)
    {
        inAOrchestration(node);
        if(node.getOrchestrationFormalism() != null)
        {
            node.getOrchestrationFormalism().apply(this);
        }
        if(node.getStateSignature() != null)
        {
            node.getStateSignature().apply(this);
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTOrchestration() != null)
        {
            node.getTOrchestration().apply(this);
        }
        outAOrchestration(node);
    }

    public void inAChorAsmChoreographyFormalism(AChorAsmChoreographyFormalism node)
    {
        defaultIn(node);
    }

    public void outAChorAsmChoreographyFormalism(AChorAsmChoreographyFormalism node)
    {
        defaultOut(node);
    }

    public void caseAChorAsmChoreographyFormalism(AChorAsmChoreographyFormalism node)
    {
        inAChorAsmChoreographyFormalism(node);
        if(node.getTransitions() != null)
        {
            node.getTransitions().apply(this);
        }
        if(node.getTAsm() != null)
        {
            node.getTAsm().apply(this);
        }
        outAChorAsmChoreographyFormalism(node);
    }

    public void inAChorAdChoreographyFormalism(AChorAdChoreographyFormalism node)
    {
        defaultIn(node);
    }

    public void outAChorAdChoreographyFormalism(AChorAdChoreographyFormalism node)
    {
        defaultOut(node);
    }

    public void caseAChorAdChoreographyFormalism(AChorAdChoreographyFormalism node)
    {
        inAChorAdChoreographyFormalism(node);
        if(node.getActivityDiagram() != null)
        {
            node.getActivityDiagram().apply(this);
        }
        if(node.getTActivitydiagram() != null)
        {
            node.getTActivitydiagram().apply(this);
        }
        outAChorAdChoreographyFormalism(node);
    }

    public void inAChorCashewChoreographyFormalism(AChorCashewChoreographyFormalism node)
    {
        defaultIn(node);
    }

    public void outAChorCashewChoreographyFormalism(AChorCashewChoreographyFormalism node)
    {
        defaultOut(node);
    }

    public void caseAChorCashewChoreographyFormalism(AChorCashewChoreographyFormalism node)
    {
        inAChorCashewChoreographyFormalism(node);
        if(node.getCashewWorkflow() != null)
        {
            node.getCashewWorkflow().apply(this);
        }
        outAChorCashewChoreographyFormalism(node);
    }

    public void inAOrchAsmOrchestrationFormalism(AOrchAsmOrchestrationFormalism node)
    {
        defaultIn(node);
    }

    public void outAOrchAsmOrchestrationFormalism(AOrchAsmOrchestrationFormalism node)
    {
        defaultOut(node);
    }

    public void caseAOrchAsmOrchestrationFormalism(AOrchAsmOrchestrationFormalism node)
    {
        inAOrchAsmOrchestrationFormalism(node);
        if(node.getOrchestrationTransitions() != null)
        {
            node.getOrchestrationTransitions().apply(this);
        }
        if(node.getTAsm() != null)
        {
            node.getTAsm().apply(this);
        }
        outAOrchAsmOrchestrationFormalism(node);
    }

    public void inAOrchAdOrchestrationFormalism(AOrchAdOrchestrationFormalism node)
    {
        defaultIn(node);
    }

    public void outAOrchAdOrchestrationFormalism(AOrchAdOrchestrationFormalism node)
    {
        defaultOut(node);
    }

    public void caseAOrchAdOrchestrationFormalism(AOrchAdOrchestrationFormalism node)
    {
        inAOrchAdOrchestrationFormalism(node);
        if(node.getActivityDiagram() != null)
        {
            node.getActivityDiagram().apply(this);
        }
        if(node.getTActivitydiagram() != null)
        {
            node.getTActivitydiagram().apply(this);
        }
        outAOrchAdOrchestrationFormalism(node);
    }

    public void inAOrchCashewOrchestrationFormalism(AOrchCashewOrchestrationFormalism node)
    {
        defaultIn(node);
    }

    public void outAOrchCashewOrchestrationFormalism(AOrchCashewOrchestrationFormalism node)
    {
        defaultOut(node);
    }

    public void caseAOrchCashewOrchestrationFormalism(AOrchCashewOrchestrationFormalism node)
    {
        inAOrchCashewOrchestrationFormalism(node);
        if(node.getCashewWorkflow() != null)
        {
            node.getCashewWorkflow().apply(this);
        }
        outAOrchCashewOrchestrationFormalism(node);
    }

    public void inAStateSignature(AStateSignature node)
    {
        defaultIn(node);
    }

    public void outAStateSignature(AStateSignature node)
    {
        defaultOut(node);
    }

    public void caseAStateSignature(AStateSignature node)
    {
        inAStateSignature(node);
        {
            Object temp[] = node.getMode().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMode) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTStateSignature() != null)
        {
            node.getTStateSignature().apply(this);
        }
        outAStateSignature(node);
    }

    public void inATransitions(ATransitions node)
    {
        defaultIn(node);
    }

    public void outATransitions(ATransitions node)
    {
        defaultOut(node);
    }

    public void caseATransitions(ATransitions node)
    {
        inATransitions(node);
        {
            Object temp[] = node.getRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PRule) temp[i]).apply(this);
            }
        }
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTTransitions() != null)
        {
            node.getTTransitions().apply(this);
        }
        outATransitions(node);
    }

    public void inAMode(AMode node)
    {
        defaultIn(node);
    }

    public void outAMode(AMode node)
    {
        defaultOut(node);
    }

    public void caseAMode(AMode node)
    {
        inAMode(node);
        if(node.getModeEntryList() != null)
        {
            node.getModeEntryList().apply(this);
        }
        if(node.getModeId() != null)
        {
            node.getModeId().apply(this);
        }
        outAMode(node);
    }

    public void inAModeEntryModeEntryList(AModeEntryModeEntryList node)
    {
        defaultIn(node);
    }

    public void outAModeEntryModeEntryList(AModeEntryModeEntryList node)
    {
        defaultOut(node);
    }

    public void caseAModeEntryModeEntryList(AModeEntryModeEntryList node)
    {
        inAModeEntryModeEntryList(node);
        if(node.getModeEntry() != null)
        {
            node.getModeEntry().apply(this);
        }
        outAModeEntryModeEntryList(node);
    }

    public void inAModeEntryListModeEntryList(AModeEntryListModeEntryList node)
    {
        defaultIn(node);
    }

    public void outAModeEntryListModeEntryList(AModeEntryListModeEntryList node)
    {
        defaultOut(node);
    }

    public void caseAModeEntryListModeEntryList(AModeEntryListModeEntryList node)
    {
        inAModeEntryListModeEntryList(node);
        if(node.getModeEntryList() != null)
        {
            node.getModeEntryList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getModeEntry() != null)
        {
            node.getModeEntry().apply(this);
        }
        outAModeEntryListModeEntryList(node);
    }

    public void inAStaticModeId(AStaticModeId node)
    {
        defaultIn(node);
    }

    public void outAStaticModeId(AStaticModeId node)
    {
        defaultOut(node);
    }

    public void caseAStaticModeId(AStaticModeId node)
    {
        inAStaticModeId(node);
        if(node.getTStatic() != null)
        {
            node.getTStatic().apply(this);
        }
        outAStaticModeId(node);
    }

    public void inAInModeId(AInModeId node)
    {
        defaultIn(node);
    }

    public void outAInModeId(AInModeId node)
    {
        defaultOut(node);
    }

    public void caseAInModeId(AInModeId node)
    {
        inAInModeId(node);
        if(node.getTIn() != null)
        {
            node.getTIn().apply(this);
        }
        outAInModeId(node);
    }

    public void inAOutModeId(AOutModeId node)
    {
        defaultIn(node);
    }

    public void outAOutModeId(AOutModeId node)
    {
        defaultOut(node);
    }

    public void caseAOutModeId(AOutModeId node)
    {
        inAOutModeId(node);
        if(node.getTOut() != null)
        {
            node.getTOut().apply(this);
        }
        outAOutModeId(node);
    }

    public void inASharedModeId(ASharedModeId node)
    {
        defaultIn(node);
    }

    public void outASharedModeId(ASharedModeId node)
    {
        defaultOut(node);
    }

    public void caseASharedModeId(ASharedModeId node)
    {
        inASharedModeId(node);
        if(node.getTShared() != null)
        {
            node.getTShared().apply(this);
        }
        outASharedModeId(node);
    }

    public void inAControlledModeId(AControlledModeId node)
    {
        defaultIn(node);
    }

    public void outAControlledModeId(AControlledModeId node)
    {
        defaultOut(node);
    }

    public void caseAControlledModeId(AControlledModeId node)
    {
        inAControlledModeId(node);
        if(node.getTControlled() != null)
        {
            node.getTControlled().apply(this);
        }
        outAControlledModeId(node);
    }

    public void inADefaultModeModeEntry(ADefaultModeModeEntry node)
    {
        defaultIn(node);
    }

    public void outADefaultModeModeEntry(ADefaultModeModeEntry node)
    {
        defaultOut(node);
    }

    public void caseADefaultModeModeEntry(ADefaultModeModeEntry node)
    {
        inADefaultModeModeEntry(node);
        if(node.getGrounding() != null)
        {
            node.getGrounding().apply(this);
        }
        if(node.getIri() != null)
        {
            node.getIri().apply(this);
        }
        outADefaultModeModeEntry(node);
    }

    public void inAConceptModeModeEntry(AConceptModeModeEntry node)
    {
        defaultIn(node);
    }

    public void outAConceptModeModeEntry(AConceptModeModeEntry node)
    {
        defaultOut(node);
    }

    public void caseAConceptModeModeEntry(AConceptModeModeEntry node)
    {
        inAConceptModeModeEntry(node);
        if(node.getGrounding() != null)
        {
            node.getGrounding().apply(this);
        }
        if(node.getIri() != null)
        {
            node.getIri().apply(this);
        }
        if(node.getTConcept() != null)
        {
            node.getTConcept().apply(this);
        }
        outAConceptModeModeEntry(node);
    }

    public void inARelationModeModeEntry(ARelationModeModeEntry node)
    {
        defaultIn(node);
    }

    public void outARelationModeModeEntry(ARelationModeModeEntry node)
    {
        defaultOut(node);
    }

    public void caseARelationModeModeEntry(ARelationModeModeEntry node)
    {
        inARelationModeModeEntry(node);
        if(node.getGrounding() != null)
        {
            node.getGrounding().apply(this);
        }
        if(node.getIri() != null)
        {
            node.getIri().apply(this);
        }
        if(node.getTRelation() != null)
        {
            node.getTRelation().apply(this);
        }
        outARelationModeModeEntry(node);
    }

    public void inAGrounding(AGrounding node)
    {
        defaultIn(node);
    }

    public void outAGrounding(AGrounding node)
    {
        defaultOut(node);
    }

    public void caseAGrounding(AGrounding node)
    {
        inAGrounding(node);
        if(node.getGroundingInfo() != null)
        {
            node.getGroundingInfo().apply(this);
        }
        if(node.getTWithGrounding() != null)
        {
            node.getTWithGrounding().apply(this);
        }
        outAGrounding(node);
    }

    public void inAIriGroundingInfo(AIriGroundingInfo node)
    {
        defaultIn(node);
    }

    public void outAIriGroundingInfo(AIriGroundingInfo node)
    {
        defaultOut(node);
    }

    public void caseAIriGroundingInfo(AIriGroundingInfo node)
    {
        inAIriGroundingInfo(node);
        if(node.getIri() != null)
        {
            node.getIri().apply(this);
        }
        outAIriGroundingInfo(node);
    }

    public void inAIrilistGroundingInfo(AIrilistGroundingInfo node)
    {
        defaultIn(node);
    }

    public void outAIrilistGroundingInfo(AIrilistGroundingInfo node)
    {
        defaultOut(node);
    }

    public void caseAIrilistGroundingInfo(AIrilistGroundingInfo node)
    {
        inAIrilistGroundingInfo(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getIrilist() != null)
        {
            node.getIrilist().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAIrilistGroundingInfo(node);
    }

    public void inAIriIrilist(AIriIrilist node)
    {
        defaultIn(node);
    }

    public void outAIriIrilist(AIriIrilist node)
    {
        defaultOut(node);
    }

    public void caseAIriIrilist(AIriIrilist node)
    {
        inAIriIrilist(node);
        if(node.getIri() != null)
        {
            node.getIri().apply(this);
        }
        outAIriIrilist(node);
    }

    public void inAIrilistIrilist(AIrilistIrilist node)
    {
        defaultIn(node);
    }

    public void outAIrilistIrilist(AIrilistIrilist node)
    {
        defaultOut(node);
    }

    public void caseAIrilistIrilist(AIrilistIrilist node)
    {
        inAIrilistIrilist(node);
        if(node.getIrilist() != null)
        {
            node.getIrilist().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIri() != null)
        {
            node.getIri().apply(this);
        }
        outAIrilistIrilist(node);
    }

    public void inAIfRule(AIfRule node)
    {
        defaultIn(node);
    }

    public void outAIfRule(AIfRule node)
    {
        defaultOut(node);
    }

    public void caseAIfRule(AIfRule node)
    {
        inAIfRule(node);
        if(node.getPipedRule() != null)
        {
            node.getPipedRule().apply(this);
        }
        if(node.getTEndif() != null)
        {
            node.getTEndif().apply(this);
        }
        {
            Object temp[] = node.getRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PRule) temp[i]).apply(this);
            }
        }
        if(node.getTThen() != null)
        {
            node.getTThen().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getTIf() != null)
        {
            node.getTIf().apply(this);
        }
        outAIfRule(node);
    }

    public void inAForallRule(AForallRule node)
    {
        defaultIn(node);
    }

    public void outAForallRule(AForallRule node)
    {
        defaultOut(node);
    }

    public void caseAForallRule(AForallRule node)
    {
        inAForallRule(node);
        if(node.getPipedRule() != null)
        {
            node.getPipedRule().apply(this);
        }
        if(node.getTEndforall() != null)
        {
            node.getTEndforall().apply(this);
        }
        {
            Object temp[] = node.getRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PRule) temp[i]).apply(this);
            }
        }
        if(node.getTDo() != null)
        {
            node.getTDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getTWith() != null)
        {
            node.getTWith().apply(this);
        }
        if(node.getVariablelist() != null)
        {
            node.getVariablelist().apply(this);
        }
        if(node.getTForall() != null)
        {
            node.getTForall().apply(this);
        }
        outAForallRule(node);
    }

    public void inAChooseRule(AChooseRule node)
    {
        defaultIn(node);
    }

    public void outAChooseRule(AChooseRule node)
    {
        defaultOut(node);
    }

    public void caseAChooseRule(AChooseRule node)
    {
        inAChooseRule(node);
        if(node.getPipedRule() != null)
        {
            node.getPipedRule().apply(this);
        }
        if(node.getTEndchoose() != null)
        {
            node.getTEndchoose().apply(this);
        }
        {
            Object temp[] = node.getRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PRule) temp[i]).apply(this);
            }
        }
        if(node.getTDo() != null)
        {
            node.getTDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getTWith() != null)
        {
            node.getTWith().apply(this);
        }
        if(node.getVariablelist() != null)
        {
            node.getVariablelist().apply(this);
        }
        if(node.getTChoose() != null)
        {
            node.getTChoose().apply(this);
        }
        outAChooseRule(node);
    }

    public void inAUpdatesRule(AUpdatesRule node)
    {
        defaultIn(node);
    }

    public void outAUpdatesRule(AUpdatesRule node)
    {
        defaultOut(node);
    }

    public void caseAUpdatesRule(AUpdatesRule node)
    {
        inAUpdatesRule(node);
        if(node.getPipedRule() != null)
        {
            node.getPipedRule().apply(this);
        }
        if(node.getUpdaterule() != null)
        {
            node.getUpdaterule().apply(this);
        }
        outAUpdatesRule(node);
    }

    public void inAPipedRulePipedRule(APipedRulePipedRule node)
    {
        defaultIn(node);
    }

    public void outAPipedRulePipedRule(APipedRulePipedRule node)
    {
        defaultOut(node);
    }

    public void caseAPipedRulePipedRule(APipedRulePipedRule node)
    {
        inAPipedRulePipedRule(node);
        if(node.getRule() != null)
        {
            node.getRule().apply(this);
        }
        if(node.getTPipe() != null)
        {
            node.getTPipe().apply(this);
        }
        outAPipedRulePipedRule(node);
    }

    public void inAUpdaterule(AUpdaterule node)
    {
        defaultIn(node);
    }

    public void outAUpdaterule(AUpdaterule node)
    {
        defaultOut(node);
    }

    public void caseAUpdaterule(AUpdaterule node)
    {
        inAUpdaterule(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getFact() != null)
        {
            node.getFact().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getModifier() != null)
        {
            node.getModifier().apply(this);
        }
        outAUpdaterule(node);
    }

    public void inAAddModifier(AAddModifier node)
    {
        defaultIn(node);
    }

    public void outAAddModifier(AAddModifier node)
    {
        defaultOut(node);
    }

    public void caseAAddModifier(AAddModifier node)
    {
        inAAddModifier(node);
        if(node.getTAdd() != null)
        {
            node.getTAdd().apply(this);
        }
        outAAddModifier(node);
    }

    public void inADeleteModifier(ADeleteModifier node)
    {
        defaultIn(node);
    }

    public void outADeleteModifier(ADeleteModifier node)
    {
        defaultOut(node);
    }

    public void caseADeleteModifier(ADeleteModifier node)
    {
        inADeleteModifier(node);
        if(node.getTDelete() != null)
        {
            node.getTDelete().apply(this);
        }
        outADeleteModifier(node);
    }

    public void inAUpdateModifier(AUpdateModifier node)
    {
        defaultIn(node);
    }

    public void outAUpdateModifier(AUpdateModifier node)
    {
        defaultOut(node);
    }

    public void caseAUpdateModifier(AUpdateModifier node)
    {
        inAUpdateModifier(node);
        if(node.getTUpdate() != null)
        {
            node.getTUpdate().apply(this);
        }
        outAUpdateModifier(node);
    }

    public void inAFactPreferredFact(AFactPreferredFact node)
    {
        defaultIn(node);
    }

    public void outAFactPreferredFact(AFactPreferredFact node)
    {
        defaultOut(node);
    }

    public void caseAFactPreferredFact(AFactPreferredFact node)
    {
        inAFactPreferredFact(node);
        if(node.getFactUpdate() != null)
        {
            node.getFactUpdate().apply(this);
        }
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getTMemberof() != null)
        {
            node.getTMemberof().apply(this);
        }
        if(node.getAttrFact() != null)
        {
            node.getAttrFact().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactPreferredFact(node);
    }

    public void inAFactNonpreferredFact(AFactNonpreferredFact node)
    {
        defaultIn(node);
    }

    public void outAFactNonpreferredFact(AFactNonpreferredFact node)
    {
        defaultOut(node);
    }

    public void caseAFactNonpreferredFact(AFactNonpreferredFact node)
    {
        inAFactNonpreferredFact(node);
        if(node.getAttrFact() != null)
        {
            node.getAttrFact().apply(this);
        }
        if(node.getFactUpdate() != null)
        {
            node.getFactUpdate().apply(this);
        }
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getTMemberof() != null)
        {
            node.getTMemberof().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactNonpreferredFact(node);
    }

    public void inAFactMoleculeFact(AFactMoleculeFact node)
    {
        defaultIn(node);
    }

    public void outAFactMoleculeFact(AFactMoleculeFact node)
    {
        defaultOut(node);
    }

    public void caseAFactMoleculeFact(AFactMoleculeFact node)
    {
        inAFactMoleculeFact(node);
        if(node.getAttrFact() != null)
        {
            node.getAttrFact().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactMoleculeFact(node);
    }

    public void inAFactRelationFact(AFactRelationFact node)
    {
        defaultIn(node);
    }

    public void outAFactRelationFact(AFactRelationFact node)
    {
        defaultOut(node);
    }

    public void caseAFactRelationFact(AFactRelationFact node)
    {
        inAFactRelationFact(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getTermUpdates() != null)
        {
            node.getTermUpdates().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTAt() != null)
        {
            node.getTAt().apply(this);
        }
        outAFactRelationFact(node);
    }

    public void inAFactUpdate(AFactUpdate node)
    {
        defaultIn(node);
    }

    public void outAFactUpdate(AFactUpdate node)
    {
        defaultOut(node);
    }

    public void caseAFactUpdate(AFactUpdate node)
    {
        inAFactUpdate(node);
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getTMoveto() != null)
        {
            node.getTMoveto().apply(this);
        }
        outAFactUpdate(node);
    }

    public void inAAttrFact(AAttrFact node)
    {
        defaultIn(node);
    }

    public void outAAttrFact(AAttrFact node)
    {
        defaultOut(node);
    }

    public void caseAAttrFact(AAttrFact node)
    {
        inAAttrFact(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getAttrFactList() != null)
        {
            node.getAttrFactList().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        outAAttrFact(node);
    }

    public void inAAttrRelationAttrFactList(AAttrRelationAttrFactList node)
    {
        defaultIn(node);
    }

    public void outAAttrRelationAttrFactList(AAttrRelationAttrFactList node)
    {
        defaultOut(node);
    }

    public void caseAAttrRelationAttrFactList(AAttrRelationAttrFactList node)
    {
        inAAttrRelationAttrFactList(node);
        if(node.getFactUpdate() != null)
        {
            node.getFactUpdate().apply(this);
        }
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getTHasvalue() != null)
        {
            node.getTHasvalue().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAttrRelationAttrFactList(node);
    }

    public void inAAttrFactList(AAttrFactList node)
    {
        defaultIn(node);
    }

    public void outAAttrFactList(AAttrFactList node)
    {
        defaultOut(node);
    }

    public void caseAAttrFactList(AAttrFactList node)
    {
        inAAttrFactList(node);
        if(node.getFactUpdate() != null)
        {
            node.getFactUpdate().apply(this);
        }
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getTHasvalue() != null)
        {
            node.getTHasvalue().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAttrFactList() != null)
        {
            node.getAttrFactList().apply(this);
        }
        outAAttrFactList(node);
    }

    public void inAOneParamTermUpdates(AOneParamTermUpdates node)
    {
        defaultIn(node);
    }

    public void outAOneParamTermUpdates(AOneParamTermUpdates node)
    {
        defaultOut(node);
    }

    public void caseAOneParamTermUpdates(AOneParamTermUpdates node)
    {
        inAOneParamTermUpdates(node);
        if(node.getTermUpdate() != null)
        {
            node.getTermUpdate().apply(this);
        }
        outAOneParamTermUpdates(node);
    }

    public void inAMoreParamsTermUpdates(AMoreParamsTermUpdates node)
    {
        defaultIn(node);
    }

    public void outAMoreParamsTermUpdates(AMoreParamsTermUpdates node)
    {
        defaultOut(node);
    }

    public void caseAMoreParamsTermUpdates(AMoreParamsTermUpdates node)
    {
        inAMoreParamsTermUpdates(node);
        if(node.getTermUpdates() != null)
        {
            node.getTermUpdates().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTermUpdate() != null)
        {
            node.getTermUpdate().apply(this);
        }
        outAMoreParamsTermUpdates(node);
    }

    public void inASingleTermUpdate(ASingleTermUpdate node)
    {
        defaultIn(node);
    }

    public void outASingleTermUpdate(ASingleTermUpdate node)
    {
        defaultOut(node);
    }

    public void caseASingleTermUpdate(ASingleTermUpdate node)
    {
        inASingleTermUpdate(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASingleTermUpdate(node);
    }

    public void inAMoveTermUpdate(AMoveTermUpdate node)
    {
        defaultIn(node);
    }

    public void outAMoveTermUpdate(AMoveTermUpdate node)
    {
        defaultOut(node);
    }

    public void caseAMoveTermUpdate(AMoveTermUpdate node)
    {
        inAMoveTermUpdate(node);
        if(node.getNewterm() != null)
        {
            node.getNewterm().apply(this);
        }
        if(node.getTMoveto() != null)
        {
            node.getTMoveto().apply(this);
        }
        if(node.getOldterm() != null)
        {
            node.getOldterm().apply(this);
        }
        outAMoveTermUpdate(node);
    }

    public void inANewTermNewTerm(ANewTermNewTerm node)
    {
        defaultIn(node);
    }

    public void outANewTermNewTerm(ANewTermNewTerm node)
    {
        defaultOut(node);
    }

    public void caseANewTermNewTerm(ANewTermNewTerm node)
    {
        inANewTermNewTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getTMoveto() != null)
        {
            node.getTMoveto().apply(this);
        }
        outANewTermNewTerm(node);
    }

    public void inARestrictedLeCondition(ARestrictedLeCondition node)
    {
        defaultIn(node);
    }

    public void outARestrictedLeCondition(ARestrictedLeCondition node)
    {
        defaultOut(node);
    }

    public void caseARestrictedLeCondition(ARestrictedLeCondition node)
    {
        inARestrictedLeCondition(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outARestrictedLeCondition(node);
    }

    public void inAOrchestrationTransitions(AOrchestrationTransitions node)
    {
        defaultIn(node);
    }

    public void outAOrchestrationTransitions(AOrchestrationTransitions node)
    {
        defaultOut(node);
    }

    public void caseAOrchestrationTransitions(AOrchestrationTransitions node)
    {
        inAOrchestrationTransitions(node);
        {
            Object temp[] = node.getOrchestrationRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((POrchestrationRule) temp[i]).apply(this);
            }
        }
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTTransitions() != null)
        {
            node.getTTransitions().apply(this);
        }
        outAOrchestrationTransitions(node);
    }

    public void inAOrchIfOrchestrationRule(AOrchIfOrchestrationRule node)
    {
        defaultIn(node);
    }

    public void outAOrchIfOrchestrationRule(AOrchIfOrchestrationRule node)
    {
        defaultOut(node);
    }

    public void caseAOrchIfOrchestrationRule(AOrchIfOrchestrationRule node)
    {
        inAOrchIfOrchestrationRule(node);
        if(node.getOrchPipedRule() != null)
        {
            node.getOrchPipedRule().apply(this);
        }
        if(node.getTEndif() != null)
        {
            node.getTEndif().apply(this);
        }
        {
            Object temp[] = node.getOrchestrationRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((POrchestrationRule) temp[i]).apply(this);
            }
        }
        if(node.getTThen() != null)
        {
            node.getTThen().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getTIf() != null)
        {
            node.getTIf().apply(this);
        }
        outAOrchIfOrchestrationRule(node);
    }

    public void inAOrchForallOrchestrationRule(AOrchForallOrchestrationRule node)
    {
        defaultIn(node);
    }

    public void outAOrchForallOrchestrationRule(AOrchForallOrchestrationRule node)
    {
        defaultOut(node);
    }

    public void caseAOrchForallOrchestrationRule(AOrchForallOrchestrationRule node)
    {
        inAOrchForallOrchestrationRule(node);
        if(node.getOrchPipedRule() != null)
        {
            node.getOrchPipedRule().apply(this);
        }
        if(node.getTEndforall() != null)
        {
            node.getTEndforall().apply(this);
        }
        {
            Object temp[] = node.getOrchestrationRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((POrchestrationRule) temp[i]).apply(this);
            }
        }
        if(node.getTDo() != null)
        {
            node.getTDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getTWith() != null)
        {
            node.getTWith().apply(this);
        }
        if(node.getVariablelist() != null)
        {
            node.getVariablelist().apply(this);
        }
        if(node.getTForall() != null)
        {
            node.getTForall().apply(this);
        }
        outAOrchForallOrchestrationRule(node);
    }

    public void inAOrchChooseOrchestrationRule(AOrchChooseOrchestrationRule node)
    {
        defaultIn(node);
    }

    public void outAOrchChooseOrchestrationRule(AOrchChooseOrchestrationRule node)
    {
        defaultOut(node);
    }

    public void caseAOrchChooseOrchestrationRule(AOrchChooseOrchestrationRule node)
    {
        inAOrchChooseOrchestrationRule(node);
        if(node.getOrchPipedRule() != null)
        {
            node.getOrchPipedRule().apply(this);
        }
        if(node.getTEndchoose() != null)
        {
            node.getTEndchoose().apply(this);
        }
        {
            Object temp[] = node.getOrchestrationRule().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((POrchestrationRule) temp[i]).apply(this);
            }
        }
        if(node.getTDo() != null)
        {
            node.getTDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getTWith() != null)
        {
            node.getTWith().apply(this);
        }
        if(node.getVariablelist() != null)
        {
            node.getVariablelist().apply(this);
        }
        if(node.getTChoose() != null)
        {
            node.getTChoose().apply(this);
        }
        outAOrchChooseOrchestrationRule(node);
    }

    public void inAOrchUpdatesOrchestrationRule(AOrchUpdatesOrchestrationRule node)
    {
        defaultIn(node);
    }

    public void outAOrchUpdatesOrchestrationRule(AOrchUpdatesOrchestrationRule node)
    {
        defaultOut(node);
    }

    public void caseAOrchUpdatesOrchestrationRule(AOrchUpdatesOrchestrationRule node)
    {
        inAOrchUpdatesOrchestrationRule(node);
        if(node.getOrchPipedRule() != null)
        {
            node.getOrchPipedRule().apply(this);
        }
        if(node.getUpdaterule() != null)
        {
            node.getUpdaterule().apply(this);
        }
        outAOrchUpdatesOrchestrationRule(node);
    }

    public void inAOrchPerformOrchestrationRule(AOrchPerformOrchestrationRule node)
    {
        defaultIn(node);
    }

    public void outAOrchPerformOrchestrationRule(AOrchPerformOrchestrationRule node)
    {
        defaultOut(node);
    }

    public void caseAOrchPerformOrchestrationRule(AOrchPerformOrchestrationRule node)
    {
        inAOrchPerformOrchestrationRule(node);
        if(node.getOrchPerformAlt() != null)
        {
            node.getOrchPerformAlt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTPerform() != null)
        {
            node.getTPerform().apply(this);
        }
        outAOrchPerformOrchestrationRule(node);
    }

    public void inAOrchPerformAchievegoalOrchPerformAlt(AOrchPerformAchievegoalOrchPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAOrchPerformAchievegoalOrchPerformAlt(AOrchPerformAchievegoalOrchPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAOrchPerformAchievegoalOrchPerformAlt(AOrchPerformAchievegoalOrchPerformAlt node)
    {
        inAOrchPerformAchievegoalOrchPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTAchievegoal() != null)
        {
            node.getTAchievegoal().apply(this);
        }
        outAOrchPerformAchievegoalOrchPerformAlt(node);
    }

    public void inAOrchInvokeServiceOrchPerformAlt(AOrchInvokeServiceOrchPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAOrchInvokeServiceOrchPerformAlt(AOrchInvokeServiceOrchPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAOrchInvokeServiceOrchPerformAlt(AOrchInvokeServiceOrchPerformAlt node)
    {
        inAOrchInvokeServiceOrchPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTInvokeservice() != null)
        {
            node.getTInvokeservice().apply(this);
        }
        outAOrchInvokeServiceOrchPerformAlt(node);
    }

    public void inAOrchApplyMediationOrchPerformAlt(AOrchApplyMediationOrchPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAOrchApplyMediationOrchPerformAlt(AOrchApplyMediationOrchPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAOrchApplyMediationOrchPerformAlt(AOrchApplyMediationOrchPerformAlt node)
    {
        inAOrchApplyMediationOrchPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTApplymediation() != null)
        {
            node.getTApplymediation().apply(this);
        }
        outAOrchApplyMediationOrchPerformAlt(node);
    }

    public void inAOrchPerformReceiveOrchPerformAlt(AOrchPerformReceiveOrchPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAOrchPerformReceiveOrchPerformAlt(AOrchPerformReceiveOrchPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAOrchPerformReceiveOrchPerformAlt(AOrchPerformReceiveOrchPerformAlt node)
    {
        inAOrchPerformReceiveOrchPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTSource() != null)
        {
            node.getTSource().apply(this);
        }
        if(node.getTReceive() != null)
        {
            node.getTReceive().apply(this);
        }
        outAOrchPerformReceiveOrchPerformAlt(node);
    }

    public void inAOrchPerformSendOrchPerformAlt(AOrchPerformSendOrchPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAOrchPerformSendOrchPerformAlt(AOrchPerformSendOrchPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAOrchPerformSendOrchPerformAlt(AOrchPerformSendOrchPerformAlt node)
    {
        inAOrchPerformSendOrchPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTTarget() != null)
        {
            node.getTTarget().apply(this);
        }
        if(node.getTSend() != null)
        {
            node.getTSend().apply(this);
        }
        outAOrchPerformSendOrchPerformAlt(node);
    }

    public void inAPipedRuleOrchPipedRule(APipedRuleOrchPipedRule node)
    {
        defaultIn(node);
    }

    public void outAPipedRuleOrchPipedRule(APipedRuleOrchPipedRule node)
    {
        defaultOut(node);
    }

    public void caseAPipedRuleOrchPipedRule(APipedRuleOrchPipedRule node)
    {
        inAPipedRuleOrchPipedRule(node);
        if(node.getOrchestrationRule() != null)
        {
            node.getOrchestrationRule().apply(this);
        }
        if(node.getTPipe() != null)
        {
            node.getTPipe().apply(this);
        }
        outAPipedRuleOrchPipedRule(node);
    }

    public void inAOntology(AOntology node)
    {
        defaultIn(node);
    }

    public void outAOntology(AOntology node)
    {
        defaultOut(node);
    }

    public void caseAOntology(AOntology node)
    {
        inAOntology(node);
        {
            Object temp[] = node.getOntologyElement().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((POntologyElement) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getHeader().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PHeader) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTOntology() != null)
        {
            node.getTOntology().apply(this);
        }
        outAOntology(node);
    }

    public void inAConceptOntologyElement(AConceptOntologyElement node)
    {
        defaultIn(node);
    }

    public void outAConceptOntologyElement(AConceptOntologyElement node)
    {
        defaultOut(node);
    }

    public void caseAConceptOntologyElement(AConceptOntologyElement node)
    {
        inAConceptOntologyElement(node);
        if(node.getConcept() != null)
        {
            node.getConcept().apply(this);
        }
        outAConceptOntologyElement(node);
    }

    public void inAInstanceOntologyElement(AInstanceOntologyElement node)
    {
        defaultIn(node);
    }

    public void outAInstanceOntologyElement(AInstanceOntologyElement node)
    {
        defaultOut(node);
    }

    public void caseAInstanceOntologyElement(AInstanceOntologyElement node)
    {
        inAInstanceOntologyElement(node);
        if(node.getInstance() != null)
        {
            node.getInstance().apply(this);
        }
        outAInstanceOntologyElement(node);
    }

    public void inARelationOntologyElement(ARelationOntologyElement node)
    {
        defaultIn(node);
    }

    public void outARelationOntologyElement(ARelationOntologyElement node)
    {
        defaultOut(node);
    }

    public void caseARelationOntologyElement(ARelationOntologyElement node)
    {
        inARelationOntologyElement(node);
        if(node.getRelation() != null)
        {
            node.getRelation().apply(this);
        }
        outARelationOntologyElement(node);
    }

    public void inARelationinstanceOntologyElement(ARelationinstanceOntologyElement node)
    {
        defaultIn(node);
    }

    public void outARelationinstanceOntologyElement(ARelationinstanceOntologyElement node)
    {
        defaultOut(node);
    }

    public void caseARelationinstanceOntologyElement(ARelationinstanceOntologyElement node)
    {
        inARelationinstanceOntologyElement(node);
        if(node.getRelationinstance() != null)
        {
            node.getRelationinstance().apply(this);
        }
        outARelationinstanceOntologyElement(node);
    }

    public void inAAxiomOntologyElement(AAxiomOntologyElement node)
    {
        defaultIn(node);
    }

    public void outAAxiomOntologyElement(AAxiomOntologyElement node)
    {
        defaultOut(node);
    }

    public void caseAAxiomOntologyElement(AAxiomOntologyElement node)
    {
        inAAxiomOntologyElement(node);
        if(node.getAxiom() != null)
        {
            node.getAxiom().apply(this);
        }
        outAAxiomOntologyElement(node);
    }

    public void inAConcept(AConcept node)
    {
        defaultIn(node);
    }

    public void outAConcept(AConcept node)
    {
        defaultOut(node);
    }

    public void caseAConcept(AConcept node)
    {
        inAConcept(node);
        {
            Object temp[] = node.getAttribute().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAttribute) temp[i]).apply(this);
            }
        }
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getSuperconcept() != null)
        {
            node.getSuperconcept().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTConcept() != null)
        {
            node.getTConcept().apply(this);
        }
        outAConcept(node);
    }

    public void inASuperconcept(ASuperconcept node)
    {
        defaultIn(node);
    }

    public void outASuperconcept(ASuperconcept node)
    {
        defaultOut(node);
    }

    public void caseASuperconcept(ASuperconcept node)
    {
        inASuperconcept(node);
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getTSubconcept() != null)
        {
            node.getTSubconcept().apply(this);
        }
        outASuperconcept(node);
    }

    public void inAOpenWorldAttType(AOpenWorldAttType node)
    {
        defaultIn(node);
    }

    public void outAOpenWorldAttType(AOpenWorldAttType node)
    {
        defaultOut(node);
    }

    public void caseAOpenWorldAttType(AOpenWorldAttType node)
    {
        inAOpenWorldAttType(node);
        if(node.getTOftype() != null)
        {
            node.getTOftype().apply(this);
        }
        outAOpenWorldAttType(node);
    }

    public void inAClosedWorldAttType(AClosedWorldAttType node)
    {
        defaultIn(node);
    }

    public void outAClosedWorldAttType(AClosedWorldAttType node)
    {
        defaultOut(node);
    }

    public void caseAClosedWorldAttType(AClosedWorldAttType node)
    {
        inAClosedWorldAttType(node);
        if(node.getTImpliestype() != null)
        {
            node.getTImpliestype().apply(this);
        }
        outAClosedWorldAttType(node);
    }

    public void inAAttribute(AAttribute node)
    {
        defaultIn(node);
    }

    public void outAAttribute(AAttribute node)
    {
        defaultOut(node);
    }

    public void caseAAttribute(AAttribute node)
    {
        inAAttribute(node);
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getCardinality() != null)
        {
            node.getCardinality().apply(this);
        }
        if(node.getAttType() != null)
        {
            node.getAttType().apply(this);
        }
        {
            Object temp[] = node.getAttributefeature().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAttributefeature) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAttribute(node);
    }

    public void inACardinality(ACardinality node)
    {
        defaultIn(node);
    }

    public void outACardinality(ACardinality node)
    {
        defaultOut(node);
    }

    public void caseACardinality(ACardinality node)
    {
        inACardinality(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getCardinalityNumber() != null)
        {
            node.getCardinalityNumber().apply(this);
        }
        if(node.getPosInteger() != null)
        {
            node.getPosInteger().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outACardinality(node);
    }

    public void inAFiniteCardinalityCardinalityNumber(AFiniteCardinalityCardinalityNumber node)
    {
        defaultIn(node);
    }

    public void outAFiniteCardinalityCardinalityNumber(AFiniteCardinalityCardinalityNumber node)
    {
        defaultOut(node);
    }

    public void caseAFiniteCardinalityCardinalityNumber(AFiniteCardinalityCardinalityNumber node)
    {
        inAFiniteCardinalityCardinalityNumber(node);
        if(node.getPosInteger() != null)
        {
            node.getPosInteger().apply(this);
        }
        outAFiniteCardinalityCardinalityNumber(node);
    }

    public void inAInfiniteCardinalityCardinalityNumber(AInfiniteCardinalityCardinalityNumber node)
    {
        defaultIn(node);
    }

    public void outAInfiniteCardinalityCardinalityNumber(AInfiniteCardinalityCardinalityNumber node)
    {
        defaultOut(node);
    }

    public void caseAInfiniteCardinalityCardinalityNumber(AInfiniteCardinalityCardinalityNumber node)
    {
        inAInfiniteCardinalityCardinalityNumber(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAInfiniteCardinalityCardinalityNumber(node);
    }

    public void inATransitiveAttributefeature(ATransitiveAttributefeature node)
    {
        defaultIn(node);
    }

    public void outATransitiveAttributefeature(ATransitiveAttributefeature node)
    {
        defaultOut(node);
    }

    public void caseATransitiveAttributefeature(ATransitiveAttributefeature node)
    {
        inATransitiveAttributefeature(node);
        if(node.getTTransitive() != null)
        {
            node.getTTransitive().apply(this);
        }
        outATransitiveAttributefeature(node);
    }

    public void inASymmetricAttributefeature(ASymmetricAttributefeature node)
    {
        defaultIn(node);
    }

    public void outASymmetricAttributefeature(ASymmetricAttributefeature node)
    {
        defaultOut(node);
    }

    public void caseASymmetricAttributefeature(ASymmetricAttributefeature node)
    {
        inASymmetricAttributefeature(node);
        if(node.getTSymmetric() != null)
        {
            node.getTSymmetric().apply(this);
        }
        outASymmetricAttributefeature(node);
    }

    public void inAInverseAttributefeature(AInverseAttributefeature node)
    {
        defaultIn(node);
    }

    public void outAInverseAttributefeature(AInverseAttributefeature node)
    {
        defaultOut(node);
    }

    public void caseAInverseAttributefeature(AInverseAttributefeature node)
    {
        inAInverseAttributefeature(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getTInverseof() != null)
        {
            node.getTInverseof().apply(this);
        }
        outAInverseAttributefeature(node);
    }

    public void inAReflexiveAttributefeature(AReflexiveAttributefeature node)
    {
        defaultIn(node);
    }

    public void outAReflexiveAttributefeature(AReflexiveAttributefeature node)
    {
        defaultOut(node);
    }

    public void caseAReflexiveAttributefeature(AReflexiveAttributefeature node)
    {
        inAReflexiveAttributefeature(node);
        if(node.getTReflexive() != null)
        {
            node.getTReflexive().apply(this);
        }
        outAReflexiveAttributefeature(node);
    }

    public void inAInstance(AInstance node)
    {
        defaultIn(node);
    }

    public void outAInstance(AInstance node)
    {
        defaultOut(node);
    }

    public void caseAInstance(AInstance node)
    {
        inAInstance(node);
        {
            Object temp[] = node.getAttributevalue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAttributevalue) temp[i]).apply(this);
            }
        }
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getMemberof() != null)
        {
            node.getMemberof().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTInstance() != null)
        {
            node.getTInstance().apply(this);
        }
        outAInstance(node);
    }

    public void inAMemberof(AMemberof node)
    {
        defaultIn(node);
    }

    public void outAMemberof(AMemberof node)
    {
        defaultOut(node);
    }

    public void caseAMemberof(AMemberof node)
    {
        inAMemberof(node);
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getTMemberof() != null)
        {
            node.getTMemberof().apply(this);
        }
        outAMemberof(node);
    }

    public void inAAttributevalue(AAttributevalue node)
    {
        defaultIn(node);
    }

    public void outAAttributevalue(AAttributevalue node)
    {
        defaultOut(node);
    }

    public void caseAAttributevalue(AAttributevalue node)
    {
        inAAttributevalue(node);
        if(node.getValuelist() != null)
        {
            node.getValuelist().apply(this);
        }
        if(node.getTHasvalue() != null)
        {
            node.getTHasvalue().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAttributevalue(node);
    }

    public void inARelation(ARelation node)
    {
        defaultIn(node);
    }

    public void outARelation(ARelation node)
    {
        defaultOut(node);
    }

    public void caseARelation(ARelation node)
    {
        inARelation(node);
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getSuperrelation() != null)
        {
            node.getSuperrelation().apply(this);
        }
        if(node.getParamtyping() != null)
        {
            node.getParamtyping().apply(this);
        }
        if(node.getArity() != null)
        {
            node.getArity().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTRelation() != null)
        {
            node.getTRelation().apply(this);
        }
        outARelation(node);
    }

    public void inAParamtyping(AParamtyping node)
    {
        defaultIn(node);
    }

    public void outAParamtyping(AParamtyping node)
    {
        defaultOut(node);
    }

    public void caseAParamtyping(AParamtyping node)
    {
        inAParamtyping(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        {
            Object temp[] = node.getMoreparamtype().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreparamtype) temp[i]).apply(this);
            }
        }
        if(node.getParamtype() != null)
        {
            node.getParamtype().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAParamtyping(node);
    }

    public void inAParamtype(AParamtype node)
    {
        defaultIn(node);
    }

    public void outAParamtype(AParamtype node)
    {
        defaultOut(node);
    }

    public void caseAParamtype(AParamtype node)
    {
        inAParamtype(node);
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getAttType() != null)
        {
            node.getAttType().apply(this);
        }
        outAParamtype(node);
    }

    public void inAMoreparamtype(AMoreparamtype node)
    {
        defaultIn(node);
    }

    public void outAMoreparamtype(AMoreparamtype node)
    {
        defaultOut(node);
    }

    public void caseAMoreparamtype(AMoreparamtype node)
    {
        inAMoreparamtype(node);
        if(node.getParamtype() != null)
        {
            node.getParamtype().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMoreparamtype(node);
    }

    public void inASuperrelation(ASuperrelation node)
    {
        defaultIn(node);
    }

    public void outASuperrelation(ASuperrelation node)
    {
        defaultOut(node);
    }

    public void caseASuperrelation(ASuperrelation node)
    {
        inASuperrelation(node);
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getTSubrelation() != null)
        {
            node.getTSubrelation().apply(this);
        }
        outASuperrelation(node);
    }

    public void inAArity(AArity node)
    {
        defaultIn(node);
    }

    public void outAArity(AArity node)
    {
        defaultOut(node);
    }

    public void caseAArity(AArity node)
    {
        inAArity(node);
        if(node.getPosInteger() != null)
        {
            node.getPosInteger().apply(this);
        }
        if(node.getDivOp() != null)
        {
            node.getDivOp().apply(this);
        }
        outAArity(node);
    }

    public void inARelationinstance(ARelationinstance node)
    {
        defaultIn(node);
    }

    public void outARelationinstance(ARelationinstance node)
    {
        defaultOut(node);
    }

    public void caseARelationinstance(ARelationinstance node)
    {
        inARelationinstance(node);
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        {
            Object temp[] = node.getMorevalues().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMorevalues) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getRelation() != null)
        {
            node.getRelation().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTRelationInstance() != null)
        {
            node.getTRelationInstance().apply(this);
        }
        outARelationinstance(node);
    }

    public void inAAxiom(AAxiom node)
    {
        defaultIn(node);
    }

    public void outAAxiom(AAxiom node)
    {
        defaultOut(node);
    }

    public void caseAAxiom(AAxiom node)
    {
        inAAxiom(node);
        if(node.getAxiomdefinition() != null)
        {
            node.getAxiomdefinition().apply(this);
        }
        if(node.getTAxiom() != null)
        {
            node.getTAxiom().apply(this);
        }
        outAAxiom(node);
    }

    public void inAUseAxiomAxiomdefinition(AUseAxiomAxiomdefinition node)
    {
        defaultIn(node);
    }

    public void outAUseAxiomAxiomdefinition(AUseAxiomAxiomdefinition node)
    {
        defaultOut(node);
    }

    public void caseAUseAxiomAxiomdefinition(AUseAxiomAxiomdefinition node)
    {
        inAUseAxiomAxiomdefinition(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAUseAxiomAxiomdefinition(node);
    }

    public void inANfpAxiomAxiomdefinition(ANfpAxiomAxiomdefinition node)
    {
        defaultIn(node);
    }

    public void outANfpAxiomAxiomdefinition(ANfpAxiomAxiomdefinition node)
    {
        defaultOut(node);
    }

    public void caseANfpAxiomAxiomdefinition(ANfpAxiomAxiomdefinition node)
    {
        inANfpAxiomAxiomdefinition(node);
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANfpAxiomAxiomdefinition(node);
    }

    public void inADefinedAxiomAxiomdefinition(ADefinedAxiomAxiomdefinition node)
    {
        defaultIn(node);
    }

    public void outADefinedAxiomAxiomdefinition(ADefinedAxiomAxiomdefinition node)
    {
        defaultOut(node);
    }

    public void caseADefinedAxiomAxiomdefinition(ADefinedAxiomAxiomdefinition node)
    {
        inADefinedAxiomAxiomdefinition(node);
        if(node.getLogDefinition() != null)
        {
            node.getLogDefinition().apply(this);
        }
        if(node.getNfp() != null)
        {
            node.getNfp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADefinedAxiomAxiomdefinition(node);
    }

    public void inALogDefinition(ALogDefinition node)
    {
        defaultIn(node);
    }

    public void outALogDefinition(ALogDefinition node)
    {
        defaultOut(node);
    }

    public void caseALogDefinition(ALogDefinition node)
    {
        inALogDefinition(node);
        {
            Object temp[] = node.getLogExpr().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PLogExpr) temp[i]).apply(this);
            }
        }
        if(node.getTDefinedby() != null)
        {
            node.getTDefinedby().apply(this);
        }
        outALogDefinition(node);
    }

    public void inALpRuleLogExpr(ALpRuleLogExpr node)
    {
        defaultIn(node);
    }

    public void outALpRuleLogExpr(ALpRuleLogExpr node)
    {
        defaultOut(node);
    }

    public void caseALpRuleLogExpr(ALpRuleLogExpr node)
    {
        inALpRuleLogExpr(node);
        if(node.getEndpoint() != null)
        {
            node.getEndpoint().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getTImpliedByLp() != null)
        {
            node.getTImpliedByLp().apply(this);
        }
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        outALpRuleLogExpr(node);
    }

    public void inAConstraintLogExpr(AConstraintLogExpr node)
    {
        defaultIn(node);
    }

    public void outAConstraintLogExpr(AConstraintLogExpr node)
    {
        defaultOut(node);
    }

    public void caseAConstraintLogExpr(AConstraintLogExpr node)
    {
        inAConstraintLogExpr(node);
        if(node.getEndpoint() != null)
        {
            node.getEndpoint().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getTConstraint() != null)
        {
            node.getTConstraint().apply(this);
        }
        outAConstraintLogExpr(node);
    }

    public void inAOtherExpressionLogExpr(AOtherExpressionLogExpr node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLogExpr(AOtherExpressionLogExpr node)
    {
        defaultOut(node);
    }

    public void caseAOtherExpressionLogExpr(AOtherExpressionLogExpr node)
    {
        inAOtherExpressionLogExpr(node);
        if(node.getEndpoint() != null)
        {
            node.getEndpoint().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOtherExpressionLogExpr(node);
    }

    public void inAImplicationExpr(AImplicationExpr node)
    {
        defaultIn(node);
    }

    public void outAImplicationExpr(AImplicationExpr node)
    {
        defaultOut(node);
    }

    public void caseAImplicationExpr(AImplicationExpr node)
    {
        inAImplicationExpr(node);
        if(node.getDisjunction() != null)
        {
            node.getDisjunction().apply(this);
        }
        if(node.getImplyOp() != null)
        {
            node.getImplyOp().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAImplicationExpr(node);
    }

    public void inADisjunctionExpr(ADisjunctionExpr node)
    {
        defaultIn(node);
    }

    public void outADisjunctionExpr(ADisjunctionExpr node)
    {
        defaultOut(node);
    }

    public void caseADisjunctionExpr(ADisjunctionExpr node)
    {
        inADisjunctionExpr(node);
        if(node.getDisjunction() != null)
        {
            node.getDisjunction().apply(this);
        }
        outADisjunctionExpr(node);
    }

    public void inAConjunctionDisjunction(AConjunctionDisjunction node)
    {
        defaultIn(node);
    }

    public void outAConjunctionDisjunction(AConjunctionDisjunction node)
    {
        defaultOut(node);
    }

    public void caseAConjunctionDisjunction(AConjunctionDisjunction node)
    {
        inAConjunctionDisjunction(node);
        if(node.getConjunction() != null)
        {
            node.getConjunction().apply(this);
        }
        outAConjunctionDisjunction(node);
    }

    public void inADisjunction(ADisjunction node)
    {
        defaultIn(node);
    }

    public void outADisjunction(ADisjunction node)
    {
        defaultOut(node);
    }

    public void caseADisjunction(ADisjunction node)
    {
        inADisjunction(node);
        if(node.getConjunction() != null)
        {
            node.getConjunction().apply(this);
        }
        if(node.getTOr() != null)
        {
            node.getTOr().apply(this);
        }
        if(node.getDisjunction() != null)
        {
            node.getDisjunction().apply(this);
        }
        outADisjunction(node);
    }

    public void inASubexprConjunction(ASubexprConjunction node)
    {
        defaultIn(node);
    }

    public void outASubexprConjunction(ASubexprConjunction node)
    {
        defaultOut(node);
    }

    public void caseASubexprConjunction(ASubexprConjunction node)
    {
        inASubexprConjunction(node);
        if(node.getSubexpr() != null)
        {
            node.getSubexpr().apply(this);
        }
        outASubexprConjunction(node);
    }

    public void inAConjunction(AConjunction node)
    {
        defaultIn(node);
    }

    public void outAConjunction(AConjunction node)
    {
        defaultOut(node);
    }

    public void caseAConjunction(AConjunction node)
    {
        inAConjunction(node);
        if(node.getSubexpr() != null)
        {
            node.getSubexpr().apply(this);
        }
        if(node.getTAnd() != null)
        {
            node.getTAnd().apply(this);
        }
        if(node.getConjunction() != null)
        {
            node.getConjunction().apply(this);
        }
        outAConjunction(node);
    }

    public void inANegatedSubexpr(ANegatedSubexpr node)
    {
        defaultIn(node);
    }

    public void outANegatedSubexpr(ANegatedSubexpr node)
    {
        defaultOut(node);
    }

    public void caseANegatedSubexpr(ANegatedSubexpr node)
    {
        inANegatedSubexpr(node);
        if(node.getSubexpr() != null)
        {
            node.getSubexpr().apply(this);
        }
        if(node.getTNot() != null)
        {
            node.getTNot().apply(this);
        }
        outANegatedSubexpr(node);
    }

    public void inASimpleSubexpr(ASimpleSubexpr node)
    {
        defaultIn(node);
    }

    public void outASimpleSubexpr(ASimpleSubexpr node)
    {
        defaultOut(node);
    }

    public void caseASimpleSubexpr(ASimpleSubexpr node)
    {
        inASimpleSubexpr(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outASimpleSubexpr(node);
    }

    public void inAComplexSubexpr(AComplexSubexpr node)
    {
        defaultIn(node);
    }

    public void outAComplexSubexpr(AComplexSubexpr node)
    {
        defaultOut(node);
    }

    public void caseAComplexSubexpr(AComplexSubexpr node)
    {
        inAComplexSubexpr(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAComplexSubexpr(node);
    }

    public void inAQuantifiedSubexpr(AQuantifiedSubexpr node)
    {
        defaultIn(node);
    }

    public void outAQuantifiedSubexpr(AQuantifiedSubexpr node)
    {
        defaultOut(node);
    }

    public void caseAQuantifiedSubexpr(AQuantifiedSubexpr node)
    {
        inAQuantifiedSubexpr(node);
        if(node.getQuantified() != null)
        {
            node.getQuantified().apply(this);
        }
        outAQuantifiedSubexpr(node);
    }

    public void inAQuantified(AQuantified node)
    {
        defaultIn(node);
    }

    public void outAQuantified(AQuantified node)
    {
        defaultOut(node);
    }

    public void caseAQuantified(AQuantified node)
    {
        inAQuantified(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getVariables() != null)
        {
            node.getVariables().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getQuantifierKey() != null)
        {
            node.getQuantifierKey().apply(this);
        }
        outAQuantified(node);
    }

    public void inAMoleculeSimple(AMoleculeSimple node)
    {
        defaultIn(node);
    }

    public void outAMoleculeSimple(AMoleculeSimple node)
    {
        defaultOut(node);
    }

    public void caseAMoleculeSimple(AMoleculeSimple node)
    {
        inAMoleculeSimple(node);
        if(node.getMolecule() != null)
        {
            node.getMolecule().apply(this);
        }
        outAMoleculeSimple(node);
    }

    public void inAComparisonSimple(AComparisonSimple node)
    {
        defaultIn(node);
    }

    public void outAComparisonSimple(AComparisonSimple node)
    {
        defaultOut(node);
    }

    public void caseAComparisonSimple(AComparisonSimple node)
    {
        inAComparisonSimple(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAComparisonSimple(node);
    }

    public void inAAtomSimple(AAtomSimple node)
    {
        defaultIn(node);
    }

    public void outAAtomSimple(AAtomSimple node)
    {
        defaultOut(node);
    }

    public void caseAAtomSimple(AAtomSimple node)
    {
        inAAtomSimple(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAtomSimple(node);
    }

    public void inAConceptMoleculePreferredMolecule(AConceptMoleculePreferredMolecule node)
    {
        defaultIn(node);
    }

    public void outAConceptMoleculePreferredMolecule(AConceptMoleculePreferredMolecule node)
    {
        defaultOut(node);
    }

    public void caseAConceptMoleculePreferredMolecule(AConceptMoleculePreferredMolecule node)
    {
        inAConceptMoleculePreferredMolecule(node);
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getCptOp() != null)
        {
            node.getCptOp().apply(this);
        }
        if(node.getAttrSpecification() != null)
        {
            node.getAttrSpecification().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAConceptMoleculePreferredMolecule(node);
    }

    public void inAConceptMoleculeNonpreferredMolecule(AConceptMoleculeNonpreferredMolecule node)
    {
        defaultIn(node);
    }

    public void outAConceptMoleculeNonpreferredMolecule(AConceptMoleculeNonpreferredMolecule node)
    {
        defaultOut(node);
    }

    public void caseAConceptMoleculeNonpreferredMolecule(AConceptMoleculeNonpreferredMolecule node)
    {
        inAConceptMoleculeNonpreferredMolecule(node);
        if(node.getAttrSpecification() != null)
        {
            node.getAttrSpecification().apply(this);
        }
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getCptOp() != null)
        {
            node.getCptOp().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAConceptMoleculeNonpreferredMolecule(node);
    }

    public void inAAttributeMoleculeMolecule(AAttributeMoleculeMolecule node)
    {
        defaultIn(node);
    }

    public void outAAttributeMoleculeMolecule(AAttributeMoleculeMolecule node)
    {
        defaultOut(node);
    }

    public void caseAAttributeMoleculeMolecule(AAttributeMoleculeMolecule node)
    {
        inAAttributeMoleculeMolecule(node);
        if(node.getAttrSpecification() != null)
        {
            node.getAttrSpecification().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAttributeMoleculeMolecule(node);
    }

    public void inAAttrSpecification(AAttrSpecification node)
    {
        defaultIn(node);
    }

    public void outAAttrSpecification(AAttrSpecification node)
    {
        defaultOut(node);
    }

    public void caseAAttrSpecification(AAttrSpecification node)
    {
        inAAttrSpecification(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getAttrRelList() != null)
        {
            node.getAttrRelList().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        outAAttrSpecification(node);
    }

    public void inAAttrRelationAttrRelList(AAttrRelationAttrRelList node)
    {
        defaultIn(node);
    }

    public void outAAttrRelationAttrRelList(AAttrRelationAttrRelList node)
    {
        defaultOut(node);
    }

    public void caseAAttrRelationAttrRelList(AAttrRelationAttrRelList node)
    {
        inAAttrRelationAttrRelList(node);
        if(node.getAttrRelation() != null)
        {
            node.getAttrRelation().apply(this);
        }
        outAAttrRelationAttrRelList(node);
    }

    public void inAAttrRelList(AAttrRelList node)
    {
        defaultIn(node);
    }

    public void outAAttrRelList(AAttrRelList node)
    {
        defaultOut(node);
    }

    public void caseAAttrRelList(AAttrRelList node)
    {
        inAAttrRelList(node);
        if(node.getAttrRelation() != null)
        {
            node.getAttrRelation().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAttrRelList() != null)
        {
            node.getAttrRelList().apply(this);
        }
        outAAttrRelList(node);
    }

    public void inAAttrDefAttrRelation(AAttrDefAttrRelation node)
    {
        defaultIn(node);
    }

    public void outAAttrDefAttrRelation(AAttrDefAttrRelation node)
    {
        defaultOut(node);
    }

    public void caseAAttrDefAttrRelation(AAttrDefAttrRelation node)
    {
        inAAttrDefAttrRelation(node);
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getAttrDefOp() != null)
        {
            node.getAttrDefOp().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAttrDefAttrRelation(node);
    }

    public void inAAttrValAttrRelation(AAttrValAttrRelation node)
    {
        defaultIn(node);
    }

    public void outAAttrValAttrRelation(AAttrValAttrRelation node)
    {
        defaultOut(node);
    }

    public void caseAAttrValAttrRelation(AAttrValAttrRelation node)
    {
        inAAttrValAttrRelation(node);
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getTHasvalue() != null)
        {
            node.getTHasvalue().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAttrValAttrRelation(node);
    }

    public void inAComparison(AComparison node)
    {
        defaultIn(node);
    }

    public void outAComparison(AComparison node)
    {
        defaultOut(node);
    }

    public void caseAComparison(AComparison node)
    {
        inAComparison(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getCompOp() != null)
        {
            node.getCompOp().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAComparison(node);
    }

    public void inAParametrizedFunctionsymbol(AParametrizedFunctionsymbol node)
    {
        defaultIn(node);
    }

    public void outAParametrizedFunctionsymbol(AParametrizedFunctionsymbol node)
    {
        defaultOut(node);
    }

    public void caseAParametrizedFunctionsymbol(AParametrizedFunctionsymbol node)
    {
        inAParametrizedFunctionsymbol(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getTerms() != null)
        {
            node.getTerms().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametrizedFunctionsymbol(node);
    }

    public void inAMathFunctionsymbol(AMathFunctionsymbol node)
    {
        defaultIn(node);
    }

    public void outAMathFunctionsymbol(AMathFunctionsymbol node)
    {
        defaultOut(node);
    }

    public void caseAMathFunctionsymbol(AMathFunctionsymbol node)
    {
        inAMathFunctionsymbol(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getArithVal() != null)
        {
            node.getArithVal().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAMathFunctionsymbol(node);
    }

    public void inAArithVal(AArithVal node)
    {
        defaultIn(node);
    }

    public void outAArithVal(AArithVal node)
    {
        defaultOut(node);
    }

    public void caseAArithVal(AArithVal node)
    {
        inAArithVal(node);
        if(node.getMultVal() != null)
        {
            node.getMultVal().apply(this);
        }
        outAArithVal(node);
    }

    public void inAAdditionArithVal(AAdditionArithVal node)
    {
        defaultIn(node);
    }

    public void outAAdditionArithVal(AAdditionArithVal node)
    {
        defaultOut(node);
    }

    public void caseAAdditionArithVal(AAdditionArithVal node)
    {
        inAAdditionArithVal(node);
        if(node.getMultVal() != null)
        {
            node.getMultVal().apply(this);
        }
        if(node.getArithOp() != null)
        {
            node.getArithOp().apply(this);
        }
        if(node.getArithVal() != null)
        {
            node.getArithVal().apply(this);
        }
        outAAdditionArithVal(node);
    }

    public void inASemisimple1AdditionArithVal(ASemisimple1AdditionArithVal node)
    {
        defaultIn(node);
    }

    public void outASemisimple1AdditionArithVal(ASemisimple1AdditionArithVal node)
    {
        defaultOut(node);
    }

    public void caseASemisimple1AdditionArithVal(ASemisimple1AdditionArithVal node)
    {
        inASemisimple1AdditionArithVal(node);
        if(node.getMultVal() != null)
        {
            node.getMultVal().apply(this);
        }
        if(node.getArithOp() != null)
        {
            node.getArithOp().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASemisimple1AdditionArithVal(node);
    }

    public void inASemisimple2AdditionArithVal(ASemisimple2AdditionArithVal node)
    {
        defaultIn(node);
    }

    public void outASemisimple2AdditionArithVal(ASemisimple2AdditionArithVal node)
    {
        defaultOut(node);
    }

    public void caseASemisimple2AdditionArithVal(ASemisimple2AdditionArithVal node)
    {
        inASemisimple2AdditionArithVal(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getArithOp() != null)
        {
            node.getArithOp().apply(this);
        }
        if(node.getArithVal() != null)
        {
            node.getArithVal().apply(this);
        }
        outASemisimple2AdditionArithVal(node);
    }

    public void inASimpleAdditionArithVal(ASimpleAdditionArithVal node)
    {
        defaultIn(node);
    }

    public void outASimpleAdditionArithVal(ASimpleAdditionArithVal node)
    {
        defaultOut(node);
    }

    public void caseASimpleAdditionArithVal(ASimpleAdditionArithVal node)
    {
        inASimpleAdditionArithVal(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getArithOp() != null)
        {
            node.getArithOp().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outASimpleAdditionArithVal(node);
    }

    public void inAMultVal(AMultVal node)
    {
        defaultIn(node);
    }

    public void outAMultVal(AMultVal node)
    {
        defaultOut(node);
    }

    public void caseAMultVal(AMultVal node)
    {
        inAMultVal(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getMulOp() != null)
        {
            node.getMulOp().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAMultVal(node);
    }

    public void inAMultiplicationMultVal(AMultiplicationMultVal node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultVal(AMultiplicationMultVal node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationMultVal(AMultiplicationMultVal node)
    {
        inAMultiplicationMultVal(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMulOp() != null)
        {
            node.getMulOp().apply(this);
        }
        if(node.getMultVal() != null)
        {
            node.getMultVal().apply(this);
        }
        outAMultiplicationMultVal(node);
    }

    public void inAArithMathOp(AArithMathOp node)
    {
        defaultIn(node);
    }

    public void outAArithMathOp(AArithMathOp node)
    {
        defaultOut(node);
    }

    public void caseAArithMathOp(AArithMathOp node)
    {
        inAArithMathOp(node);
        if(node.getArithOp() != null)
        {
            node.getArithOp().apply(this);
        }
        outAArithMathOp(node);
    }

    public void inAMultMathOp(AMultMathOp node)
    {
        defaultIn(node);
    }

    public void outAMultMathOp(AMultMathOp node)
    {
        defaultOut(node);
    }

    public void caseAMultMathOp(AMultMathOp node)
    {
        inAMultMathOp(node);
        if(node.getMulOp() != null)
        {
            node.getMulOp().apply(this);
        }
        outAMultMathOp(node);
    }

    public void inAAddArithOp(AAddArithOp node)
    {
        defaultIn(node);
    }

    public void outAAddArithOp(AAddArithOp node)
    {
        defaultOut(node);
    }

    public void caseAAddArithOp(AAddArithOp node)
    {
        inAAddArithOp(node);
        if(node.getAddOp() != null)
        {
            node.getAddOp().apply(this);
        }
        outAAddArithOp(node);
    }

    public void inASubArithOp(ASubArithOp node)
    {
        defaultIn(node);
    }

    public void outASubArithOp(ASubArithOp node)
    {
        defaultOut(node);
    }

    public void caseASubArithOp(ASubArithOp node)
    {
        inASubArithOp(node);
        if(node.getSubOp() != null)
        {
            node.getSubOp().apply(this);
        }
        outASubArithOp(node);
    }

    public void inAMulMulOp(AMulMulOp node)
    {
        defaultIn(node);
    }

    public void outAMulMulOp(AMulMulOp node)
    {
        defaultOut(node);
    }

    public void caseAMulMulOp(AMulMulOp node)
    {
        inAMulMulOp(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMulMulOp(node);
    }

    public void inADivMulOp(ADivMulOp node)
    {
        defaultIn(node);
    }

    public void outADivMulOp(ADivMulOp node)
    {
        defaultOut(node);
    }

    public void caseADivMulOp(ADivMulOp node)
    {
        inADivMulOp(node);
        if(node.getDivOp() != null)
        {
            node.getDivOp().apply(this);
        }
        outADivMulOp(node);
    }

    public void inAGtCompOp(AGtCompOp node)
    {
        defaultIn(node);
    }

    public void outAGtCompOp(AGtCompOp node)
    {
        defaultOut(node);
    }

    public void caseAGtCompOp(AGtCompOp node)
    {
        inAGtCompOp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCompOp(node);
    }

    public void inALtCompOp(ALtCompOp node)
    {
        defaultIn(node);
    }

    public void outALtCompOp(ALtCompOp node)
    {
        defaultOut(node);
    }

    public void caseALtCompOp(ALtCompOp node)
    {
        inALtCompOp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCompOp(node);
    }

    public void inAGteCompOp(AGteCompOp node)
    {
        defaultIn(node);
    }

    public void outAGteCompOp(AGteCompOp node)
    {
        defaultOut(node);
    }

    public void caseAGteCompOp(AGteCompOp node)
    {
        inAGteCompOp(node);
        if(node.getGte() != null)
        {
            node.getGte().apply(this);
        }
        outAGteCompOp(node);
    }

    public void inALteCompOp(ALteCompOp node)
    {
        defaultIn(node);
    }

    public void outALteCompOp(ALteCompOp node)
    {
        defaultOut(node);
    }

    public void caseALteCompOp(ALteCompOp node)
    {
        inALteCompOp(node);
        if(node.getLte() != null)
        {
            node.getLte().apply(this);
        }
        outALteCompOp(node);
    }

    public void inAEqualCompOp(AEqualCompOp node)
    {
        defaultIn(node);
    }

    public void outAEqualCompOp(AEqualCompOp node)
    {
        defaultOut(node);
    }

    public void caseAEqualCompOp(AEqualCompOp node)
    {
        inAEqualCompOp(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualCompOp(node);
    }

    public void inAStrongEqualCompOp(AStrongEqualCompOp node)
    {
        defaultIn(node);
    }

    public void outAStrongEqualCompOp(AStrongEqualCompOp node)
    {
        defaultOut(node);
    }

    public void caseAStrongEqualCompOp(AStrongEqualCompOp node)
    {
        inAStrongEqualCompOp(node);
        if(node.getStrongEqual() != null)
        {
            node.getStrongEqual().apply(this);
        }
        outAStrongEqualCompOp(node);
    }

    public void inAUnequalCompOp(AUnequalCompOp node)
    {
        defaultIn(node);
    }

    public void outAUnequalCompOp(AUnequalCompOp node)
    {
        defaultOut(node);
    }

    public void caseAUnequalCompOp(AUnequalCompOp node)
    {
        inAUnequalCompOp(node);
        if(node.getUnequal() != null)
        {
            node.getUnequal().apply(this);
        }
        outAUnequalCompOp(node);
    }

    public void inAMemberofCptOp(AMemberofCptOp node)
    {
        defaultIn(node);
    }

    public void outAMemberofCptOp(AMemberofCptOp node)
    {
        defaultOut(node);
    }

    public void caseAMemberofCptOp(AMemberofCptOp node)
    {
        inAMemberofCptOp(node);
        if(node.getTMemberof() != null)
        {
            node.getTMemberof().apply(this);
        }
        outAMemberofCptOp(node);
    }

    public void inASubconceptofCptOp(ASubconceptofCptOp node)
    {
        defaultIn(node);
    }

    public void outASubconceptofCptOp(ASubconceptofCptOp node)
    {
        defaultOut(node);
    }

    public void caseASubconceptofCptOp(ASubconceptofCptOp node)
    {
        inASubconceptofCptOp(node);
        if(node.getTSubconcept() != null)
        {
            node.getTSubconcept().apply(this);
        }
        outASubconceptofCptOp(node);
    }

    public void inAForallQuantifierKey(AForallQuantifierKey node)
    {
        defaultIn(node);
    }

    public void outAForallQuantifierKey(AForallQuantifierKey node)
    {
        defaultOut(node);
    }

    public void caseAForallQuantifierKey(AForallQuantifierKey node)
    {
        inAForallQuantifierKey(node);
        if(node.getTForall() != null)
        {
            node.getTForall().apply(this);
        }
        outAForallQuantifierKey(node);
    }

    public void inAExistsQuantifierKey(AExistsQuantifierKey node)
    {
        defaultIn(node);
    }

    public void outAExistsQuantifierKey(AExistsQuantifierKey node)
    {
        defaultOut(node);
    }

    public void caseAExistsQuantifierKey(AExistsQuantifierKey node)
    {
        inAExistsQuantifierKey(node);
        if(node.getTExists() != null)
        {
            node.getTExists().apply(this);
        }
        outAExistsQuantifierKey(node);
    }

    public void inAOftypeAttrDefOp(AOftypeAttrDefOp node)
    {
        defaultIn(node);
    }

    public void outAOftypeAttrDefOp(AOftypeAttrDefOp node)
    {
        defaultOut(node);
    }

    public void caseAOftypeAttrDefOp(AOftypeAttrDefOp node)
    {
        inAOftypeAttrDefOp(node);
        if(node.getTOftype() != null)
        {
            node.getTOftype().apply(this);
        }
        outAOftypeAttrDefOp(node);
    }

    public void inAImpliestypeAttrDefOp(AImpliestypeAttrDefOp node)
    {
        defaultIn(node);
    }

    public void outAImpliestypeAttrDefOp(AImpliestypeAttrDefOp node)
    {
        defaultOut(node);
    }

    public void caseAImpliestypeAttrDefOp(AImpliestypeAttrDefOp node)
    {
        inAImpliestypeAttrDefOp(node);
        if(node.getTImpliestype() != null)
        {
            node.getTImpliestype().apply(this);
        }
        outAImpliestypeAttrDefOp(node);
    }

    public void inAImpliesImplyOp(AImpliesImplyOp node)
    {
        defaultIn(node);
    }

    public void outAImpliesImplyOp(AImpliesImplyOp node)
    {
        defaultOut(node);
    }

    public void caseAImpliesImplyOp(AImpliesImplyOp node)
    {
        inAImpliesImplyOp(node);
        if(node.getTImplies() != null)
        {
            node.getTImplies().apply(this);
        }
        outAImpliesImplyOp(node);
    }

    public void inAImpliedbyImplyOp(AImpliedbyImplyOp node)
    {
        defaultIn(node);
    }

    public void outAImpliedbyImplyOp(AImpliedbyImplyOp node)
    {
        defaultOut(node);
    }

    public void caseAImpliedbyImplyOp(AImpliedbyImplyOp node)
    {
        inAImpliedbyImplyOp(node);
        if(node.getTImpliedBy() != null)
        {
            node.getTImpliedBy().apply(this);
        }
        outAImpliedbyImplyOp(node);
    }

    public void inAEquivalentImplyOp(AEquivalentImplyOp node)
    {
        defaultIn(node);
    }

    public void outAEquivalentImplyOp(AEquivalentImplyOp node)
    {
        defaultOut(node);
    }

    public void caseAEquivalentImplyOp(AEquivalentImplyOp node)
    {
        inAEquivalentImplyOp(node);
        if(node.getTEquivalent() != null)
        {
            node.getTEquivalent().apply(this);
        }
        outAEquivalentImplyOp(node);
    }

    public void inAPrefix(APrefix node)
    {
        defaultIn(node);
    }

    public void outAPrefix(APrefix node)
    {
        defaultOut(node);
    }

    public void caseAPrefix(APrefix node)
    {
        inAPrefix(node);
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAPrefix(node);
    }

    public void inAAnySqname(AAnySqname node)
    {
        defaultIn(node);
    }

    public void outAAnySqname(AAnySqname node)
    {
        defaultOut(node);
    }

    public void caseAAnySqname(AAnySqname node)
    {
        inAAnySqname(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getPrefix() != null)
        {
            node.getPrefix().apply(this);
        }
        outAAnySqname(node);
    }

    public void inALocalkeywordSqname(ALocalkeywordSqname node)
    {
        defaultIn(node);
    }

    public void outALocalkeywordSqname(ALocalkeywordSqname node)
    {
        defaultOut(node);
    }

    public void caseALocalkeywordSqname(ALocalkeywordSqname node)
    {
        inALocalkeywordSqname(node);
        if(node.getAnykeyword() != null)
        {
            node.getAnykeyword().apply(this);
        }
        if(node.getPrefix() != null)
        {
            node.getPrefix().apply(this);
        }
        outALocalkeywordSqname(node);
    }

    public void inAAndAnykeyword(AAndAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAAndAnykeyword(AAndAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAAndAnykeyword(AAndAnykeyword node)
    {
        inAAndAnykeyword(node);
        if(node.getTAnd() != null)
        {
            node.getTAnd().apply(this);
        }
        outAAndAnykeyword(node);
    }

    public void inAOrAnykeyword(AOrAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAOrAnykeyword(AOrAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAOrAnykeyword(AOrAnykeyword node)
    {
        inAOrAnykeyword(node);
        if(node.getTOr() != null)
        {
            node.getTOr().apply(this);
        }
        outAOrAnykeyword(node);
    }

    public void inAImpliesAnykeyword(AImpliesAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAImpliesAnykeyword(AImpliesAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAImpliesAnykeyword(AImpliesAnykeyword node)
    {
        inAImpliesAnykeyword(node);
        if(node.getTImplies() != null)
        {
            node.getTImplies().apply(this);
        }
        outAImpliesAnykeyword(node);
    }

    public void inAImpliedByAnykeyword(AImpliedByAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAImpliedByAnykeyword(AImpliedByAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAImpliedByAnykeyword(AImpliedByAnykeyword node)
    {
        inAImpliedByAnykeyword(node);
        if(node.getTImpliedBy() != null)
        {
            node.getTImpliedBy().apply(this);
        }
        outAImpliedByAnykeyword(node);
    }

    public void inAEquivalentAnykeyword(AEquivalentAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAEquivalentAnykeyword(AEquivalentAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAEquivalentAnykeyword(AEquivalentAnykeyword node)
    {
        inAEquivalentAnykeyword(node);
        if(node.getTEquivalent() != null)
        {
            node.getTEquivalent().apply(this);
        }
        outAEquivalentAnykeyword(node);
    }

    public void inAImpliedByLpAnykeyword(AImpliedByLpAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAImpliedByLpAnykeyword(AImpliedByLpAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAImpliedByLpAnykeyword(AImpliedByLpAnykeyword node)
    {
        inAImpliedByLpAnykeyword(node);
        if(node.getTImpliedByLp() != null)
        {
            node.getTImpliedByLp().apply(this);
        }
        outAImpliedByLpAnykeyword(node);
    }

    public void inAConstraintAnykeyword(AConstraintAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAConstraintAnykeyword(AConstraintAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAConstraintAnykeyword(AConstraintAnykeyword node)
    {
        inAConstraintAnykeyword(node);
        if(node.getTConstraint() != null)
        {
            node.getTConstraint().apply(this);
        }
        outAConstraintAnykeyword(node);
    }

    public void inANotAnykeyword(ANotAnykeyword node)
    {
        defaultIn(node);
    }

    public void outANotAnykeyword(ANotAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseANotAnykeyword(ANotAnykeyword node)
    {
        inANotAnykeyword(node);
        if(node.getTNot() != null)
        {
            node.getTNot().apply(this);
        }
        outANotAnykeyword(node);
    }

    public void inAExistsAnykeyword(AExistsAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAExistsAnykeyword(AExistsAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAExistsAnykeyword(AExistsAnykeyword node)
    {
        inAExistsAnykeyword(node);
        if(node.getTExists() != null)
        {
            node.getTExists().apply(this);
        }
        outAExistsAnykeyword(node);
    }

    public void inAForallAnykeyword(AForallAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAForallAnykeyword(AForallAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAForallAnykeyword(AForallAnykeyword node)
    {
        inAForallAnykeyword(node);
        if(node.getTForall() != null)
        {
            node.getTForall().apply(this);
        }
        outAForallAnykeyword(node);
    }

    public void inAUnivfalseAnykeyword(AUnivfalseAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAUnivfalseAnykeyword(AUnivfalseAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAUnivfalseAnykeyword(AUnivfalseAnykeyword node)
    {
        inAUnivfalseAnykeyword(node);
        if(node.getTUnivfalse() != null)
        {
            node.getTUnivfalse().apply(this);
        }
        outAUnivfalseAnykeyword(node);
    }

    public void inAUnivtrueAnykeyword(AUnivtrueAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAUnivtrueAnykeyword(AUnivtrueAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAUnivtrueAnykeyword(AUnivtrueAnykeyword node)
    {
        inAUnivtrueAnykeyword(node);
        if(node.getTUnivtrue() != null)
        {
            node.getTUnivtrue().apply(this);
        }
        outAUnivtrueAnykeyword(node);
    }

    public void inAAssumptionAnykeyword(AAssumptionAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAAssumptionAnykeyword(AAssumptionAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAAssumptionAnykeyword(AAssumptionAnykeyword node)
    {
        inAAssumptionAnykeyword(node);
        if(node.getTAssumption() != null)
        {
            node.getTAssumption().apply(this);
        }
        outAAssumptionAnykeyword(node);
    }

    public void inAAxiomAnykeyword(AAxiomAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAAxiomAnykeyword(AAxiomAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAAxiomAnykeyword(AAxiomAnykeyword node)
    {
        inAAxiomAnykeyword(node);
        if(node.getTAxiom() != null)
        {
            node.getTAxiom().apply(this);
        }
        outAAxiomAnykeyword(node);
    }

    public void inACapabilityAnykeyword(ACapabilityAnykeyword node)
    {
        defaultIn(node);
    }

    public void outACapabilityAnykeyword(ACapabilityAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseACapabilityAnykeyword(ACapabilityAnykeyword node)
    {
        inACapabilityAnykeyword(node);
        if(node.getTCapability() != null)
        {
            node.getTCapability().apply(this);
        }
        outACapabilityAnykeyword(node);
    }

    public void inAChoreographyAnykeyword(AChoreographyAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAChoreographyAnykeyword(AChoreographyAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAChoreographyAnykeyword(AChoreographyAnykeyword node)
    {
        inAChoreographyAnykeyword(node);
        if(node.getTChoreography() != null)
        {
            node.getTChoreography().apply(this);
        }
        outAChoreographyAnykeyword(node);
    }

    public void inAConceptAnykeyword(AConceptAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAConceptAnykeyword(AConceptAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAConceptAnykeyword(AConceptAnykeyword node)
    {
        inAConceptAnykeyword(node);
        if(node.getTConcept() != null)
        {
            node.getTConcept().apply(this);
        }
        outAConceptAnykeyword(node);
    }

    public void inADefinedbyAnykeyword(ADefinedbyAnykeyword node)
    {
        defaultIn(node);
    }

    public void outADefinedbyAnykeyword(ADefinedbyAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseADefinedbyAnykeyword(ADefinedbyAnykeyword node)
    {
        inADefinedbyAnykeyword(node);
        if(node.getTDefinedby() != null)
        {
            node.getTDefinedby().apply(this);
        }
        outADefinedbyAnykeyword(node);
    }

    public void inAEffectAnykeyword(AEffectAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAEffectAnykeyword(AEffectAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAEffectAnykeyword(AEffectAnykeyword node)
    {
        inAEffectAnykeyword(node);
        if(node.getTEffect() != null)
        {
            node.getTEffect().apply(this);
        }
        outAEffectAnykeyword(node);
    }

    public void inAEndnfpAnykeyword(AEndnfpAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAEndnfpAnykeyword(AEndnfpAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAEndnfpAnykeyword(AEndnfpAnykeyword node)
    {
        inAEndnfpAnykeyword(node);
        if(node.getTEndnfp() != null)
        {
            node.getTEndnfp().apply(this);
        }
        outAEndnfpAnykeyword(node);
    }

    public void inAGgmediatorAnykeyword(AGgmediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAGgmediatorAnykeyword(AGgmediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAGgmediatorAnykeyword(AGgmediatorAnykeyword node)
    {
        inAGgmediatorAnykeyword(node);
        if(node.getTGgmediator() != null)
        {
            node.getTGgmediator().apply(this);
        }
        outAGgmediatorAnykeyword(node);
    }

    public void inAGoalAnykeyword(AGoalAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAGoalAnykeyword(AGoalAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAGoalAnykeyword(AGoalAnykeyword node)
    {
        inAGoalAnykeyword(node);
        if(node.getTGoal() != null)
        {
            node.getTGoal().apply(this);
        }
        outAGoalAnykeyword(node);
    }

    public void inAHasvalueAnykeyword(AHasvalueAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAHasvalueAnykeyword(AHasvalueAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAHasvalueAnykeyword(AHasvalueAnykeyword node)
    {
        inAHasvalueAnykeyword(node);
        if(node.getTHasvalue() != null)
        {
            node.getTHasvalue().apply(this);
        }
        outAHasvalueAnykeyword(node);
    }

    public void inAImpliestypeAnykeyword(AImpliestypeAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAImpliestypeAnykeyword(AImpliestypeAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAImpliestypeAnykeyword(AImpliestypeAnykeyword node)
    {
        inAImpliestypeAnykeyword(node);
        if(node.getTImpliestype() != null)
        {
            node.getTImpliestype().apply(this);
        }
        outAImpliestypeAnykeyword(node);
    }

    public void inAImportontologyAnykeyword(AImportontologyAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAImportontologyAnykeyword(AImportontologyAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAImportontologyAnykeyword(AImportontologyAnykeyword node)
    {
        inAImportontologyAnykeyword(node);
        if(node.getTImportontology() != null)
        {
            node.getTImportontology().apply(this);
        }
        outAImportontologyAnykeyword(node);
    }

    public void inAInstanceAnykeyword(AInstanceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAInstanceAnykeyword(AInstanceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAInstanceAnykeyword(AInstanceAnykeyword node)
    {
        inAInstanceAnykeyword(node);
        if(node.getTInstance() != null)
        {
            node.getTInstance().apply(this);
        }
        outAInstanceAnykeyword(node);
    }

    public void inAInterfaceAnykeyword(AInterfaceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAInterfaceAnykeyword(AInterfaceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAInterfaceAnykeyword(AInterfaceAnykeyword node)
    {
        inAInterfaceAnykeyword(node);
        if(node.getTInterface() != null)
        {
            node.getTInterface().apply(this);
        }
        outAInterfaceAnykeyword(node);
    }

    public void inAInverseofAnykeyword(AInverseofAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAInverseofAnykeyword(AInverseofAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAInverseofAnykeyword(AInverseofAnykeyword node)
    {
        inAInverseofAnykeyword(node);
        if(node.getTInverseof() != null)
        {
            node.getTInverseof().apply(this);
        }
        outAInverseofAnykeyword(node);
    }

    public void inAMemberofAnykeyword(AMemberofAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAMemberofAnykeyword(AMemberofAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAMemberofAnykeyword(AMemberofAnykeyword node)
    {
        inAMemberofAnykeyword(node);
        if(node.getTMemberof() != null)
        {
            node.getTMemberof().apply(this);
        }
        outAMemberofAnykeyword(node);
    }

    public void inANamespaceAnykeyword(ANamespaceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outANamespaceAnykeyword(ANamespaceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseANamespaceAnykeyword(ANamespaceAnykeyword node)
    {
        inANamespaceAnykeyword(node);
        if(node.getTNamespace() != null)
        {
            node.getTNamespace().apply(this);
        }
        outANamespaceAnykeyword(node);
    }

    public void inANfpAnykeyword(ANfpAnykeyword node)
    {
        defaultIn(node);
    }

    public void outANfpAnykeyword(ANfpAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseANfpAnykeyword(ANfpAnykeyword node)
    {
        inANfpAnykeyword(node);
        if(node.getTNfp() != null)
        {
            node.getTNfp().apply(this);
        }
        outANfpAnykeyword(node);
    }

    public void inAOftypeAnykeyword(AOftypeAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAOftypeAnykeyword(AOftypeAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAOftypeAnykeyword(AOftypeAnykeyword node)
    {
        inAOftypeAnykeyword(node);
        if(node.getTOftype() != null)
        {
            node.getTOftype().apply(this);
        }
        outAOftypeAnykeyword(node);
    }

    public void inAOntologyAnykeyword(AOntologyAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAOntologyAnykeyword(AOntologyAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAOntologyAnykeyword(AOntologyAnykeyword node)
    {
        inAOntologyAnykeyword(node);
        if(node.getTOntology() != null)
        {
            node.getTOntology().apply(this);
        }
        outAOntologyAnykeyword(node);
    }

    public void inAOomediatorAnykeyword(AOomediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAOomediatorAnykeyword(AOomediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAOomediatorAnykeyword(AOomediatorAnykeyword node)
    {
        inAOomediatorAnykeyword(node);
        if(node.getTOomediator() != null)
        {
            node.getTOomediator().apply(this);
        }
        outAOomediatorAnykeyword(node);
    }

    public void inAOrchestrationAnykeyword(AOrchestrationAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAOrchestrationAnykeyword(AOrchestrationAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAOrchestrationAnykeyword(AOrchestrationAnykeyword node)
    {
        inAOrchestrationAnykeyword(node);
        if(node.getTOrchestration() != null)
        {
            node.getTOrchestration().apply(this);
        }
        outAOrchestrationAnykeyword(node);
    }

    public void inAPostconditionAnykeyword(APostconditionAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAPostconditionAnykeyword(APostconditionAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAPostconditionAnykeyword(APostconditionAnykeyword node)
    {
        inAPostconditionAnykeyword(node);
        if(node.getTPostcondition() != null)
        {
            node.getTPostcondition().apply(this);
        }
        outAPostconditionAnykeyword(node);
    }

    public void inAPreconditionAnykeyword(APreconditionAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAPreconditionAnykeyword(APreconditionAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAPreconditionAnykeyword(APreconditionAnykeyword node)
    {
        inAPreconditionAnykeyword(node);
        if(node.getTPrecondition() != null)
        {
            node.getTPrecondition().apply(this);
        }
        outAPreconditionAnykeyword(node);
    }

    public void inAReflexiveAnykeyword(AReflexiveAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAReflexiveAnykeyword(AReflexiveAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAReflexiveAnykeyword(AReflexiveAnykeyword node)
    {
        inAReflexiveAnykeyword(node);
        if(node.getTReflexive() != null)
        {
            node.getTReflexive().apply(this);
        }
        outAReflexiveAnykeyword(node);
    }

    public void inARelationAnykeyword(ARelationAnykeyword node)
    {
        defaultIn(node);
    }

    public void outARelationAnykeyword(ARelationAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseARelationAnykeyword(ARelationAnykeyword node)
    {
        inARelationAnykeyword(node);
        if(node.getTRelation() != null)
        {
            node.getTRelation().apply(this);
        }
        outARelationAnykeyword(node);
    }

    public void inARelationInstanceAnykeyword(ARelationInstanceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outARelationInstanceAnykeyword(ARelationInstanceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseARelationInstanceAnykeyword(ARelationInstanceAnykeyword node)
    {
        inARelationInstanceAnykeyword(node);
        if(node.getTRelationInstance() != null)
        {
            node.getTRelationInstance().apply(this);
        }
        outARelationInstanceAnykeyword(node);
    }

    public void inASharedvariableAnykeyword(ASharedvariableAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASharedvariableAnykeyword(ASharedvariableAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASharedvariableAnykeyword(ASharedvariableAnykeyword node)
    {
        inASharedvariableAnykeyword(node);
        if(node.getTSharedvariable() != null)
        {
            node.getTSharedvariable().apply(this);
        }
        outASharedvariableAnykeyword(node);
    }

    public void inASourceAnykeyword(ASourceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASourceAnykeyword(ASourceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASourceAnykeyword(ASourceAnykeyword node)
    {
        inASourceAnykeyword(node);
        if(node.getTSource() != null)
        {
            node.getTSource().apply(this);
        }
        outASourceAnykeyword(node);
    }

    public void inASubconceptAnykeyword(ASubconceptAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASubconceptAnykeyword(ASubconceptAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASubconceptAnykeyword(ASubconceptAnykeyword node)
    {
        inASubconceptAnykeyword(node);
        if(node.getTSubconcept() != null)
        {
            node.getTSubconcept().apply(this);
        }
        outASubconceptAnykeyword(node);
    }

    public void inASubrelationAnykeyword(ASubrelationAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASubrelationAnykeyword(ASubrelationAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASubrelationAnykeyword(ASubrelationAnykeyword node)
    {
        inASubrelationAnykeyword(node);
        if(node.getTSubrelation() != null)
        {
            node.getTSubrelation().apply(this);
        }
        outASubrelationAnykeyword(node);
    }

    public void inASymmetricAnykeyword(ASymmetricAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASymmetricAnykeyword(ASymmetricAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASymmetricAnykeyword(ASymmetricAnykeyword node)
    {
        inASymmetricAnykeyword(node);
        if(node.getTSymmetric() != null)
        {
            node.getTSymmetric().apply(this);
        }
        outASymmetricAnykeyword(node);
    }

    public void inATargetAnykeyword(ATargetAnykeyword node)
    {
        defaultIn(node);
    }

    public void outATargetAnykeyword(ATargetAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseATargetAnykeyword(ATargetAnykeyword node)
    {
        inATargetAnykeyword(node);
        if(node.getTTarget() != null)
        {
            node.getTTarget().apply(this);
        }
        outATargetAnykeyword(node);
    }

    public void inATransitiveAnykeyword(ATransitiveAnykeyword node)
    {
        defaultIn(node);
    }

    public void outATransitiveAnykeyword(ATransitiveAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseATransitiveAnykeyword(ATransitiveAnykeyword node)
    {
        inATransitiveAnykeyword(node);
        if(node.getTTransitive() != null)
        {
            node.getTTransitive().apply(this);
        }
        outATransitiveAnykeyword(node);
    }

    public void inAUsemediatorAnykeyword(AUsemediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAUsemediatorAnykeyword(AUsemediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAUsemediatorAnykeyword(AUsemediatorAnykeyword node)
    {
        inAUsemediatorAnykeyword(node);
        if(node.getTUsemediator() != null)
        {
            node.getTUsemediator().apply(this);
        }
        outAUsemediatorAnykeyword(node);
    }

    public void inAUseserviceAnykeyword(AUseserviceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAUseserviceAnykeyword(AUseserviceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAUseserviceAnykeyword(AUseserviceAnykeyword node)
    {
        inAUseserviceAnykeyword(node);
        if(node.getTUseservice() != null)
        {
            node.getTUseservice().apply(this);
        }
        outAUseserviceAnykeyword(node);
    }

    public void inAWebserviceAnykeyword(AWebserviceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAWebserviceAnykeyword(AWebserviceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAWebserviceAnykeyword(AWebserviceAnykeyword node)
    {
        inAWebserviceAnykeyword(node);
        if(node.getTWebservice() != null)
        {
            node.getTWebservice().apply(this);
        }
        outAWebserviceAnykeyword(node);
    }

    public void inAWgmediatorAnykeyword(AWgmediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAWgmediatorAnykeyword(AWgmediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAWgmediatorAnykeyword(AWgmediatorAnykeyword node)
    {
        inAWgmediatorAnykeyword(node);
        if(node.getTWgmediator() != null)
        {
            node.getTWgmediator().apply(this);
        }
        outAWgmediatorAnykeyword(node);
    }

    public void inAWsmlvariantAnykeyword(AWsmlvariantAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAWsmlvariantAnykeyword(AWsmlvariantAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAWsmlvariantAnykeyword(AWsmlvariantAnykeyword node)
    {
        inAWsmlvariantAnykeyword(node);
        if(node.getTWsmlvariant() != null)
        {
            node.getTWsmlvariant().apply(this);
        }
        outAWsmlvariantAnykeyword(node);
    }

    public void inAWwmediatorAnykeyword(AWwmediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAWwmediatorAnykeyword(AWwmediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAWwmediatorAnykeyword(AWwmediatorAnykeyword node)
    {
        inAWwmediatorAnykeyword(node);
        if(node.getTWwmediator() != null)
        {
            node.getTWwmediator().apply(this);
        }
        outAWwmediatorAnykeyword(node);
    }

    public void inAApplieschoreographyAnykeyword(AApplieschoreographyAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAApplieschoreographyAnykeyword(AApplieschoreographyAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAApplieschoreographyAnykeyword(AApplieschoreographyAnykeyword node)
    {
        inAApplieschoreographyAnykeyword(node);
        if(node.getTApplieschoreography() != null)
        {
            node.getTApplieschoreography().apply(this);
        }
        outAApplieschoreographyAnykeyword(node);
    }

    public void inAPerformAnykeyword(APerformAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAPerformAnykeyword(APerformAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAPerformAnykeyword(APerformAnykeyword node)
    {
        inAPerformAnykeyword(node);
        if(node.getTPerform() != null)
        {
            node.getTPerform().apply(this);
        }
        outAPerformAnykeyword(node);
    }

    public void inAAchievegoalAnykeyword(AAchievegoalAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAAchievegoalAnykeyword(AAchievegoalAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAAchievegoalAnykeyword(AAchievegoalAnykeyword node)
    {
        inAAchievegoalAnykeyword(node);
        if(node.getTAchievegoal() != null)
        {
            node.getTAchievegoal().apply(this);
        }
        outAAchievegoalAnykeyword(node);
    }

    public void inAInvokeserviceAnykeyword(AInvokeserviceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAInvokeserviceAnykeyword(AInvokeserviceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAInvokeserviceAnykeyword(AInvokeserviceAnykeyword node)
    {
        inAInvokeserviceAnykeyword(node);
        if(node.getTInvokeservice() != null)
        {
            node.getTInvokeservice().apply(this);
        }
        outAInvokeserviceAnykeyword(node);
    }

    public void inAApplymediationAnykeyword(AApplymediationAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAApplymediationAnykeyword(AApplymediationAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAApplymediationAnykeyword(AApplymediationAnykeyword node)
    {
        inAApplymediationAnykeyword(node);
        if(node.getTApplymediation() != null)
        {
            node.getTApplymediation().apply(this);
        }
        outAApplymediationAnykeyword(node);
    }

    public void inASendAnykeyword(ASendAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASendAnykeyword(ASendAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASendAnykeyword(ASendAnykeyword node)
    {
        inASendAnykeyword(node);
        if(node.getTSend() != null)
        {
            node.getTSend().apply(this);
        }
        outASendAnykeyword(node);
    }

    public void inAReceiveAnykeyword(AReceiveAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAReceiveAnykeyword(AReceiveAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAReceiveAnykeyword(AReceiveAnykeyword node)
    {
        inAReceiveAnykeyword(node);
        if(node.getTReceive() != null)
        {
            node.getTReceive().apply(this);
        }
        outAReceiveAnykeyword(node);
    }

    public void inAPpmediatorAnykeyword(APpmediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAPpmediatorAnykeyword(APpmediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAPpmediatorAnykeyword(APpmediatorAnykeyword node)
    {
        inAPpmediatorAnykeyword(node);
        if(node.getTPpmediator() != null)
        {
            node.getTPpmediator().apply(this);
        }
        outAPpmediatorAnykeyword(node);
    }

    public void inAPfmediatorAnykeyword(APfmediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAPfmediatorAnykeyword(APfmediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAPfmediatorAnykeyword(APfmediatorAnykeyword node)
    {
        inAPfmediatorAnykeyword(node);
        if(node.getTPfmediator() != null)
        {
            node.getTPfmediator().apply(this);
        }
        outAPfmediatorAnykeyword(node);
    }

    public void inAActivitygroupAnykeyword(AActivitygroupAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAActivitygroupAnykeyword(AActivitygroupAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAActivitygroupAnykeyword(AActivitygroupAnykeyword node)
    {
        inAActivitygroupAnykeyword(node);
        if(node.getTActivitygroup() != null)
        {
            node.getTActivitygroup().apply(this);
        }
        outAActivitygroupAnykeyword(node);
    }

    public void inAMediatorAnykeyword(AMediatorAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAMediatorAnykeyword(AMediatorAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAMediatorAnykeyword(AMediatorAnykeyword node)
    {
        inAMediatorAnykeyword(node);
        if(node.getTAdmediator() != null)
        {
            node.getTAdmediator().apply(this);
        }
        outAMediatorAnykeyword(node);
    }

    public void inAFlowstartAnykeyword(AFlowstartAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAFlowstartAnykeyword(AFlowstartAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAFlowstartAnykeyword(AFlowstartAnykeyword node)
    {
        inAFlowstartAnykeyword(node);
        if(node.getTFlowstart() != null)
        {
            node.getTFlowstart().apply(this);
        }
        outAFlowstartAnykeyword(node);
    }

    public void inAFlowfinalAnykeyword(AFlowfinalAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAFlowfinalAnykeyword(AFlowfinalAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAFlowfinalAnykeyword(AFlowfinalAnykeyword node)
    {
        inAFlowfinalAnykeyword(node);
        if(node.getTFlowfinal() != null)
        {
            node.getTFlowfinal().apply(this);
        }
        outAFlowfinalAnykeyword(node);
    }

    public void inAActivityfinalAnykeyword(AActivityfinalAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAActivityfinalAnykeyword(AActivityfinalAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAActivityfinalAnykeyword(AActivityfinalAnykeyword node)
    {
        inAActivityfinalAnykeyword(node);
        if(node.getTActivityfinal() != null)
        {
            node.getTActivityfinal().apply(this);
        }
        outAActivityfinalAnykeyword(node);
    }

    public void inAAggregationAnykeyword(AAggregationAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAAggregationAnykeyword(AAggregationAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAAggregationAnykeyword(AAggregationAnykeyword node)
    {
        inAAggregationAnykeyword(node);
        if(node.getTAggregation() != null)
        {
            node.getTAggregation().apply(this);
        }
        outAAggregationAnykeyword(node);
    }

    public void inAForkAnykeyword(AForkAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAForkAnykeyword(AForkAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAForkAnykeyword(AForkAnykeyword node)
    {
        inAForkAnykeyword(node);
        if(node.getTFork() != null)
        {
            node.getTFork().apply(this);
        }
        outAForkAnykeyword(node);
    }

    public void inAJoinAnykeyword(AJoinAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAJoinAnykeyword(AJoinAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAJoinAnykeyword(AJoinAnykeyword node)
    {
        inAJoinAnykeyword(node);
        if(node.getTJoin() != null)
        {
            node.getTJoin().apply(this);
        }
        outAJoinAnykeyword(node);
    }

    public void inADecisionAnykeyword(ADecisionAnykeyword node)
    {
        defaultIn(node);
    }

    public void outADecisionAnykeyword(ADecisionAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseADecisionAnykeyword(ADecisionAnykeyword node)
    {
        inADecisionAnykeyword(node);
        if(node.getTDecision() != null)
        {
            node.getTDecision().apply(this);
        }
        outADecisionAnykeyword(node);
    }

    public void inAMergeAnykeyword(AMergeAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAMergeAnykeyword(AMergeAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAMergeAnykeyword(AMergeAnykeyword node)
    {
        inAMergeAnykeyword(node);
        if(node.getTMerge() != null)
        {
            node.getTMerge().apply(this);
        }
        outAMergeAnykeyword(node);
    }

    public void inASendeventactionAnykeyword(ASendeventactionAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASendeventactionAnykeyword(ASendeventactionAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASendeventactionAnykeyword(ASendeventactionAnykeyword node)
    {
        inASendeventactionAnykeyword(node);
        if(node.getTSendeventaction() != null)
        {
            node.getTSendeventaction().apply(this);
        }
        outASendeventactionAnykeyword(node);
    }

    public void inAInputpinAnykeyword(AInputpinAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAInputpinAnykeyword(AInputpinAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAInputpinAnykeyword(AInputpinAnykeyword node)
    {
        inAInputpinAnykeyword(node);
        if(node.getTInputpin() != null)
        {
            node.getTInputpin().apply(this);
        }
        outAInputpinAnykeyword(node);
    }

    public void inAOutputpinAnykeyword(AOutputpinAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAOutputpinAnykeyword(AOutputpinAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAOutputpinAnykeyword(AOutputpinAnykeyword node)
    {
        inAOutputpinAnykeyword(node);
        if(node.getTOutputpin() != null)
        {
            node.getTOutputpin().apply(this);
        }
        outAOutputpinAnykeyword(node);
    }

    public void inAControlflowAnykeyword(AControlflowAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAControlflowAnykeyword(AControlflowAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAControlflowAnykeyword(AControlflowAnykeyword node)
    {
        inAControlflowAnykeyword(node);
        if(node.getTControlflow() != null)
        {
            node.getTControlflow().apply(this);
        }
        outAControlflowAnykeyword(node);
    }

    public void inADataflowAnykeyword(ADataflowAnykeyword node)
    {
        defaultIn(node);
    }

    public void outADataflowAnykeyword(ADataflowAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseADataflowAnykeyword(ADataflowAnykeyword node)
    {
        inADataflowAnykeyword(node);
        if(node.getTDataflow() != null)
        {
            node.getTDataflow().apply(this);
        }
        outADataflowAnykeyword(node);
    }

    public void inAGuardAnykeyword(AGuardAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAGuardAnykeyword(AGuardAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAGuardAnykeyword(AGuardAnykeyword node)
    {
        inAGuardAnykeyword(node);
        if(node.getTGuard() != null)
        {
            node.getTGuard().apply(this);
        }
        outAGuardAnykeyword(node);
    }

    public void inAElseAnykeyword(AElseAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAElseAnykeyword(AElseAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAElseAnykeyword(AElseAnykeyword node)
    {
        inAElseAnykeyword(node);
        if(node.getTElse() != null)
        {
            node.getTElse().apply(this);
        }
        outAElseAnykeyword(node);
    }

    public void inAStartnodeAnykeyword(AStartnodeAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAStartnodeAnykeyword(AStartnodeAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAStartnodeAnykeyword(AStartnodeAnykeyword node)
    {
        inAStartnodeAnykeyword(node);
        if(node.getTStartnode() != null)
        {
            node.getTStartnode().apply(this);
        }
        outAStartnodeAnykeyword(node);
    }

    public void inAInterruptsAnykeyword(AInterruptsAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAInterruptsAnykeyword(AInterruptsAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAInterruptsAnykeyword(AInterruptsAnykeyword node)
    {
        inAInterruptsAnykeyword(node);
        if(node.getTInterrupts() != null)
        {
            node.getTInterrupts().apply(this);
        }
        outAInterruptsAnykeyword(node);
    }

    public void inACashewworkflowAnykeyword(ACashewworkflowAnykeyword node)
    {
        defaultIn(node);
    }

    public void outACashewworkflowAnykeyword(ACashewworkflowAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseACashewworkflowAnykeyword(ACashewworkflowAnykeyword node)
    {
        inACashewworkflowAnykeyword(node);
        if(node.getTCashewworkflow() != null)
        {
            node.getTCashewworkflow().apply(this);
        }
        outACashewworkflowAnykeyword(node);
    }

    public void inASequentialAnykeyword(ASequentialAnykeyword node)
    {
        defaultIn(node);
    }

    public void outASequentialAnykeyword(ASequentialAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseASequentialAnykeyword(ASequentialAnykeyword node)
    {
        inASequentialAnykeyword(node);
        if(node.getTSequential() != null)
        {
            node.getTSequential().apply(this);
        }
        outASequentialAnykeyword(node);
    }

    public void inAConcurrentAnykeyword(AConcurrentAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAConcurrentAnykeyword(AConcurrentAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAConcurrentAnykeyword(AConcurrentAnykeyword node)
    {
        inAConcurrentAnykeyword(node);
        if(node.getTConcurrent() != null)
        {
            node.getTConcurrent().apply(this);
        }
        outAConcurrentAnykeyword(node);
    }

    public void inAInterleavedAnykeyword(AInterleavedAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAInterleavedAnykeyword(AInterleavedAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAInterleavedAnykeyword(AInterleavedAnykeyword node)
    {
        inAInterleavedAnykeyword(node);
        if(node.getTInterleaved() != null)
        {
            node.getTInterleaved().apply(this);
        }
        outAInterleavedAnykeyword(node);
    }

    public void inADeferredchoiceAnykeyword(ADeferredchoiceAnykeyword node)
    {
        defaultIn(node);
    }

    public void outADeferredchoiceAnykeyword(ADeferredchoiceAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseADeferredchoiceAnykeyword(ADeferredchoiceAnykeyword node)
    {
        inADeferredchoiceAnykeyword(node);
        if(node.getTDeferredchoice() != null)
        {
            node.getTDeferredchoice().apply(this);
        }
        outADeferredchoiceAnykeyword(node);
    }

    public void inADeferredwhileAnykeyword(ADeferredwhileAnykeyword node)
    {
        defaultIn(node);
    }

    public void outADeferredwhileAnykeyword(ADeferredwhileAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseADeferredwhileAnykeyword(ADeferredwhileAnykeyword node)
    {
        inADeferredwhileAnykeyword(node);
        if(node.getTDeferredwhile() != null)
        {
            node.getTDeferredwhile().apply(this);
        }
        outADeferredwhileAnykeyword(node);
    }

    public void inADeferreduntilAnykeyword(ADeferreduntilAnykeyword node)
    {
        defaultIn(node);
    }

    public void outADeferreduntilAnykeyword(ADeferreduntilAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseADeferreduntilAnykeyword(ADeferreduntilAnykeyword node)
    {
        inADeferreduntilAnykeyword(node);
        if(node.getTDeferreduntil() != null)
        {
            node.getTDeferreduntil().apply(this);
        }
        outADeferreduntilAnykeyword(node);
    }

    public void inADataflowmediatorsAnykeyword(ADataflowmediatorsAnykeyword node)
    {
        defaultIn(node);
    }

    public void outADataflowmediatorsAnykeyword(ADataflowmediatorsAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseADataflowmediatorsAnykeyword(ADataflowmediatorsAnykeyword node)
    {
        inADataflowmediatorsAnykeyword(node);
        if(node.getTDataflowmediators() != null)
        {
            node.getTDataflowmediators().apply(this);
        }
        outADataflowmediatorsAnykeyword(node);
    }

    public void inAWhileAnykeyword(AWhileAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAWhileAnykeyword(AWhileAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAWhileAnykeyword(AWhileAnykeyword node)
    {
        inAWhileAnykeyword(node);
        if(node.getTWhile() != null)
        {
            node.getTWhile().apply(this);
        }
        outAWhileAnykeyword(node);
    }

    public void inAUntilAnykeyword(AUntilAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAUntilAnykeyword(AUntilAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAUntilAnykeyword(AUntilAnykeyword node)
    {
        inAUntilAnykeyword(node);
        if(node.getTUntil() != null)
        {
            node.getTUntil().apply(this);
        }
        outAUntilAnykeyword(node);
    }

    public void inAUnlessAnykeyword(AUnlessAnykeyword node)
    {
        defaultIn(node);
    }

    public void outAUnlessAnykeyword(AUnlessAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseAUnlessAnykeyword(AUnlessAnykeyword node)
    {
        inAUnlessAnykeyword(node);
        if(node.getTUnless() != null)
        {
            node.getTUnless().apply(this);
        }
        outAUnlessAnykeyword(node);
    }

    public void inARepeatAnykeyword(ARepeatAnykeyword node)
    {
        defaultIn(node);
    }

    public void outARepeatAnykeyword(ARepeatAnykeyword node)
    {
        defaultOut(node);
    }

    public void caseARepeatAnykeyword(ARepeatAnykeyword node)
    {
        inARepeatAnykeyword(node);
        if(node.getTRepeat() != null)
        {
            node.getTRepeat().apply(this);
        }
        outARepeatAnykeyword(node);
    }

    public void inAIriIri(AIriIri node)
    {
        defaultIn(node);
    }

    public void outAIriIri(AIriIri node)
    {
        defaultOut(node);
    }

    public void caseAIriIri(AIriIri node)
    {
        inAIriIri(node);
        if(node.getFullIri() != null)
        {
            node.getFullIri().apply(this);
        }
        outAIriIri(node);
    }

    public void inASqnameIri(ASqnameIri node)
    {
        defaultIn(node);
    }

    public void outASqnameIri(ASqnameIri node)
    {
        defaultOut(node);
    }

    public void caseASqnameIri(ASqnameIri node)
    {
        inASqnameIri(node);
        if(node.getSqname() != null)
        {
            node.getSqname().apply(this);
        }
        outASqnameIri(node);
    }

    public void inAIriId(AIriId node)
    {
        defaultIn(node);
    }

    public void outAIriId(AIriId node)
    {
        defaultOut(node);
    }

    public void caseAIriId(AIriId node)
    {
        inAIriId(node);
        if(node.getIri() != null)
        {
            node.getIri().apply(this);
        }
        outAIriId(node);
    }

    public void inAAnonymousId(AAnonymousId node)
    {
        defaultIn(node);
    }

    public void outAAnonymousId(AAnonymousId node)
    {
        defaultOut(node);
    }

    public void caseAAnonymousId(AAnonymousId node)
    {
        inAAnonymousId(node);
        if(node.getAnonymous() != null)
        {
            node.getAnonymous().apply(this);
        }
        outAAnonymousId(node);
    }

    public void inAUniversalTruthId(AUniversalTruthId node)
    {
        defaultIn(node);
    }

    public void outAUniversalTruthId(AUniversalTruthId node)
    {
        defaultOut(node);
    }

    public void caseAUniversalTruthId(AUniversalTruthId node)
    {
        inAUniversalTruthId(node);
        if(node.getTUnivtrue() != null)
        {
            node.getTUnivtrue().apply(this);
        }
        outAUniversalTruthId(node);
    }

    public void inAUniversalFalsehoodId(AUniversalFalsehoodId node)
    {
        defaultIn(node);
    }

    public void outAUniversalFalsehoodId(AUniversalFalsehoodId node)
    {
        defaultOut(node);
    }

    public void caseAUniversalFalsehoodId(AUniversalFalsehoodId node)
    {
        inAUniversalFalsehoodId(node);
        if(node.getTUnivfalse() != null)
        {
            node.getTUnivfalse().apply(this);
        }
        outAUniversalFalsehoodId(node);
    }

    public void inAIdIdlist(AIdIdlist node)
    {
        defaultIn(node);
    }

    public void outAIdIdlist(AIdIdlist node)
    {
        defaultOut(node);
    }

    public void caseAIdIdlist(AIdIdlist node)
    {
        inAIdIdlist(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdlist(node);
    }

    public void inAIdlistIdlist(AIdlistIdlist node)
    {
        defaultIn(node);
    }

    public void outAIdlistIdlist(AIdlistIdlist node)
    {
        defaultOut(node);
    }

    public void caseAIdlistIdlist(AIdlistIdlist node)
    {
        inAIdlistIdlist(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getMoreids().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreids) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAIdlistIdlist(node);
    }

    public void inAMoreids(AMoreids node)
    {
        defaultIn(node);
    }

    public void outAMoreids(AMoreids node)
    {
        defaultOut(node);
    }

    public void caseAMoreids(AMoreids node)
    {
        inAMoreids(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMoreids(node);
    }

    public void inADatatypeValue(ADatatypeValue node)
    {
        defaultIn(node);
    }

    public void outADatatypeValue(ADatatypeValue node)
    {
        defaultOut(node);
    }

    public void caseADatatypeValue(ADatatypeValue node)
    {
        inADatatypeValue(node);
        if(node.getFunctionsymbol() != null)
        {
            node.getFunctionsymbol().apply(this);
        }
        outADatatypeValue(node);
    }

    public void inATermValue(ATermValue node)
    {
        defaultIn(node);
    }

    public void outATermValue(ATermValue node)
    {
        defaultOut(node);
    }

    public void caseATermValue(ATermValue node)
    {
        inATermValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATermValue(node);
    }

    public void inANumericValue(ANumericValue node)
    {
        defaultIn(node);
    }

    public void outANumericValue(ANumericValue node)
    {
        defaultOut(node);
    }

    public void caseANumericValue(ANumericValue node)
    {
        inANumericValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumericValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inATermValuelist(ATermValuelist node)
    {
        defaultIn(node);
    }

    public void outATermValuelist(ATermValuelist node)
    {
        defaultOut(node);
    }

    public void caseATermValuelist(ATermValuelist node)
    {
        inATermValuelist(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outATermValuelist(node);
    }

    public void inAValuelistValuelist(AValuelistValuelist node)
    {
        defaultIn(node);
    }

    public void outAValuelistValuelist(AValuelistValuelist node)
    {
        defaultOut(node);
    }

    public void caseAValuelistValuelist(AValuelistValuelist node)
    {
        inAValuelistValuelist(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getMorevalues().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMorevalues) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAValuelistValuelist(node);
    }

    public void inAMorevalues(AMorevalues node)
    {
        defaultIn(node);
    }

    public void outAMorevalues(AMorevalues node)
    {
        defaultOut(node);
    }

    public void caseAMorevalues(AMorevalues node)
    {
        inAMorevalues(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMorevalues(node);
    }

    public void inADataTerm(ADataTerm node)
    {
        defaultIn(node);
    }

    public void outADataTerm(ADataTerm node)
    {
        defaultOut(node);
    }

    public void caseADataTerm(ADataTerm node)
    {
        inADataTerm(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outADataTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVarTerm(node);
    }

    public void inANbAnonymousTerm(ANbAnonymousTerm node)
    {
        defaultIn(node);
    }

    public void outANbAnonymousTerm(ANbAnonymousTerm node)
    {
        defaultOut(node);
    }

    public void caseANbAnonymousTerm(ANbAnonymousTerm node)
    {
        inANbAnonymousTerm(node);
        if(node.getNbAnonymous() != null)
        {
            node.getNbAnonymous().apply(this);
        }
        outANbAnonymousTerm(node);
    }

    public void inATermTerms(ATermTerms node)
    {
        defaultIn(node);
    }

    public void outATermTerms(ATermTerms node)
    {
        defaultOut(node);
    }

    public void caseATermTerms(ATermTerms node)
    {
        inATermTerms(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermTerms(node);
    }

    public void inATerms(ATerms node)
    {
        defaultIn(node);
    }

    public void outATerms(ATerms node)
    {
        defaultOut(node);
    }

    public void caseATerms(ATerms node)
    {
        inATerms(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTerms() != null)
        {
            node.getTerms().apply(this);
        }
        outATerms(node);
    }

    public void inATermTermlist(ATermTermlist node)
    {
        defaultIn(node);
    }

    public void outATermTermlist(ATermTermlist node)
    {
        defaultOut(node);
    }

    public void caseATermTermlist(ATermTermlist node)
    {
        inATermTermlist(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermTermlist(node);
    }

    public void inATermlist(ATermlist node)
    {
        defaultIn(node);
    }

    public void outATermlist(ATermlist node)
    {
        defaultOut(node);
    }

    public void caseATermlist(ATermlist node)
    {
        inATermlist(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getTerms() != null)
        {
            node.getTerms().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outATermlist(node);
    }

    public void inAVariableVariables(AVariableVariables node)
    {
        defaultIn(node);
    }

    public void outAVariableVariables(AVariableVariables node)
    {
        defaultOut(node);
    }

    public void caseAVariableVariables(AVariableVariables node)
    {
        inAVariableVariables(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariableVariables(node);
    }

    public void inAVariables(AVariables node)
    {
        defaultIn(node);
    }

    public void outAVariables(AVariables node)
    {
        defaultOut(node);
    }

    public void caseAVariables(AVariables node)
    {
        inAVariables(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariables() != null)
        {
            node.getVariables().apply(this);
        }
        outAVariables(node);
    }

    public void inAVariableVariablelist(AVariableVariablelist node)
    {
        defaultIn(node);
    }

    public void outAVariableVariablelist(AVariableVariablelist node)
    {
        defaultOut(node);
    }

    public void caseAVariableVariablelist(AVariableVariablelist node)
    {
        inAVariableVariablelist(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariableVariablelist(node);
    }

    public void inAVariableListVariablelist(AVariableListVariablelist node)
    {
        defaultIn(node);
    }

    public void outAVariableListVariablelist(AVariableListVariablelist node)
    {
        defaultOut(node);
    }

    public void caseAVariableListVariablelist(AVariableListVariablelist node)
    {
        inAVariableListVariablelist(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getVariables() != null)
        {
            node.getVariables().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAVariableListVariablelist(node);
    }

    public void inAInteger(AInteger node)
    {
        defaultIn(node);
    }

    public void outAInteger(AInteger node)
    {
        defaultOut(node);
    }

    public void caseAInteger(AInteger node)
    {
        inAInteger(node);
        if(node.getPosInteger() != null)
        {
            node.getPosInteger().apply(this);
        }
        if(node.getSubOp() != null)
        {
            node.getSubOp().apply(this);
        }
        outAInteger(node);
    }

    public void inADecimal(ADecimal node)
    {
        defaultIn(node);
    }

    public void outADecimal(ADecimal node)
    {
        defaultOut(node);
    }

    public void caseADecimal(ADecimal node)
    {
        inADecimal(node);
        if(node.getPosDecimal() != null)
        {
            node.getPosDecimal().apply(this);
        }
        if(node.getSubOp() != null)
        {
            node.getSubOp().apply(this);
        }
        outADecimal(node);
    }

    public void inAIntegerNumber(AIntegerNumber node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumber(AIntegerNumber node)
    {
        defaultOut(node);
    }

    public void caseAIntegerNumber(AIntegerNumber node)
    {
        inAIntegerNumber(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerNumber(node);
    }

    public void inADecimalNumber(ADecimalNumber node)
    {
        defaultIn(node);
    }

    public void outADecimalNumber(ADecimalNumber node)
    {
        defaultOut(node);
    }

    public void caseADecimalNumber(ADecimalNumber node)
    {
        inADecimalNumber(node);
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        outADecimalNumber(node);
    }

    public void inAActivityDiagram(AActivityDiagram node)
    {
        defaultIn(node);
    }

    public void outAActivityDiagram(AActivityDiagram node)
    {
        defaultOut(node);
    }

    public void caseAActivityDiagram(AActivityDiagram node)
    {
        inAActivityDiagram(node);
        if(node.getGroup() != null)
        {
            node.getGroup().apply(this);
        }
        if(node.getStartnode() != null)
        {
            node.getStartnode().apply(this);
        }
        outAActivityDiagram(node);
    }

    public void inAActivitygroupGroup(AActivitygroupGroup node)
    {
        defaultIn(node);
    }

    public void outAActivitygroupGroup(AActivitygroupGroup node)
    {
        defaultOut(node);
    }

    public void caseAActivitygroupGroup(AActivitygroupGroup node)
    {
        inAActivitygroupGroup(node);
        if(node.getActivitygroupcontents() != null)
        {
            node.getActivitygroupcontents().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTActivitygroup() != null)
        {
            node.getTActivitygroup().apply(this);
        }
        outAActivitygroupGroup(node);
    }

    public void inAInterruptibleregionGroup(AInterruptibleregionGroup node)
    {
        defaultIn(node);
    }

    public void outAInterruptibleregionGroup(AInterruptibleregionGroup node)
    {
        defaultOut(node);
    }

    public void caseAInterruptibleregionGroup(AInterruptibleregionGroup node)
    {
        inAInterruptibleregionGroup(node);
        if(node.getActivitygroupcontents() != null)
        {
            node.getActivitygroupcontents().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTInterruptibleregion() != null)
        {
            node.getTInterruptibleregion().apply(this);
        }
        outAInterruptibleregionGroup(node);
    }

    public void inAActivitygroupcontents(AActivitygroupcontents node)
    {
        defaultIn(node);
    }

    public void outAActivitygroupcontents(AActivitygroupcontents node)
    {
        defaultOut(node);
    }

    public void caseAActivitygroupcontents(AActivitygroupcontents node)
    {
        inAActivitygroupcontents(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getGroup().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PGroup) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getEdge().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PEdge) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getNode().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNode) temp[i]).apply(this);
            }
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAActivitygroupcontents(node);
    }

    public void inAGeneralactionNode(AGeneralactionNode node)
    {
        defaultIn(node);
    }

    public void outAGeneralactionNode(AGeneralactionNode node)
    {
        defaultOut(node);
    }

    public void caseAGeneralactionNode(AGeneralactionNode node)
    {
        inAGeneralactionNode(node);
        if(node.getNodecontents() != null)
        {
            node.getNodecontents().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTGeneralaction() != null)
        {
            node.getTGeneralaction().apply(this);
        }
        outAGeneralactionNode(node);
    }

    public void inAOomediatorNode(AOomediatorNode node)
    {
        defaultIn(node);
    }

    public void outAOomediatorNode(AOomediatorNode node)
    {
        defaultOut(node);
    }

    public void caseAOomediatorNode(AOomediatorNode node)
    {
        inAOomediatorNode(node);
        if(node.getNodecontents() != null)
        {
            node.getNodecontents().apply(this);
        }
        if(node.getDefinedby() != null)
        {
            node.getDefinedby().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTOomediator() != null)
        {
            node.getTOomediator().apply(this);
        }
        outAOomediatorNode(node);
    }

    public void inAFlowstartNode(AFlowstartNode node)
    {
        defaultIn(node);
    }

    public void outAFlowstartNode(AFlowstartNode node)
    {
        defaultOut(node);
    }

    public void caseAFlowstartNode(AFlowstartNode node)
    {
        inAFlowstartNode(node);
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTFlowstart() != null)
        {
            node.getTFlowstart().apply(this);
        }
        outAFlowstartNode(node);
    }

    public void inAFlowfinalNode(AFlowfinalNode node)
    {
        defaultIn(node);
    }

    public void outAFlowfinalNode(AFlowfinalNode node)
    {
        defaultOut(node);
    }

    public void caseAFlowfinalNode(AFlowfinalNode node)
    {
        inAFlowfinalNode(node);
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTFlowfinal() != null)
        {
            node.getTFlowfinal().apply(this);
        }
        outAFlowfinalNode(node);
    }

    public void inAActivityfinalNode(AActivityfinalNode node)
    {
        defaultIn(node);
    }

    public void outAActivityfinalNode(AActivityfinalNode node)
    {
        defaultOut(node);
    }

    public void caseAActivityfinalNode(AActivityfinalNode node)
    {
        inAActivityfinalNode(node);
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTActivityfinal() != null)
        {
            node.getTActivityfinal().apply(this);
        }
        outAActivityfinalNode(node);
    }

    public void inAAggregationNode(AAggregationNode node)
    {
        defaultIn(node);
    }

    public void outAAggregationNode(AAggregationNode node)
    {
        defaultOut(node);
    }

    public void caseAAggregationNode(AAggregationNode node)
    {
        inAAggregationNode(node);
        if(node.getNodecontents() != null)
        {
            node.getNodecontents().apply(this);
        }
        if(node.getDefinedby() != null)
        {
            node.getDefinedby().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTAggregation() != null)
        {
            node.getTAggregation().apply(this);
        }
        outAAggregationNode(node);
    }

    public void inAExtractionNode(AExtractionNode node)
    {
        defaultIn(node);
    }

    public void outAExtractionNode(AExtractionNode node)
    {
        defaultOut(node);
    }

    public void caseAExtractionNode(AExtractionNode node)
    {
        inAExtractionNode(node);
        if(node.getNodecontents() != null)
        {
            node.getNodecontents().apply(this);
        }
        if(node.getDefinedby() != null)
        {
            node.getDefinedby().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTExtraction() != null)
        {
            node.getTExtraction().apply(this);
        }
        outAExtractionNode(node);
    }

    public void inAOperationNode(AOperationNode node)
    {
        defaultIn(node);
    }

    public void outAOperationNode(AOperationNode node)
    {
        defaultOut(node);
    }

    public void caseAOperationNode(AOperationNode node)
    {
        inAOperationNode(node);
        if(node.getNodecontents() != null)
        {
            node.getNodecontents().apply(this);
        }
        if(node.getDefinedby() != null)
        {
            node.getDefinedby().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTOperation() != null)
        {
            node.getTOperation().apply(this);
        }
        outAOperationNode(node);
    }

    public void inAForkNode(AForkNode node)
    {
        defaultIn(node);
    }

    public void outAForkNode(AForkNode node)
    {
        defaultOut(node);
    }

    public void caseAForkNode(AForkNode node)
    {
        inAForkNode(node);
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTFork() != null)
        {
            node.getTFork().apply(this);
        }
        outAForkNode(node);
    }

    public void inAJoinNode(AJoinNode node)
    {
        defaultIn(node);
    }

    public void outAJoinNode(AJoinNode node)
    {
        defaultOut(node);
    }

    public void caseAJoinNode(AJoinNode node)
    {
        inAJoinNode(node);
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTJoin() != null)
        {
            node.getTJoin().apply(this);
        }
        outAJoinNode(node);
    }

    public void inADecisionNode(ADecisionNode node)
    {
        defaultIn(node);
    }

    public void outADecisionNode(ADecisionNode node)
    {
        defaultOut(node);
    }

    public void caseADecisionNode(ADecisionNode node)
    {
        inADecisionNode(node);
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTDecision() != null)
        {
            node.getTDecision().apply(this);
        }
        outADecisionNode(node);
    }

    public void inAMergeNode(AMergeNode node)
    {
        defaultIn(node);
    }

    public void outAMergeNode(AMergeNode node)
    {
        defaultOut(node);
    }

    public void caseAMergeNode(AMergeNode node)
    {
        inAMergeNode(node);
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTMerge() != null)
        {
            node.getTMerge().apply(this);
        }
        outAMergeNode(node);
    }

    public void inASendeventactionNode(ASendeventactionNode node)
    {
        defaultIn(node);
    }

    public void outASendeventactionNode(ASendeventactionNode node)
    {
        defaultOut(node);
    }

    public void caseASendeventactionNode(ASendeventactionNode node)
    {
        inASendeventactionNode(node);
        if(node.getNodecontents() != null)
        {
            node.getNodecontents().apply(this);
        }
        if(node.getAdlink() != null)
        {
            node.getAdlink().apply(this);
        }
        if(node.getSslink() != null)
        {
            node.getSslink().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTSendeventaction() != null)
        {
            node.getTSendeventaction().apply(this);
        }
        outASendeventactionNode(node);
    }

    public void inAAccepteventactionNode(AAccepteventactionNode node)
    {
        defaultIn(node);
    }

    public void outAAccepteventactionNode(AAccepteventactionNode node)
    {
        defaultOut(node);
    }

    public void caseAAccepteventactionNode(AAccepteventactionNode node)
    {
        inAAccepteventactionNode(node);
        if(node.getNodecontents() != null)
        {
            node.getNodecontents().apply(this);
        }
        if(node.getAdlink() != null)
        {
            node.getAdlink().apply(this);
        }
        if(node.getSslink() != null)
        {
            node.getSslink().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTAccepteventaction() != null)
        {
            node.getTAccepteventaction().apply(this);
        }
        outAAccepteventactionNode(node);
    }

    public void inAObjectnodeNode(AObjectnodeNode node)
    {
        defaultIn(node);
    }

    public void outAObjectnodeNode(AObjectnodeNode node)
    {
        defaultOut(node);
    }

    public void caseAObjectnodeNode(AObjectnodeNode node)
    {
        inAObjectnodeNode(node);
        if(node.getCarriesconcept() != null)
        {
            node.getCarriesconcept().apply(this);
        }
        if(node.getSslink() != null)
        {
            node.getSslink().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTObjectnode() != null)
        {
            node.getTObjectnode().apply(this);
        }
        outAObjectnodeNode(node);
    }

    public void inADefinedby(ADefinedby node)
    {
        defaultIn(node);
    }

    public void outADefinedby(ADefinedby node)
    {
        defaultOut(node);
    }

    public void caseADefinedby(ADefinedby node)
    {
        inADefinedby(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTDefinedby() != null)
        {
            node.getTDefinedby().apply(this);
        }
        outADefinedby(node);
    }

    public void inAStartnode(AStartnode node)
    {
        defaultIn(node);
    }

    public void outAStartnode(AStartnode node)
    {
        defaultOut(node);
    }

    public void caseAStartnode(AStartnode node)
    {
        inAStartnode(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTStartnode() != null)
        {
            node.getTStartnode().apply(this);
        }
        outAStartnode(node);
    }

    public void inASslink(ASslink node)
    {
        defaultIn(node);
    }

    public void outASslink(ASslink node)
    {
        defaultOut(node);
    }

    public void caseASslink(ASslink node)
    {
        inASslink(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTSslink() != null)
        {
            node.getTSslink().apply(this);
        }
        outASslink(node);
    }

    public void inAAdlink(AAdlink node)
    {
        defaultIn(node);
    }

    public void outAAdlink(AAdlink node)
    {
        defaultOut(node);
    }

    public void caseAAdlink(AAdlink node)
    {
        inAAdlink(node);
        if(node.getPartnerlink() != null)
        {
            node.getPartnerlink().apply(this);
        }
        if(node.getCarriesconcept() != null)
        {
            node.getCarriesconcept().apply(this);
        }
        outAAdlink(node);
    }

    public void inACarriesconcept(ACarriesconcept node)
    {
        defaultIn(node);
    }

    public void outACarriesconcept(ACarriesconcept node)
    {
        defaultOut(node);
    }

    public void caseACarriesconcept(ACarriesconcept node)
    {
        inACarriesconcept(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTCarriesconcept() != null)
        {
            node.getTCarriesconcept().apply(this);
        }
        outACarriesconcept(node);
    }

    public void inAPartnerlink(APartnerlink node)
    {
        defaultIn(node);
    }

    public void outAPartnerlink(APartnerlink node)
    {
        defaultOut(node);
    }

    public void caseAPartnerlink(APartnerlink node)
    {
        inAPartnerlink(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTPartnerlink() != null)
        {
            node.getTPartnerlink().apply(this);
        }
        outAPartnerlink(node);
    }

    public void inANodecontents(ANodecontents node)
    {
        defaultIn(node);
    }

    public void outANodecontents(ANodecontents node)
    {
        defaultOut(node);
    }

    public void caseANodecontents(ANodecontents node)
    {
        inANodecontents(node);
        {
            Object temp[] = node.getPin().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PPin) temp[i]).apply(this);
            }
        }
        outANodecontents(node);
    }

    public void inAInputpinPin(AInputpinPin node)
    {
        defaultIn(node);
    }

    public void outAInputpinPin(AInputpinPin node)
    {
        defaultOut(node);
    }

    public void caseAInputpinPin(AInputpinPin node)
    {
        inAInputpinPin(node);
        if(node.getCarriesconcept() != null)
        {
            node.getCarriesconcept().apply(this);
        }
        if(node.getSslink() != null)
        {
            node.getSslink().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTInputpin() != null)
        {
            node.getTInputpin().apply(this);
        }
        outAInputpinPin(node);
    }

    public void inAOutputpinPin(AOutputpinPin node)
    {
        defaultIn(node);
    }

    public void outAOutputpinPin(AOutputpinPin node)
    {
        defaultOut(node);
    }

    public void caseAOutputpinPin(AOutputpinPin node)
    {
        inAOutputpinPin(node);
        if(node.getCarriesconcept() != null)
        {
            node.getCarriesconcept().apply(this);
        }
        if(node.getSslink() != null)
        {
            node.getSslink().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTOutputpin() != null)
        {
            node.getTOutputpin().apply(this);
        }
        outAOutputpinPin(node);
    }

    public void inAControlflowEdge(AControlflowEdge node)
    {
        defaultIn(node);
    }

    public void outAControlflowEdge(AControlflowEdge node)
    {
        defaultOut(node);
    }

    public void caseAControlflowEdge(AControlflowEdge node)
    {
        inAControlflowEdge(node);
        if(node.getEdgecontents() != null)
        {
            node.getEdgecontents().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTControlflow() != null)
        {
            node.getTControlflow().apply(this);
        }
        outAControlflowEdge(node);
    }

    public void inADataflowEdge(ADataflowEdge node)
    {
        defaultIn(node);
    }

    public void outADataflowEdge(ADataflowEdge node)
    {
        defaultOut(node);
    }

    public void caseADataflowEdge(ADataflowEdge node)
    {
        inADataflowEdge(node);
        if(node.getEdgecontents() != null)
        {
            node.getEdgecontents().apply(this);
        }
        {
            Object temp[] = node.getNfp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNfp) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTDataflow() != null)
        {
            node.getTDataflow().apply(this);
        }
        outADataflowEdge(node);
    }

    public void inAEdgecontents(AEdgecontents node)
    {
        defaultIn(node);
    }

    public void outAEdgecontents(AEdgecontents node)
    {
        defaultOut(node);
    }

    public void caseAEdgecontents(AEdgecontents node)
    {
        inAEdgecontents(node);
        if(node.getGuard() != null)
        {
            node.getGuard().apply(this);
        }
        if(node.getInterrupting() != null)
        {
            node.getInterrupting().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTTarget() != null)
        {
            node.getTTarget().apply(this);
        }
        if(node.getSource() != null)
        {
            node.getSource().apply(this);
        }
        if(node.getTSource() != null)
        {
            node.getTSource().apply(this);
        }
        outAEdgecontents(node);
    }

    public void inAInterrupting(AInterrupting node)
    {
        defaultIn(node);
    }

    public void outAInterrupting(AInterrupting node)
    {
        defaultOut(node);
    }

    public void caseAInterrupting(AInterrupting node)
    {
        inAInterrupting(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTInterrupts() != null)
        {
            node.getTInterrupts().apply(this);
        }
        outAInterrupting(node);
    }

    public void inAElseGuard(AElseGuard node)
    {
        defaultIn(node);
    }

    public void outAElseGuard(AElseGuard node)
    {
        defaultOut(node);
    }

    public void caseAElseGuard(AElseGuard node)
    {
        inAElseGuard(node);
        if(node.getTElse() != null)
        {
            node.getTElse().apply(this);
        }
        if(node.getTGuard() != null)
        {
            node.getTGuard().apply(this);
        }
        outAElseGuard(node);
    }

    public void inAExpressionGuard(AExpressionGuard node)
    {
        defaultIn(node);
    }

    public void outAExpressionGuard(AExpressionGuard node)
    {
        defaultOut(node);
    }

    public void caseAExpressionGuard(AExpressionGuard node)
    {
        inAExpressionGuard(node);
        if(node.getLogExpr() != null)
        {
            node.getLogExpr().apply(this);
        }
        if(node.getTGuard() != null)
        {
            node.getTGuard().apply(this);
        }
        outAExpressionGuard(node);
    }

    public void inACashewWorkflow(ACashewWorkflow node)
    {
        defaultIn(node);
    }

    public void outACashewWorkflow(ACashewWorkflow node)
    {
        defaultOut(node);
    }

    public void caseACashewWorkflow(ACashewWorkflow node)
    {
        inACashewWorkflow(node);
        if(node.getCashewSubDefs() != null)
        {
            node.getCashewSubDefs().apply(this);
        }
        if(node.getCashewWorkflowDef() != null)
        {
            node.getCashewWorkflowDef().apply(this);
        }
        outACashewWorkflow(node);
    }

    public void inACashewSubDefs(ACashewSubDefs node)
    {
        defaultIn(node);
    }

    public void outACashewSubDefs(ACashewSubDefs node)
    {
        defaultOut(node);
    }

    public void caseACashewSubDefs(ACashewSubDefs node)
    {
        inACashewSubDefs(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getCashewWorkflow().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCashewWorkflow) temp[i]).apply(this);
            }
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getTDefines() != null)
        {
            node.getTDefines().apply(this);
        }
        outACashewSubDefs(node);
    }

    public void inACashewPerform(ACashewPerform node)
    {
        defaultIn(node);
    }

    public void outACashewPerform(ACashewPerform node)
    {
        defaultOut(node);
    }

    public void caseACashewPerform(ACashewPerform node)
    {
        inACashewPerform(node);
        if(node.getCashewPerformAlt() != null)
        {
            node.getCashewPerformAlt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTPerform() != null)
        {
            node.getTPerform().apply(this);
        }
        outACashewPerform(node);
    }

    public void inACashewPerformAchievegoalCashewPerformAlt(ACashewPerformAchievegoalCashewPerformAlt node)
    {
        defaultIn(node);
    }

    public void outACashewPerformAchievegoalCashewPerformAlt(ACashewPerformAchievegoalCashewPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseACashewPerformAchievegoalCashewPerformAlt(ACashewPerformAchievegoalCashewPerformAlt node)
    {
        inACashewPerformAchievegoalCashewPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTAchievegoal() != null)
        {
            node.getTAchievegoal().apply(this);
        }
        outACashewPerformAchievegoalCashewPerformAlt(node);
    }

    public void inACashewPerformReceiveCashewPerformAlt(ACashewPerformReceiveCashewPerformAlt node)
    {
        defaultIn(node);
    }

    public void outACashewPerformReceiveCashewPerformAlt(ACashewPerformReceiveCashewPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseACashewPerformReceiveCashewPerformAlt(ACashewPerformReceiveCashewPerformAlt node)
    {
        inACashewPerformReceiveCashewPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTSource() != null)
        {
            node.getTSource().apply(this);
        }
        if(node.getTReceive() != null)
        {
            node.getTReceive().apply(this);
        }
        outACashewPerformReceiveCashewPerformAlt(node);
    }

    public void inACashewPerformSendCashewPerformAlt(ACashewPerformSendCashewPerformAlt node)
    {
        defaultIn(node);
    }

    public void outACashewPerformSendCashewPerformAlt(ACashewPerformSendCashewPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseACashewPerformSendCashewPerformAlt(ACashewPerformSendCashewPerformAlt node)
    {
        inACashewPerformSendCashewPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTTarget() != null)
        {
            node.getTTarget().apply(this);
        }
        if(node.getTSend() != null)
        {
            node.getTSend().apply(this);
        }
        outACashewPerformSendCashewPerformAlt(node);
    }

    public void inACashewPerformWorkflowCashewPerformAlt(ACashewPerformWorkflowCashewPerformAlt node)
    {
        defaultIn(node);
    }

    public void outACashewPerformWorkflowCashewPerformAlt(ACashewPerformWorkflowCashewPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseACashewPerformWorkflowCashewPerformAlt(ACashewPerformWorkflowCashewPerformAlt node)
    {
        inACashewPerformWorkflowCashewPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTWorkflow() != null)
        {
            node.getTWorkflow().apply(this);
        }
        outACashewPerformWorkflowCashewPerformAlt(node);
    }

    public void inAAtomPerform(AAtomPerform node)
    {
        defaultIn(node);
    }

    public void outAAtomPerform(AAtomPerform node)
    {
        defaultOut(node);
    }

    public void caseAAtomPerform(AAtomPerform node)
    {
        inAAtomPerform(node);
        if(node.getAtomPerformAlt() != null)
        {
            node.getAtomPerformAlt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTPerform() != null)
        {
            node.getTPerform().apply(this);
        }
        outAAtomPerform(node);
    }

    public void inAAtomPerformAchievegoalAtomPerformAlt(AAtomPerformAchievegoalAtomPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAAtomPerformAchievegoalAtomPerformAlt(AAtomPerformAchievegoalAtomPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAAtomPerformAchievegoalAtomPerformAlt(AAtomPerformAchievegoalAtomPerformAlt node)
    {
        inAAtomPerformAchievegoalAtomPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTAchievegoal() != null)
        {
            node.getTAchievegoal().apply(this);
        }
        outAAtomPerformAchievegoalAtomPerformAlt(node);
    }

    public void inAAtomPerformReceiveAtomPerformAlt(AAtomPerformReceiveAtomPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAAtomPerformReceiveAtomPerformAlt(AAtomPerformReceiveAtomPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAAtomPerformReceiveAtomPerformAlt(AAtomPerformReceiveAtomPerformAlt node)
    {
        inAAtomPerformReceiveAtomPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTSource() != null)
        {
            node.getTSource().apply(this);
        }
        if(node.getTReceive() != null)
        {
            node.getTReceive().apply(this);
        }
        outAAtomPerformReceiveAtomPerformAlt(node);
    }

    public void inAAtomPerformSendAtomPerformAlt(AAtomPerformSendAtomPerformAlt node)
    {
        defaultIn(node);
    }

    public void outAAtomPerformSendAtomPerformAlt(AAtomPerformSendAtomPerformAlt node)
    {
        defaultOut(node);
    }

    public void caseAAtomPerformSendAtomPerformAlt(AAtomPerformSendAtomPerformAlt node)
    {
        inAAtomPerformSendAtomPerformAlt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTTarget() != null)
        {
            node.getTTarget().apply(this);
        }
        if(node.getTSend() != null)
        {
            node.getTSend().apply(this);
        }
        outAAtomPerformSendAtomPerformAlt(node);
    }

    public void inACashewWorkflowDef(ACashewWorkflowDef node)
    {
        defaultIn(node);
    }

    public void outACashewWorkflowDef(ACashewWorkflowDef node)
    {
        defaultOut(node);
    }

    public void caseACashewWorkflowDef(ACashewWorkflowDef node)
    {
        inACashewWorkflowDef(node);
        if(node.getDataflowMediators() != null)
        {
            node.getDataflowMediators().apply(this);
        }
        if(node.getWorkflowPattern() != null)
        {
            node.getWorkflowPattern().apply(this);
        }
        if(node.getStateSignature() != null)
        {
            node.getStateSignature().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTCashewworkflow() != null)
        {
            node.getTCashewworkflow().apply(this);
        }
        outACashewWorkflowDef(node);
    }

    public void inASequentialWorkflowPattern(ASequentialWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outASequentialWorkflowPattern(ASequentialWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseASequentialWorkflowPattern(ASequentialWorkflowPattern node)
    {
        inASequentialWorkflowPattern(node);
        if(node.getMin2perflist() != null)
        {
            node.getMin2perflist().apply(this);
        }
        if(node.getTSequential() != null)
        {
            node.getTSequential().apply(this);
        }
        outASequentialWorkflowPattern(node);
    }

    public void inAConcurrentWorkflowPattern(AConcurrentWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outAConcurrentWorkflowPattern(AConcurrentWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseAConcurrentWorkflowPattern(AConcurrentWorkflowPattern node)
    {
        inAConcurrentWorkflowPattern(node);
        if(node.getMin2perflist() != null)
        {
            node.getMin2perflist().apply(this);
        }
        if(node.getTConcurrent() != null)
        {
            node.getTConcurrent().apply(this);
        }
        outAConcurrentWorkflowPattern(node);
    }

    public void inAInterleavedWorkflowPattern(AInterleavedWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outAInterleavedWorkflowPattern(AInterleavedWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseAInterleavedWorkflowPattern(AInterleavedWorkflowPattern node)
    {
        inAInterleavedWorkflowPattern(node);
        if(node.getMin2perflist() != null)
        {
            node.getMin2perflist().apply(this);
        }
        if(node.getTInterleaved() != null)
        {
            node.getTInterleaved().apply(this);
        }
        outAInterleavedWorkflowPattern(node);
    }

    public void inAXorWorkflowPattern(AXorWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outAXorWorkflowPattern(AXorWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseAXorWorkflowPattern(AXorWorkflowPattern node)
    {
        inAXorWorkflowPattern(node);
        if(node.getElsebrnach() != null)
        {
            node.getElsebrnach().apply(this);
        }
        if(node.getTXor() != null)
        {
            node.getTXor().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getIfbranch() != null)
        {
            node.getIfbranch().apply(this);
        }
        outAXorWorkflowPattern(node);
    }

    public void inAWhileWorkflowPattern(AWhileWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outAWhileWorkflowPattern(AWhileWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseAWhileWorkflowPattern(AWhileWorkflowPattern node)
    {
        inAWhileWorkflowPattern(node);
        if(node.getCashewPerform() != null)
        {
            node.getCashewPerform().apply(this);
        }
        if(node.getLogExpr() != null)
        {
            node.getLogExpr().apply(this);
        }
        if(node.getTWhile() != null)
        {
            node.getTWhile().apply(this);
        }
        outAWhileWorkflowPattern(node);
    }

    public void inAUntilWorkflowPattern(AUntilWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outAUntilWorkflowPattern(AUntilWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseAUntilWorkflowPattern(AUntilWorkflowPattern node)
    {
        inAUntilWorkflowPattern(node);
        if(node.getCashewPerform() != null)
        {
            node.getCashewPerform().apply(this);
        }
        if(node.getLogExpr() != null)
        {
            node.getLogExpr().apply(this);
        }
        if(node.getTUntil() != null)
        {
            node.getTUntil().apply(this);
        }
        outAUntilWorkflowPattern(node);
    }

    public void inADeferredchoiceWorkflowPattern(ADeferredchoiceWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outADeferredchoiceWorkflowPattern(ADeferredchoiceWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseADeferredchoiceWorkflowPattern(ADeferredchoiceWorkflowPattern node)
    {
        inADeferredchoiceWorkflowPattern(node);
        if(node.getMin2choicelist() != null)
        {
            node.getMin2choicelist().apply(this);
        }
        if(node.getTDeferredchoice() != null)
        {
            node.getTDeferredchoice().apply(this);
        }
        outADeferredchoiceWorkflowPattern(node);
    }

    public void inADeferredwhileWorkflowPattern(ADeferredwhileWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outADeferredwhileWorkflowPattern(ADeferredwhileWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseADeferredwhileWorkflowPattern(ADeferredwhileWorkflowPattern node)
    {
        inADeferredwhileWorkflowPattern(node);
        if(node.getCashewPerform() != null)
        {
            node.getCashewPerform().apply(this);
        }
        if(node.getTRepeat() != null)
        {
            node.getTRepeat().apply(this);
        }
        if(node.getAtomPerform() != null)
        {
            node.getAtomPerform().apply(this);
        }
        if(node.getTUnless() != null)
        {
            node.getTUnless().apply(this);
        }
        outADeferredwhileWorkflowPattern(node);
    }

    public void inADeferreduntilWorkflowPattern(ADeferreduntilWorkflowPattern node)
    {
        defaultIn(node);
    }

    public void outADeferreduntilWorkflowPattern(ADeferreduntilWorkflowPattern node)
    {
        defaultOut(node);
    }

    public void caseADeferreduntilWorkflowPattern(ADeferreduntilWorkflowPattern node)
    {
        inADeferreduntilWorkflowPattern(node);
        if(node.getAtomPerform() != null)
        {
            node.getAtomPerform().apply(this);
        }
        if(node.getTUntil() != null)
        {
            node.getTUntil().apply(this);
        }
        if(node.getCashewPerform() != null)
        {
            node.getCashewPerform().apply(this);
        }
        if(node.getTRepeat() != null)
        {
            node.getTRepeat().apply(this);
        }
        outADeferreduntilWorkflowPattern(node);
    }

    public void inAIf(AIf node)
    {
        defaultIn(node);
    }

    public void outAIf(AIf node)
    {
        defaultOut(node);
    }

    public void caseAIf(AIf node)
    {
        inAIf(node);
        if(node.getLogExpr() != null)
        {
            node.getLogExpr().apply(this);
        }
        if(node.getTIf() != null)
        {
            node.getTIf().apply(this);
        }
        outAIf(node);
    }

    public void inAMin2perflist(AMin2perflist node)
    {
        defaultIn(node);
    }

    public void outAMin2perflist(AMin2perflist node)
    {
        defaultOut(node);
    }

    public void caseAMin2perflist(AMin2perflist node)
    {
        inAMin2perflist(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getMoreperfs().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMoreperfs) temp[i]).apply(this);
            }
        }
        if(node.getCashewPerform() != null)
        {
            node.getCashewPerform().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAMin2perflist(node);
    }

    public void inAMoreperfs(AMoreperfs node)
    {
        defaultIn(node);
    }

    public void outAMoreperfs(AMoreperfs node)
    {
        defaultOut(node);
    }

    public void caseAMoreperfs(AMoreperfs node)
    {
        inAMoreperfs(node);
        if(node.getCashewPerform() != null)
        {
            node.getCashewPerform().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMoreperfs(node);
    }

    public void inAMin2choicelist(AMin2choicelist node)
    {
        defaultIn(node);
    }

    public void outAMin2choicelist(AMin2choicelist node)
    {
        defaultOut(node);
    }

    public void caseAMin2choicelist(AMin2choicelist node)
    {
        inAMin2choicelist(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            Object temp[] = node.getMorechoices().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMorechoices) temp[i]).apply(this);
            }
        }
        if(node.getEnables() != null)
        {
            node.getEnables().apply(this);
        }
        if(node.getAtomPerform() != null)
        {
            node.getAtomPerform().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAMin2choicelist(node);
    }

    public void inAMorechoices(AMorechoices node)
    {
        defaultIn(node);
    }

    public void outAMorechoices(AMorechoices node)
    {
        defaultOut(node);
    }

    public void caseAMorechoices(AMorechoices node)
    {
        inAMorechoices(node);
        if(node.getEnables() != null)
        {
            node.getEnables().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMorechoices(node);
    }

    public void inAEnables(AEnables node)
    {
        defaultIn(node);
    }

    public void outAEnables(AEnables node)
    {
        defaultOut(node);
    }

    public void caseAEnables(AEnables node)
    {
        inAEnables(node);
        if(node.getCashewPerform() != null)
        {
            node.getCashewPerform().apply(this);
        }
        if(node.getTEnables() != null)
        {
            node.getTEnables().apply(this);
        }
        outAEnables(node);
    }

    public void inADataflowMediators(ADataflowMediators node)
    {
        defaultIn(node);
    }

    public void outADataflowMediators(ADataflowMediators node)
    {
        defaultOut(node);
    }

    public void caseADataflowMediators(ADataflowMediators node)
    {
        inADataflowMediators(node);
        if(node.getIdlist() != null)
        {
            node.getIdlist().apply(this);
        }
        if(node.getTDataflowmediators() != null)
        {
            node.getTDataflowmediators().apply(this);
        }
        outADataflowMediators(node);
    }
}
